// Copyright (c) .NET Foundation and Contributors (https://dotnetfoundation.org/ & https://stride3d.net) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.

shader ComputeColorWaveNormal<float Frequency, float Amplitude, float Speed> : ComputeColor, Texturing
{
    override float4 Compute()
    {
        float2 offset = streams.TexCoord - 0.5;
        float phase = length(offset);

        float derivative = cos((phase + Global.Time * Speed) * 2 * 3.14 * Frequency) * Amplitude;

        float2 xz = SincosOfAtan(offset.y / offset.x);
        float2 xy = SincosOfAtan(derivative);

        float3 normal;
        normal.xy = (xz.yx * sign(offset.x) * -xy.x) * 0.5 + 0.5;
        normal.z = xy.y;
        return float4(normal, 1);
    }

    float2 SincosOfAtan(float x)
    {
        return float2(x, 1) / sqrt(1 + x * x);
    }
};
