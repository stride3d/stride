<!-- Build file post-included by all Xenko projects -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>.ssdeps; $(AllowedOutputExtensionsInPackageBuildOutputFolder)</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);_XenkoRegisterDependenciesOutputs</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>
  <!-- 
  *****************************************************************************************************************************
  Dependencies reading (from .ssdeps)
  *****************************************************************************************************************************
  -->

  <!-- List dependency files from .ssdeps -->
  <Target Name="_XenkoListDepsFiles" DependsOnTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <_XenkoDepsFile Include="@(ReferencePath->'%(RootDir)%(Directory)%(Filename).ssdeps')" Condition="'%(CopyLocal)' != 'false' And Exists('%(RootDir)%(Directory)%(Filename).ssdeps')"/>
      <_XenkoDepsFile Include="@(ReferenceDependencyPaths->'%(RootDir)%(Directory)%(Filename).ssdeps')" Condition="'%(CopyLocal)' != 'false' And Exists('%(RootDir)%(Directory)%(Filename).ssdeps')"/>
      <None Include="@(_XenkoDepsFile)" CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>

  <!-- Note: this target Outputs are not real, used so that it gets expanded for each file
             also, if _XenkoDepsFile is empty the target is still called so check for it -->
  <Target Name="_XenkoBuildDependencies" DependsOnTargets="_XenkoListDepsFiles" Outputs="%(_XenkoDepsFile.Identity)">
    <!-- Read dependencies from file -->
    <ReadLinesFromFile File="%(_XenkoDepsFile.Identity)" Condition="'%(_XenkoDepsFile.Identity)' != ''">
      <Output TaskParameter="Lines" ItemName="_XenkoDependencyLocal"/>
    </ReadLinesFromFile>
    <PropertyGroup>
      <_XenkoSourceDir>%(_XenkoDepsFile.RootDir)%(_XenkoDepsFile.Directory)</_XenkoSourceDir>
    </PropertyGroup>
    <ItemGroup>
      <_XenkoDependencyLocal>
        <!-- Note: Using regex match rather than regex split or string split to avoid MSBuild MissingMethodException -->
        <Type>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', `(.*);(.*);(.*)`).get_Groups().get_Item(1).ToString())</Type>
        <SourcePath>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', `(.*);(.*);(.*)`).get_Groups().get_Item(2).ToString())</SourcePath>
        <Link>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', `(.*);(.*);(.*)`).get_Groups().get_Item(3).ToString())</Link>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </_XenkoDependencyLocal>
      <_XenkoDependencyContent Include="@(_XenkoDependencyLocal->'$(_XenkoSourceDir)%(SourcePath)')" Condition="'%(_XenkoDependencyLocal.Type)' == 'Content'"/>
      <_XenkoDependencyNativeLib Include="@(_XenkoDependencyLocal->'$(_XenkoSourceDir)%(SourcePath)')" Condition="'%(_XenkoDependencyLocal.Type)' == 'NativeLib'"/>
    </ItemGroup>

    <!-- Message -->
    <Message Importance="Normal" Text="Detected dependency from %(_XenkoDepsFile.FileName)" Condition="'%(_XenkoDepsFile.Identity)' != ''"/>
    <Message Importance="Normal" Text="  %(_XenkoDependencyLocal.Type): %(_XenkoDependencyLocal.Identity) => %(_XenkoDependencyLocal.Link)"/>

    <!-- Cleanup so that _XenkoDependencyLocal is local -->
    <ItemGroup>
      <_XenkoDependencyLocal Remove="@(_XenkoDependencyLocal)"/>
    </ItemGroup>
  </Target>

  <Target Name="_XenkoCopyContent" DependsOnTargets="_XenkoBuildDependencies" AfterTargets="ResolveAssemblyReferences" Condition="'$(XenkoDependenciesCopy)' != 'false'">
    <ItemGroup>
      <Content Include="@(_XenkoDependencyContent)" Pack="False"/>
    </ItemGroup>
  </Target>

  <!-- 
  *****************************************************************************************************************************
  Native libraries setup (from .ssdeps)
  *****************************************************************************************************************************
  -->
  <Target Name="_XenkoSetupNativeLibraries" DependsOnTargets="_XenkoBuildDependencies" AfterTargets="ResolveAssemblyReferences" Condition="'$(XenkoDependenciesCopy)' != 'false'">
    <!-- Windows, UWP, Linux & macOS -->
    <ItemGroup Condition=" '$(XenkoPlatform)' == '' Or '$(XenkoPlatform)' == 'Windows' Or '$(XenkoPlatform)' == 'Linux' Or '$(XenkoPlatform)' == 'macOS' Or '$(XenkoPlatform)' == 'UWP' ">
      <None Include="@(_XenkoDependencyNativeLib)">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </None>
    </ItemGroup>

    <!-- Android -->
    <ItemGroup Condition=" '$(XenkoPlatform)' == 'Android' ">
      <AndroidNativeLibrary Include="@(_XenkoDependencyNativeLib)"/>
    </ItemGroup>

    <!--iOS -->
    <ItemGroup Condition=" '$(XenkoPlatform)' == 'iOS' ">
      <!-- strip any "lib" prefix and populate the LibraryName value -->
      <_XenkoDependencyNativeLib>
        <LibraryName>$([System.Text.RegularExpressions.Regex]::Match('%(Filename)', `(lib)*(.+)`).get_Groups().get_Item(2).ToString())</LibraryName>
      </_XenkoDependencyNativeLib>

      <None Include="@(_XenkoDependencyNativeLib)">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </None>
    </ItemGroup>
  
    <PropertyGroup Condition=" '$(XenkoPlatform)' == 'iOS' ">
      <MtouchExtraArgsLibs>$(XenkoMTouchExtras) -L"%24{ProjectDir}" @(_XenkoDependencyNativeLib->'-l%(LibraryName) "%24{ProjectDir}/%(Filename)%(Extension)"',' ')</MtouchExtraArgsLibs>
      <MtouchExtraArgs>$(MtouchExtraArgs) --compiler=clang -cxx -gcc_flags '-lstdc++ $(MtouchExtraArgsLibs)'</MtouchExtraArgs>
    </PropertyGroup>
  </Target>

  <!-- 
  *****************************************************************************************************************************
  Dependencies generation (to .ssdeps)
  *****************************************************************************************************************************
  -->
  <Target Name="_XenkoGenerateDependencies">
    <!-- Set TargetPath on XenkoContent and XenkoNativeLib -->
    <AssignTargetPath RootFolder="$(MSBuildProjectDirectory)" Files="@(XenkoContent)">
      <Output TaskParameter="AssignedFiles" ItemName="_XenkoContentAssigned"/>
    </AssignTargetPath>
    <AssignTargetPath RootFolder="$(MSBuildProjectDirectory)" Files="@(XenkoNativeLib)">
      <Output TaskParameter="AssignedFiles" ItemName="_XenkoNativeLibAssigned"/>
    </AssignTargetPath>

    <PropertyGroup>
      <_XenkoAppendRuntimeIdentifier Condition="'$(AppendRuntimeIdentifierToOutputPath)' == 'true' and '$(RuntimeIdentifier)' != '' and '$(_UsingDefaultRuntimeIdentifier)' != 'true'">true</_XenkoAppendRuntimeIdentifier>
    </PropertyGroup>

    <!-- Combine into _XenkoDependencyToCopy (and add RelativePath and Type) -->
    <ItemGroup>
      <_XenkoDependencyToCopy Include="@(_XenkoContentAssigned)">
        <RelativePath Condition="'%(_XenkoContentAssigned.RelativePath)' == ''">%(TargetPath)</RelativePath>
        <Type>Content</Type>
        <Destination>$(OutDir)%(TargetPath)</Destination>
      </_XenkoDependencyToCopy>

      <_XenkoDependencyToCopy Include="@(_XenkoNativeLibAssigned)">
        <RelativePath Condition="'%(_XenkoNativeLibAssigned.RelativePath)' == ''">%(TargetPath)</RelativePath>
        <Type>NativeLib</Type>
        <Destination>$(OutDir)%(TargetPath)</Destination>
      </_XenkoDependencyToCopy>
      
      <_XenkoDependencyToCopy Remove="@(_XenkoNativeLibAssigned)" Condition=" '$(XenkoPackageBuild)' == 'true' And '%(_XenkoNativeLibAssigned.Extension)' == '.pdb' "/>

      <_XenkoDependencyToCopy>
        <PackagePath Condition="'$(_XenkoAppendRuntimeIdentifier)' != 'true'">lib\$(TargetFramework)\$([System.IO.Path]::GetDirectoryName('%(TargetPath)'))</PackagePath>
        <PackagePath Condition="'$(_XenkoAppendRuntimeIdentifier)' == 'true'">runtimes\$(RuntimeIdentifier)\lib\$(TargetFramework)\$([System.IO.Path]::GetDirectoryName('%(TargetPath)'))</PackagePath>
      </_XenkoDependencyToCopy>
    </ItemGroup>

    <!-- Copy files -->
    <Copy
      SourceFiles = "@(_XenkoDependencyToCopy)"
      DestinationFiles = "@(_XenkoDependencyToCopy->'%(Destination)')"
      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
      Retries="$(CopyRetryCount)"
      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
      UseHardlinksIfPossible="$(CreateHardLinksForAdditionalFilesIfPossible)">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>

    <!-- Write file containing list of dependent files (or delete it if nothing) -->
    <WriteLinesToFile Condition="'@(_XenkoDependencyToCopy)' != ''" File="$(OutputPath)$(TargetName).ssdeps" Lines="@(_XenkoDependencyToCopy->'%(Type);%(TargetPath);%(RelativePath)')" Overwrite="true"/>
    <Delete Condition="'@(_XenkoDependencyToCopy)' == ''" Files="$(OutputPath)$(TargetName).ssdeps"/>
  </Target>

  <!-- Build -->
  <Target Name="_XenkoGenerateDependenciesAfterBuild" Condition="'$(TargetFramework)' != '' Or '$(XenkoProjectType)' == 'Cpp'" DependsOnTargets="_XenkoGenerateDependencies" AfterTargets="Build"/>
  <!-- Packaging -->
  <Target Name="_XenkoRegisterDependenciesOutputs" Condition="'$(TargetFramework)' != ''" DependsOnTargets="_XenkoGenerateDependencies">
    <ItemGroup Condition="'@(_XenkoDependencyToCopy)' != ''">
      <TfmSpecificPackageFile Include="$(OutputPath)\$(AssemblyName).ssdeps" Condition="'$(_XenkoAppendRuntimeIdentifier)' != 'true'" PackagePath="lib\$(TargetFramework)" />
      <TfmSpecificPackageFile Include="$(OutputPath)\$(AssemblyName).ssdeps" Condition="'$(_XenkoAppendRuntimeIdentifier)' == 'true'" PackagePath="runtimes\$(RuntimeIdentifier)\lib\$(TargetFramework)" />
      <TfmSpecificPackageFile Include="@(_XenkoDependencyToCopy)" />
    </ItemGroup>
  </Target>
</Project>
