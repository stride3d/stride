<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <!--
  Various development tools to build project/packages with graphics API dependent parts
  
  Packages will be built with following layout:
     lib/netstandard2.0/Direct3D11/MyAssembly.dll
     lib/netstandard2.0/MyAssembly.dll (placeholder so that we can piggyback on "RuntimeCopyLocalItems" from NET.Sdk)
  -->
  
  <!-- ==================================================================
       Targets used for Build to enumerate each StrideGraphicsApi for each TargetFramework
  -->
  <Target Name="_StrideQueryGraphicsApis" Returns="@(_StrideGraphicsApisItemsInternal)" Condition="'$(StrideProjectType)' != 'Cpp'">
    <!-- Use a fake runtime identifier to transmit StrideGraphicsApiDependent -->
    <ItemGroup Condition="'$(StrideGraphicsApis)' != ''">
      <_StrideGraphicsApisItemsInternal Include="$(StrideGraphicsApis)" TargetFramework="$(TargetFramework)" StrideGraphicsApiDependent="$(StrideGraphicsApiDependent)" />
    </ItemGroup>
    <ItemGroup Condition="'$(StrideGraphicsApis)' == ''">
      <_StrideGraphicsApisItemsInternal Include="$(StrideGraphicsApi)" TargetFramework="$(TargetFramework)" StrideGraphicsApiDependent="$(StrideGraphicsApiDependent)" />
    </ItemGroup>
  </Target>
  <Target Name="_ComputeTargetFrameworkItems" Returns="@(InnerOutput)">
    <ItemGroup>
      <_TargetFramework Condition="'$(TargetFrameworks)' != ''" Include="$(TargetFrameworks)" />
      <_TargetFramework Condition="'$(TargetFrameworks)' == ''" Include="$(TargetFramework)" />
      <!-- Make normalization explicit: Trim; Deduplicate by keeping first occurrence, case insensitive -->
      <_TargetFrameworkNormalized Include="@(_TargetFramework-&gt;Trim()-&gt;Distinct())" />
    </ItemGroup>
    <ItemGroup Condition="'$(StrideGraphicsApiDependent)' != 'true'">
      <_InnerBuildProjects Include="$(MSBuildProjectFile)">
        <AdditionalProperties>TargetFramework=%(_TargetFrameworkNormalized.Identity)</AdditionalProperties>
      </_InnerBuildProjects>
    </ItemGroup>
    <MSBuild Projects="$(MSBuildProjectFile)"
             Condition="'$(StrideGraphicsApiDependent)' == 'true'"
             BuildInParallel="$(BuildInParallel)"
             Properties="TargetFramework=%(_TargetFrameworkNormalized.Identity)"
             RemoveProperties="StrideGraphicsApi"
             Targets="_StrideQueryGraphicsApis">
      <Output ItemName="_StrideGraphicsApisItems" TaskParameter="TargetOutputs"  />
    </MSBuild>
    <ItemGroup Condition="'$(StrideGraphicsApiDependent)' == 'true'">
      <_TargetFrameworkWithStrideGraphicsApi Include="@(_StrideGraphicsApisItems->'%(OriginalItemSpec)')" StrideGraphicsApi="%(_StrideGraphicsApisItems.Identity)" />
      <_InnerBuildProjects Include="$(MSBuildProjectFile)">
        <AdditionalProperties Condition="'%(_TargetFrameworkWithStrideGraphicsApi.StrideGraphicsApiDependent)' != 'true'">TargetFramework=%(_TargetFrameworkWithStrideGraphicsApi.TargetFramework)</AdditionalProperties>
        <AdditionalProperties Condition="'%(_TargetFrameworkWithStrideGraphicsApi.StrideGraphicsApiDependent)' == 'true'">TargetFramework=%(_TargetFrameworkWithStrideGraphicsApi.TargetFramework);StrideGraphicsApi=%(_TargetFrameworkWithStrideGraphicsApi.StrideGraphicsApi)</AdditionalProperties>
      </_InnerBuildProjects>
    </ItemGroup>
  </Target>

  <!-- ==================================================================
       Targets to detect if a project reference (_MSBuildProjectReferenceExistent) is StrideGraphicsApiDependent -->
  <Target Name="_StrideQueryGraphicsApiDependent" Returns="@(_StrideGraphicsApiDependentItemsInternal)" Condition="'$(StrideProjectType)' != 'Cpp'">
    <!-- Use a fake runtime identifier to transmit StrideGraphicsApiDependent -->
    <ItemGroup>
      <_StrideGraphicsApiDependentItemsInternal Include="stride_fake_graphics_api" StrideGraphicsApiDependent="$(StrideGraphicsApiDependent)" />
    </ItemGroup>
  </Target>
  <Target Name="_StrideProjectReferenceGraphicsApiDependent" BeforeTargets="PrepareProjectReferences">
    <MSBuild Projects="@(_MSBuildProjectReferenceExistent)"
             BuildInParallel="$(BuildInParallel)"
             Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform); %(_MSBuildProjectReferenceExistent.SetTargetFramework);"
             RemoveProperties="StrideGraphicsApi"
             Targets="_StrideQueryGraphicsApiDependent"
             SkipNonexistentTargets="true">
      <Output ItemName="_StrideGraphicsApiDependentItems" TaskParameter="TargetOutputs"  />
    </MSBuild>
    <PropertyGroup>
      <!-- Transmit current graphics API. This is useful in case we have transitions such as: Direct3D12->ProjectWithoutGraphicsApi->Direct3D12
           otherwise it would try to build 3rd project twice (due to the reference from ProjectWithoutGraphicsApi). -->
      <_StrideGraphicsApiCurrent>$(StrideGraphicsApi)</_StrideGraphicsApiCurrent>
      <!-- We use a fallback in case the project without graphics API is the project initiating the build. -->
      <_StrideGraphicsApiCurrent Condition="'$(_StrideGraphicsApiCurrent)' == '' And '$(StrideGraphicsApis)' != ''">$(StrideGraphicsApis.Split(';', StringSplitOptions.RemoveEmptyEntries)[0])</_StrideGraphicsApiCurrent>
      <_StrideGraphicsApiCurrent Condition="'$(_StrideGraphicsApiCurrent)' == ''">$(StrideDefaultGraphicsApi)</_StrideGraphicsApiCurrent>
      <_StrideGraphicsApiCurrent Condition="'$(_StrideGraphicsApiCurrent)' == ''">Direct3D11</_StrideGraphicsApiCurrent>
    </PropertyGroup>
    <ItemGroup>
      <_MSBuildProjectReferenceExistent Remove="@(_StrideGraphicsApiDependentItems->'%(OriginalItemSpec)')" />
      <_MSBuildProjectReferenceExistent Include="@(_StrideGraphicsApiDependentItems->'%(OriginalItemSpec)')" Condition="'%(_StrideGraphicsApiDependentItems.StrideGraphicsApiDependent)' != 'true'" />
      <_MSBuildProjectReferenceExistent Include="@(_StrideGraphicsApiDependentItems->'%(OriginalItemSpec)')" Condition="'%(_StrideGraphicsApiDependentItems.StrideGraphicsApiDependent)' == 'true'">
        <StrideGraphicsApiDependent>%(_StrideGraphicsApiDependentItems.StrideGraphicsApiDependent)</StrideGraphicsApiDependent>
        <StrideGraphicsApi>$(_StrideGraphicsApiCurrent)</StrideGraphicsApi>
        <SetTargetFramework>%(_StrideGraphicsApiDependentItems.SetTargetFramework);StrideGraphicsApi=$(_StrideGraphicsApiCurrent)</SetTargetFramework>
      </_MSBuildProjectReferenceExistent>
      <_MSBuildProjectReferenceExistent Condition="'%(_MSBuildProjectReferenceExistent.StrideGraphicsApiDependent)' != 'true'">
        <GlobalPropertiesToRemove>%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove);StrideGraphicsApi</GlobalPropertiesToRemove>
      </_MSBuildProjectReferenceExistent>
    </ItemGroup>
  </Target>

  <!-- ==================================================================
       Target to generate Package with proper layout
  -->
  <Target Name="_StridePackUpdateOutputTargetPath">
    <!-- For default graphics API, we do a copy rather than a move,
         so that top-level folder contains default libraries and "RuntimeCopyLocalItems" target works properly -->
    <ItemGroup Condition="'$(StrideGraphicsApi)' == '$(StrideDefaultGraphicsApi)'">
      <SatelliteDllsProjectOutputGroupOutput Include="@(SatelliteDllsProjectOutputGroupOutput)">
        <TargetPath Condition="'%(SatelliteDllsProjectOutputGroupOutput.TargetPath)' == ''">%(FileName)%(Extension)</TargetPath>
        <TargetPath>$(StrideGraphicsApi)\%(SatelliteDllsProjectOutputGroupOutput.TargetPath)</TargetPath>
      </SatelliteDllsProjectOutputGroupOutput>
      <BuiltProjectOutputGroupOutput Include="@(BuiltProjectOutputGroupOutput)">
        <TargetPath Condition="'%(BuiltProjectOutputGroupOutput.TargetPath)' == ''">%(FileName)%(Extension)</TargetPath>
        <TargetPath>$(StrideGraphicsApi)\%(BuiltProjectOutputGroupOutput.TargetPath)</TargetPath>
      </BuiltProjectOutputGroupOutput>
      <DocumentationProjectOutputGroupOutput Include="@(DocumentationProjectOutputGroupOutput)">
        <TargetPath Condition="'%(DocumentationProjectOutputGroupOutput.TargetPath)' == ''">%(FileName)%(Extension)</TargetPath>
        <TargetPath>$(StrideGraphicsApi)\%(DocumentationProjectOutputGroupOutput.TargetPath)</TargetPath>
      </DocumentationProjectOutputGroupOutput>
      <_PathToPriFile Include="@(_PathToPriFile)">
        <TargetPath Condition="'%(_PathToPriFile.TargetPath)' == ''">%(FileName)%(Extension)</TargetPath>
        <TargetPath>$(StrideGraphicsApi)\%(_PathToPriFile.TargetPath)</TargetPath>
      </_PathToPriFile>
      <BuildOutputInPackage Include="@(BuildOutputInPackage)">
        <TargetPath Condition="'%(BuildOutputInPackage.TargetPath)' == ''">%(FileName)%(Extension)</TargetPath>
        <TargetPath>$(StrideGraphicsApi)\%(BuildOutputInPackage.TargetPath)</TargetPath>
      </BuildOutputInPackage>
    </ItemGroup>
    <ItemGroup Condition="'$(StrideGraphicsApi)' != '$(StrideDefaultGraphicsApi)'">
      <SatelliteDllsProjectOutputGroupOutput Update="@(SatelliteDllsProjectOutputGroupOutput)">
        <TargetPath Condition="'%(SatelliteDllsProjectOutputGroupOutput.TargetPath)' == ''">%(FileName)%(Extension)</TargetPath>
        <TargetPath>$(StrideGraphicsApi)\%(SatelliteDllsProjectOutputGroupOutput.TargetPath)</TargetPath>
      </SatelliteDllsProjectOutputGroupOutput>
      <BuiltProjectOutputGroupOutput Update="@(BuiltProjectOutputGroupOutput)">
        <TargetPath Condition="'%(BuiltProjectOutputGroupOutput.TargetPath)' == ''">%(FileName)%(Extension)</TargetPath>
        <TargetPath>$(StrideGraphicsApi)\%(BuiltProjectOutputGroupOutput.TargetPath)</TargetPath>
      </BuiltProjectOutputGroupOutput>
      <DocumentationProjectOutputGroupOutput Update="@(DocumentationProjectOutputGroupOutput)">
        <TargetPath Condition="'%(DocumentationProjectOutputGroupOutput.TargetPath)' == ''">%(FileName)%(Extension)</TargetPath>
        <TargetPath>$(StrideGraphicsApi)\%(DocumentationProjectOutputGroupOutput.TargetPath)</TargetPath>
      </DocumentationProjectOutputGroupOutput>
      <_PathToPriFile Update="@(_PathToPriFile)">
        <TargetPath Condition="'%(_PathToPriFile.TargetPath)' == ''">%(FileName)%(Extension)</TargetPath>
        <TargetPath>$(StrideGraphicsApi)\%(_PathToPriFile.TargetPath)</TargetPath>
      </_PathToPriFile>
      <BuildOutputInPackage Update="@(BuildOutputInPackage)">
        <TargetPath Condition="'%(BuildOutputInPackage.TargetPath)' == ''">%(FileName)%(Extension)</TargetPath>
        <TargetPath>$(StrideGraphicsApi)\%(BuildOutputInPackage.TargetPath)</TargetPath>
      </BuildOutputInPackage>
    </ItemGroup>
  </Target>

  <PropertyGroup Condition="'$(StrideGraphicsApiDependent)' == 'true'">
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);_StridePackUpdateOutputTargetPath</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <!-- ==================================================================
       Rewrote _WalkEachTargetPerFramework using @(_InnerBuildProjects)
  -->
  <Target Name="_WalkEachTargetPerFramework" DependsOnTargets="_ComputeTargetFrameworkItems">
    <MSBuild
      Condition="'$(IncludeBuildOutput)' == 'true'"
      Projects="@(_InnerBuildProjects)"
      Targets="_GetBuildOutputFilesWithTfm">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_BuildOutputInPackage" />
    </MSBuild>

    <MSBuild
      Condition="'$(TargetsForTfmSpecificContentInPackage)' != ''"
      Projects="@(_InnerBuildProjects)"
      Targets="_GetTfmSpecificContentForPackage">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_PackageFiles"/>
    </MSBuild>

    <MSBuild
      Condition="'$(IncludeBuildOutput)' == 'true'"
      Projects="@(_InnerBuildProjects)"
      Targets="_GetDebugSymbolsWithTfm">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_TargetPathsToSymbols" />
    </MSBuild>

    <MSBuild
      Condition="'$(IncludeSource)' == 'true'"
      Projects="@(_InnerBuildProjects)"
      Targets="SourceFilesProjectOutputGroup"
      Properties="BuildProjectReferences=false;">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_SourceFiles" />
    </MSBuild>

    <MSBuild
      Projects="@(_InnerBuildProjects)"
      Targets="_GetFrameworkAssemblyReferences"
      Properties="BuildProjectReferences=false;">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_FrameworkAssemblyReferences" />
    </MSBuild>

    <MSBuild
      Projects="@(_InnerBuildProjects)"
      Targets="_GetFrameworksWithSuppressedDependencies"
      Properties="BuildProjectReferences=false;">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_FrameworksWithSuppressedDependencies" />
    </MSBuild>
  </Target>

</Project>
