<!-- Build file post-included by all Xenko projects -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Add Default targets used by Msbuild for undefined Platforms / or when skipping compilation under a platform -->
  <Target Name="Build"/>
  <Target Name="Clean"/>
  <Target Name="ReBuild"/>
  <Target Name="Publish"/>
  <Target Name="GetTargetPath"/>
  <Target Name="GetNativeManifest"/>
  <Target Name="GetPackagingOutputs"/>

  <!--Import Local Post Settings for the solution being loaded -->
  <Import Project="$(SolutionDir)$(SolutionName).PostSettings.Local.targets" Condition="Exists('$(SolutionDir)$(SolutionName).PostSettings.Local.targets')" />
  <Import Project="$(SolutionDir)Xenko.Core.PostSettings.Local.targets" Condition="Exists('$(SolutionDir)Xenko.Core.PostSettings.Local.targets')" />
  
  <!-- Include platform dependent assembly when specified -->
  <Choose>
    <When Condition="'$(XenkoPlatformDependent)' == 'true'">
      <Choose>
        <When Condition=" '$(XenkoPlatform)' == 'Android'">
          <ItemGroup>
            <Reference Include="Mono.Android" />
          </ItemGroup>
        </When>
        <When Condition=" '$(XenkoPlatform)' == 'iOS'">
          <ItemGroup>
            <Reference Include="Xamarin.iOS" />
          </ItemGroup>
        </When>
      </Choose>
    </When>
  </Choose>

  <!-- Setup VisualStudioVersion -->
  <PropertyGroup Condition=" '$(VisualStudioVersion)' == '' or '$(VisualStudioVersion)' &lt; '11.0' ">
    <VisualStudioVersion>11.0</VisualStudioVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(XenkoCodeAnalysis)' == 'true'">
    <CodeAnalysisRuleSet>$(MSBuildThisFileDirectory)Xenko.ruleset</CodeAnalysisRuleSet>
    <!--<TreatWarningsAsErrors>true</TreatWarningsAsErrors>-->
  </PropertyGroup>
  <ItemGroup Condition="'$(XenkoCodeAnalysis)' == 'true'">
    <AdditionalFiles Include="$(MSBuildThisFileDirectory)stylecop.json" />
    <PackageReference Include="StyleCop.Analyzers" Version="1.1.0-beta008" PrivateAssets="All" />
  </ItemGroup>
  <!-- Disable analyzers unless XenkoEnableCodeAnalysis is set (note: PackageReference can't depend on external Condition) -->
  <Target Name="DisableAnalyzersForXenkoBuild"
        BeforeTargets="CoreCompile"
        Condition="'$(XenkoEnableCodeAnalysis)' != 'true'">
    <ItemGroup>
      <Analyzer Remove="@(Analyzer)"/>
    </ItemGroup>
  </Target>
  

  <!-- Setup compiler targets per platform / language -->
  <PropertyGroup>
    <!-- On Android, everything is library (even Exe) -->
    <OutputType Condition=" '$(XenkoPlatform)' == 'Android' ">Library</OutputType>

    <OutputPath Condition="'$(XenkoProjectType)' == 'Cpp'">$(OutDir)</OutputPath>
    <IntermediateOutputPath Condition="'$(XenkoProjectType)' == 'Cpp'">$(IntDir)</IntermediateOutputPath>
  </PropertyGroup>

  <!-- Workaround for https://github.com/onovotny/MSBuildSdkExtras/issues/174 -->
  <Target Name="_XenkoRemoveNonExistingResgenFile" BeforeTargets="CoreCompile" Condition="'$(_SdkSetAndroidResgenFile)' == 'true' And '$(AndroidResgenFile)' != '' And !Exists('$(AndroidResgenFile)')">
    <ItemGroup>
      <Compile Remove="$(AndroidResgenFile)"/>
    </ItemGroup>
  </Target>

  <!-- User Documentation (.usrdoc) -->
  <PropertyGroup Condition="'$(XenkoPublicApi)' == 'true'">
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.usrdoc</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);_XenkoRegisterUserDocOutputs</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>
  <Target Name="_XenkoRegisterUserDocOutputs">
    <ItemGroup Condition="Exists('$(OutputPath)$(AssemblyName).usrdoc')">
      <BuildOutputInPackage Include="$(OutputPath)$(AssemblyName).usrdoc"/>
    </ItemGroup>
  </Target>
  <Target Name="_XenkoRegisterUserDocReferenceRelatedFileExtensions" Condition="'$(XenkoPublicApi)' == 'true'" BeforeTargets="ResolveAssemblyReferences">
    <PropertyGroup>
      <AllowedReferenceRelatedFileExtensions>$(AllowedReferenceRelatedFileExtensions);.usrdoc</AllowedReferenceRelatedFileExtensions>
    </PropertyGroup>
  </Target>

  <PropertyGroup>
    <XenkoCompilerTargetsEnable Condition=" '$(XenkoPlatform)' != 'Windows' and $(XenkoWindowsOnly) == 'true'">false</XenkoCompilerTargetsEnable>

    <!-- Skip unit tests if requested -->
    <XenkoCompilerTargetsEnable Condition="'$(XenkoSkipUnitTests)' == 'true' And $(XenkoOutputFolder.StartsWith('Tests'))">false</XenkoCompilerTargetsEnable>

    <!-- If XenkoCompilerTargetsEnable is set to false, override LanguageTargets to an empty one -->
    <LanguageTargets Condition="'$(XenkoCompilerTargetsEnable)' == 'false'">$(MSBuildThisFileDirectory)Xenko.Core.DisableBuild.targets</LanguageTargets>
  </PropertyGroup>
  
  <!-- C++ doesn't auto-import language targets -->
  <Import Condition="'$(XenkoProjectType)' == 'Cpp' And '$(XenkoCompilerTargetsEnable)' != 'false'" Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />

  <UsingTask TaskName="AssemblyProcessorTask" AssemblyFile="$(XenkoAssemblyProcessorPath)" Condition=" '$(XenkoAssemblyProcessorPath)' != '' And '$(XenkoAssemblyProcessorDev)' != 'true' "/>
  
  <Target Name="RunXenkoAssemblyProcessor" BeforeTargets="CopyFilesToOutputDirectory" Condition=" '$(XenkoAssemblyProcessor)' == 'true' and '$(XenkoAssemblyProcessorPath)' != '' and '$(XenkoAssemblyProcessorGlobal)' == 'true' and '$(XenkoAssemblyProcessorOptions)' != '' ">
    <PropertyGroup Condition="'$(XenkoUserBuild)' != 'true'">
      <!-- Add Xenko.Core path to assembly search directory -->
      <XenkoAssemblyProcessorOptions Condition="'$(XenkoCoreAssemblyPath)' != ''">$(XenkoAssemblyProcessorOptions) --assembly="$(XenkoCoreAssemblyPath)"</XenkoAssemblyProcessorOptions>
    </PropertyGroup>

    <WriteLinesToFile File="$(IntermediateOutputPath)XenkoReferences.cache" Lines="@(ReferencePath)" Overwrite="true" />

    <!--Add platform and target framework to assembly processor options-->
    <PropertyGroup>
      <XenkoAssemblyProcessorOptions>--platform=$(XenkoPlatform) --targetFramework=$(TargetFrameworkVersion) $(XenkoAssemblyProcessorOptions)</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions>$(XenkoAssemblyProcessorOptions) --references-file="$(IntermediateOutputPath)XenkoReferences.cache"</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions Condition="'$(AssemblyOriginatorKeyFile)' != ''">$(XenkoAssemblyProcessorOptions) --signkeyfile="$(AssemblyOriginatorKeyFile)"</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions Condition="'$(DocumentationFile)' != ''">$(XenkoAssemblyProcessorOptions) --docfile="$(DocumentationFile)"</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions>$(XenkoAssemblyProcessorOptions) --Werror</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions>$(XenkoAssemblyProcessorOptions) "$(IntermediateOutputPath)$(TargetName)$(TargetExt)"</XenkoAssemblyProcessorOptions>
    </PropertyGroup>

    <!-- Run assembly processor -->
    <Message Importance="High" Text="&quot;$(XenkoAssemblyProcessorPath)&quot; $(XenkoAssemblyProcessorOptions)"/>
    <AssemblyProcessorTask Condition=" '$(XenkoAssemblyProcessorDev)' != 'true' " Arguments="$(XenkoAssemblyProcessorOptions)"/>
    <!-- Dev mode: don't use task to avoid locking the file -->
    <Exec Condition=" '$(XenkoAssemblyProcessorDev)' == 'true' " Command="&quot;$(XenkoAssemblyProcessorPath)&quot; $(XenkoAssemblyProcessorOptions)"/>

    <!-- Copy User Documentation (.usrdoc) file to output -->
    <Copy
      Condition="'$(XenkoPublicApi)' == 'true' And Exists('%(RelativeDir)%(Filename).usrdoc')"
      SourceFiles="@(DocFileItem->'%(RelativeDir)%(Filename).usrdoc')"
      DestinationFolder="$(OutDir)"
      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
      Retries="$(CopyRetryCount)"
      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
      UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
      UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
    >
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)Xenko.Core.Sign.targets" />
  
  <Target Name="SetPrivateOnProjectReferences" BeforeTargets="BeforeCompile" AfterTargets="IncludeTransitiveProjectReferences">
    <!-- Automatically add Private on project references if they are already built in same folder as output folder -->
	<!-- Also add PrivateAssets All to all Private projects -->
    <ItemGroup Condition="'$(OutputPath)' == '$(XenkoOutputCommonDir)'">
      <ProjectReferenceNew Include="@(ProjectReference)">
        <Private>False</Private>
      </ProjectReferenceNew>
      <ProjectReference Remove="@(ProjectReference)"/>
      <ProjectReference Include="@(ProjectReferenceNew)"/>
    </ItemGroup>
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)Xenko.Core.PostSettings.Dependencies.targets"/>
  
  <Import Condition="'$(XenkoNativeOutputName)' != ''" Project="$(MSBuildThisFileDirectory)..\native\Xenko.Native.targets" />

  <!-- Auto NuGet build packages and deploy them -->
  <Target Name="XenkoAutoPackDeploy" AfterTargets="Pack">
    <Copy Condition="'%(Extension)' == '.nupkg'" SourceFiles="@(NuGetPackOutput)" DestinationFolder="$(LocalAppData)\Xenko\NugetDev"/>
    <!-- Deleting .sha512 file and/or .nupkg.metadata seems to be enough for NuGet restore to force extract new package and properly compile dependent projects -->
    <Delete Files="$(NuGetPackageRoot)\$(PackageId.ToLowerInvariant())\$(PackageVersion)\$(PackageId).$(PackageVersion).nupkg.sha512"/>
    <Delete Files="$(NuGetPackageRoot)\$(PackageId.ToLowerInvariant())\$(PackageVersion)\.nupkg.metadata"/>
  </Target>
  <PropertyGroup Condition="$(DesignTimeBuild) != 'true' And '$(XenkoSkipAutoPack)' != 'true'">
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>

  <!-- Generate localization satellite assemblies -->
  <Target Name="XenkoGenerateLocalizationSatelliteDlls" BeforeTargets="SatelliteDllsProjectOutputGroup" Returns="@(SatelliteDllsProjectOutputGroupOutput)" Condition="'$(XenkoLocalized)' == 'true' And '$(Configuration)' == 'Release'">
    <ItemGroup>
      <!-- Current list of languages to try to generate -->
      <XenkoTraductions Include="fr;ja;es;de;ru"/>
      <XenkoTraductions Include="zh-Hans">
        <Source>zh_HANS-CN</Source>
      </XenkoTraductions>

      <_XenkoTraductions Include="@(XenkoTraductions)">
        <Source Condition="%(XenkoTraductions.Source) == ''">%(XenkoTraductions.Identity)</Source>
      </_XenkoTraductions>
    </ItemGroup>
    <Message Importance="High" Text="Generating traduction for %(_XenkoTraductions.Identity) %(_XenkoTraductions.SourceFolder)"/>
    <Exec Condition="Exists('$(SolutionDir)..\sources\localization\%(_XenkoTraductions.Source)\$(TargetName).%(_XenkoTraductions.Source).po')" Command="Path=$(RoslynTargetsPath);$(Path)
&quot;$(SolutionDir)..\deps\Gettext.Net\GNU.Gettext.Msgfmt.exe&quot; --lib-dir &quot;$(SolutionDir)..\deps\Gettext.Net&quot; --resource $(TargetName) -d &quot;$(TargetDir).&quot; --locale %(_XenkoTraductions.Identity) &quot;$(MSBuildThisFileDirectory)..\localization\%(_XenkoTraductions.Source)\$(TargetName).%(_XenkoTraductions.Source).po&quot; --verbose" />
    <ItemGroup>
      <SatelliteDllsProjectOutputGroupOutputIntermediate Include="$(OutDir)%(_XenkoTraductions.Identity)\$(TargetName).Messages.resources.dll" Condition="Exists('$(OutDir)%(_XenkoTraductions.Identity)\$(TargetName).Messages.resources.dll')">
        <TargetPath>%(_XenkoTraductions.Identity)\$(TargetName).Messages.resources.dll</TargetPath>
        <Culture>%(_XenkoTraductions.Identity)</Culture>
      </SatelliteDllsProjectOutputGroupOutputIntermediate>
    </ItemGroup>
  </Target>

</Project>
