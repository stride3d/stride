// Copyright (c) .NET Foundation and Contributors (https://dotnetfoundation.org/ & https://stride3d.net) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.
using Xunit;

using Stride.Engine;
using Stride.Graphics;
using Stride.Rendering.Sprites;
using Stride.UI.Controls;
using Stride.UI.Events;

namespace Stride.UI.Tests.Layering
{
    /// <summary>
    /// A class that contains test functions for layering of the <see cref="ToggleButton"/> class.
    /// </summary>
    [System.ComponentModel.Description("Tests for ToggleButton layering")]
    public class ToggleButtonTests : ToggleButton
    {
        /// <summary>
        /// Test the default property values of ToggleButton.
        /// </summary>
        [Fact]
        public void TestProperties()
        {
            var control = new ToggleButton();

            // test properties default values
            Assert.Equal(new Thickness(10, 5, 10, 7), control.Padding);
            Assert.Equal(ToggleState.UnChecked, control.State);
            Assert.False(control.IsThreeState);
            
            // test new mouse over image properties default values
            Assert.Null(control.CheckedMouseOverImage);
            Assert.Null(control.UncheckedMouseOverImage);
            Assert.Null(control.IndeterminateMouseOverImage);
            
            // test existing image properties default values
            Assert.Null(control.CheckedImage);
            Assert.Null(control.UncheckedImage);
            Assert.Null(control.IndeterminateImage);
        }

        /// <summary>
        /// Test the invalidations generated object property changes.
        /// </summary>
        [Fact]
        public void TestBasicInvalidations()
        {
            // CheckedImage, IndeterminateImage, UncheckedImage and State are not tested because they can potentially invalidate or not the layout states

            // - test the properties that are not supposed to invalidate the object layout state
            UIElementLayeringTests.TestNoInvalidation(this, () => IsThreeState = true);
        }

        /// <summary>
        /// Test the invalidations generated by mouse over image property changes.
        /// </summary>
        [Fact]
        public void TestMouseOverImageInvalidations()
        {
            // Create test sprites
            var sprite1 = (SpriteFromTexture)new Sprite();
            var sprite2 = (SpriteFromTexture)new Sprite();
            var sprite3 = (SpriteFromTexture)new Sprite();

            // - test that mouse over image properties do not invalidate layout state by default
            UIElementLayeringTests.TestNoInvalidation(this, () => CheckedMouseOverImage = sprite1);
            UIElementLayeringTests.TestNoInvalidation(this, () => UncheckedMouseOverImage = sprite2);
            UIElementLayeringTests.TestNoInvalidation(this, () => IndeterminateMouseOverImage = sprite3);
        }

        /// <summary>
        /// Test the ToggleButtonImageProvider property returns correct images based on state and mouse over.
        /// </summary>
        [Fact]
        public void TestToggleButtonImageProvider()
        {
            var control = new ToggleButton();
            
            // Create test sprites
            var checkedImage = (SpriteFromTexture)new Sprite();
            var uncheckedImage = (SpriteFromTexture)new Sprite();
            var indeterminateImage = (SpriteFromTexture)new Sprite();
            var checkedMouseOverImage = (SpriteFromTexture)new Sprite();
            var uncheckedMouseOverImage = (SpriteFromTexture)new Sprite();
            var indeterminateMouseOverImage = (SpriteFromTexture)new Sprite();

            // Set the images
            control.CheckedImage = checkedImage;
            control.UncheckedImage = uncheckedImage;
            control.IndeterminateImage = indeterminateImage;
            control.CheckedMouseOverImage = checkedMouseOverImage;
            control.UncheckedMouseOverImage = uncheckedMouseOverImage;
            control.IndeterminateMouseOverImage = indeterminateMouseOverImage;

            // Test unchecked state without mouse over
            control.State = ToggleState.UnChecked;
            // Since MouseOverState defaults to MouseOverNone, the regular image should be returned
            Assert.Equal(uncheckedImage, control.ToggleButtonImageProvider);

            // Test checked state without mouse over
            control.State = ToggleState.Checked;
            Assert.Equal(checkedImage, control.ToggleButtonImageProvider);

            // Test indeterminate state without mouse over
            control.IsThreeState = true;
            control.State = ToggleState.Indeterminate;
            Assert.Equal(indeterminateImage, control.ToggleButtonImageProvider);
        }

        /// <summary>
        /// Test that ToggleButtonImage property returns the correct sprite.
        /// </summary>
        [Fact]
        public void TestToggleButtonImage()
        {
            var control = new ToggleButton();
            
            // Test with null image provider
            Assert.Null(control.ToggleButtonImage);
            
            // Create and set a test sprite
            var testSprite = new Sprite();
            var spriteProvider = (SpriteFromTexture)testSprite;
            control.UncheckedImage = spriteProvider;
            
            // Test that the image is returned correctly
            control.State = ToggleState.UnChecked;
            Assert.Equal(testSprite, control.ToggleButtonImage);
        }

        /// <summary>
        /// Test backward compatibility when mouse over images are not set.
        /// </summary>
        [Fact]
        public void TestBackwardCompatibilityWithoutMouseOverImages()
        {
            var control = new ToggleButton();
            
            // Create test sprites for regular images only
            var checkedImage = (SpriteFromTexture)new Sprite();
            var uncheckedImage = (SpriteFromTexture)new Sprite();
            var indeterminateImage = (SpriteFromTexture)new Sprite();

            // Set only the regular images (no mouse over images)
            control.CheckedImage = checkedImage;
            control.UncheckedImage = uncheckedImage;
            control.IndeterminateImage = indeterminateImage;

            // Test that regular images are returned even when mouse over images are null
            control.State = ToggleState.UnChecked;
            Assert.Equal(uncheckedImage, control.ToggleButtonImageProvider);

            control.State = ToggleState.Checked;
            Assert.Equal(checkedImage, control.ToggleButtonImageProvider);

            control.IsThreeState = true;
            control.State = ToggleState.Indeterminate;
            Assert.Equal(indeterminateImage, control.ToggleButtonImageProvider);
        }

        /// <summary>
        /// Test state changes and their effect on image selection.
        /// </summary>
        [Fact]
        public void TestStateChangesWithImages()
        {
            var control = new ToggleButton();
            
            // Create test sprites
            var checkedImage = (SpriteFromTexture)new Sprite();
            var uncheckedImage = (SpriteFromTexture)new Sprite();
            var indeterminateImage = (SpriteFromTexture)new Sprite();

            control.CheckedImage = checkedImage;
            control.UncheckedImage = uncheckedImage;
            control.IndeterminateImage = indeterminateImage;

            // Test initial state
            Assert.Equal(ToggleState.UnChecked, control.State);
            Assert.Equal(uncheckedImage, control.ToggleButtonImageProvider);

            // Test state change to checked
            control.State = ToggleState.Checked;
            Assert.Equal(checkedImage, control.ToggleButtonImageProvider);

            // Test state change to indeterminate (should automatically set IsThreeState to true)
            control.State = ToggleState.Indeterminate;
            Assert.True(control.IsThreeState);
            Assert.Equal(indeterminateImage, control.ToggleButtonImageProvider);

            // Test state change back to unchecked
            control.State = ToggleState.UnChecked;
            Assert.Equal(uncheckedImage, control.ToggleButtonImageProvider);
        }

        /// <summary>
        /// Test that setting IsThreeState to false when in Indeterminate state changes the state.
        /// </summary>
        [Fact]
        public void TestThreeStateToFalseWhenIndeterminate()
        {
            var control = new ToggleButton();
            
            // Set to indeterminate state
            control.State = ToggleState.Indeterminate;
            Assert.True(control.IsThreeState);
            Assert.Equal(ToggleState.Indeterminate, control.State);

            // Set IsThreeState to false should change the state
            control.IsThreeState = false;
            Assert.False(control.IsThreeState);
            Assert.NotEqual(ToggleState.Indeterminate, control.State);
        }

        /// <summary>
        /// Test that GoToNextState works correctly with different IsThreeState values.
        /// </summary>
        [Fact]
        public void TestGoToNextStateWithImages()
        {
            var control = new TestableToggleButton();
            
            // Create test sprites
            var checkedImage = (SpriteFromTexture)new Sprite();
            var uncheckedImage = (SpriteFromTexture)new Sprite();
            var indeterminateImage = (SpriteFromTexture)new Sprite();

            control.CheckedImage = checkedImage;
            control.UncheckedImage = uncheckedImage;
            control.IndeterminateImage = indeterminateImage;

            // Test two-state toggle (IsThreeState = false)
            control.IsThreeState = false;
            control.State = ToggleState.UnChecked;
            Assert.Equal(uncheckedImage, control.ToggleButtonImageProvider);

            // Simulate clicking (since OnClick is protected, we use a testable version)
            control.SimulateClick();
            Assert.Equal(ToggleState.Checked, control.State);
            Assert.Equal(checkedImage, control.ToggleButtonImageProvider);

            control.SimulateClick();
            Assert.Equal(ToggleState.UnChecked, control.State);
            Assert.Equal(uncheckedImage, control.ToggleButtonImageProvider);

            // Test three-state toggle
            control.IsThreeState = true;
            control.State = ToggleState.UnChecked;

            control.SimulateClick(); // UnChecked -> Checked
            Assert.Equal(ToggleState.Checked, control.State);
            Assert.Equal(checkedImage, control.ToggleButtonImageProvider);

            control.SimulateClick(); // Checked -> Indeterminate
            Assert.Equal(ToggleState.Indeterminate, control.State);
            Assert.Equal(indeterminateImage, control.ToggleButtonImageProvider);

            control.SimulateClick(); // Indeterminate -> UnChecked
            Assert.Equal(ToggleState.UnChecked, control.State);
            Assert.Equal(uncheckedImage, control.ToggleButtonImageProvider);
        }

        /// <summary>
        /// Test the mouse over image logic using reflection to simulate mouse over state.
        /// </summary>
        [Fact]
        public void TestMouseOverImagePrecedence()
        {
            var control = new TestableToggleButton();
            
            // Create test sprites
            var checkedImage = (SpriteFromTexture)new Sprite();
            var uncheckedImage = (SpriteFromTexture)new Sprite();
            var checkedMouseOverImage = (SpriteFromTexture)new Sprite();
            var uncheckedMouseOverImage = (SpriteFromTexture)new Sprite();

            control.CheckedImage = checkedImage;
            control.UncheckedImage = uncheckedImage;
            control.CheckedMouseOverImage = checkedMouseOverImage;
            control.UncheckedMouseOverImage = uncheckedMouseOverImage;

            // Test unchecked state without mouse over
            control.State = ToggleState.UnChecked;
            control.SetMouseOverState(MouseOverState.MouseOverNone);
            Assert.Equal(uncheckedImage, control.ToggleButtonImageProvider);

            // Test unchecked state with mouse over
            control.SetMouseOverState(MouseOverState.MouseOverElement);
            Assert.Equal(uncheckedMouseOverImage, control.ToggleButtonImageProvider);

            // Test checked state without mouse over
            control.State = ToggleState.Checked;
            control.SetMouseOverState(MouseOverState.MouseOverNone);
            Assert.Equal(checkedImage, control.ToggleButtonImageProvider);

            // Test checked state with mouse over
            control.SetMouseOverState(MouseOverState.MouseOverElement);
            Assert.Equal(checkedMouseOverImage, control.ToggleButtonImageProvider);
        }

        /// <summary>
        /// Test that fallback to regular images works when mouse over images are null.
        /// </summary>
        [Fact]
        public void TestMouseOverFallbackToRegularImages()
        {
            var control = new TestableToggleButton();
            
            // Create test sprites (only regular images, no mouse over images)
            var checkedImage = (SpriteFromTexture)new Sprite();
            var uncheckedImage = (SpriteFromTexture)new Sprite();

            control.CheckedImage = checkedImage;
            control.UncheckedImage = uncheckedImage;
            // Deliberately not setting mouse over images

            // Test that regular images are used even when mouse is over
            control.State = ToggleState.UnChecked;
            control.SetMouseOverState(MouseOverState.MouseOverElement);
            Assert.Equal(uncheckedImage, control.ToggleButtonImageProvider);

            control.State = ToggleState.Checked;
            control.SetMouseOverState(MouseOverState.MouseOverElement);
            Assert.Equal(checkedImage, control.ToggleButtonImageProvider);
        }

        /// <summary>
        /// Test that indeterminate state works correctly with mouse over images.
        /// </summary>
        [Fact]  
        public void TestIndeterminateMouseOverImages()
        {
            var control = new TestableToggleButton();
            
            // Create test sprites  
            var indeterminateImage = (SpriteFromTexture)new Sprite();
            var indeterminateMouseOverImage = (SpriteFromTexture)new Sprite();

            control.IndeterminateImage = indeterminateImage;
            control.IndeterminateMouseOverImage = indeterminateMouseOverImage;

            // Test indeterminate state without mouse over
            control.IsThreeState = true;
            control.State = ToggleState.Indeterminate;
            control.SetMouseOverState(MouseOverState.MouseOverNone);
            Assert.Equal(indeterminateImage, control.ToggleButtonImageProvider);

            // Test indeterminate state with mouse over
            control.SetMouseOverState(MouseOverState.MouseOverElement);
            Assert.Equal(indeterminateMouseOverImage, control.ToggleButtonImageProvider);

            // Test fallback when mouse over image is null
            control.IndeterminateMouseOverImage = null;
            control.SetMouseOverState(MouseOverState.MouseOverElement);
            Assert.Equal(indeterminateImage, control.ToggleButtonImageProvider);
        }
    }

    /// <summary>
    /// A testable version of ToggleButton that allows simulating mouse over state and click events.
    /// </summary>
    internal class TestableToggleButton : ToggleButton
    {
        private MouseOverState simulatedMouseOverState = MouseOverState.MouseOverNone;

        /// <summary>
        /// Get the current mouse over state (either simulated or actual).
        /// </summary>
        public new MouseOverState MouseOverState => simulatedMouseOverState;

        /// <summary>
        /// Set the mouse over state for testing purposes.
        /// </summary>
        public void SetMouseOverState(MouseOverState state)
        {
            simulatedMouseOverState = state;
        }

        /// <summary>
        /// Override the ToggleButtonImageProvider to use our simulated mouse over state.
        /// </summary>
        internal new ISpriteProvider ToggleButtonImageProvider
        {
            get
            {
                var isMouseOver = MouseOverState == MouseOverState.MouseOverElement;
                
                switch (State)
                {
                    case ToggleState.Checked:
                        return (isMouseOver && CheckedMouseOverImage != null) ? CheckedMouseOverImage : CheckedImage;
                    case ToggleState.Indeterminate:
                        return (isMouseOver && IndeterminateMouseOverImage != null) ? IndeterminateMouseOverImage : IndeterminateImage;
                    case ToggleState.UnChecked:
                        return (isMouseOver && UncheckedMouseOverImage != null) ? UncheckedMouseOverImage : UncheckedImage;
                    default:
                        throw new System.ArgumentOutOfRangeException();
                }
            }
        }

        /// <summary>
        /// Simulate a click event to test state transitions.
        /// </summary>
        public void SimulateClick()
        {
            OnClick(new RoutedEventArgs(ClickEvent));
        }
    }
}
