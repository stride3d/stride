// Copyright (c) .NET Foundation and Contributors (https://dotnetfoundation.org/ & https://stride3d.net) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.

using Stride.Core;

namespace Stride.Graphics;

/// <summary>
///   A <strong>Blend Option</strong> identifying the data source and an optional pre-blend operation,
///   which help define how Pixel Shader output is mixed with the destination color in rendering operations.
/// </summary>
/// <remarks>
///   Blend options are specified in a <see cref="BlendStateDescription"/>.
/// </remarks>
[DataContract]
public enum Blend
{
    /// <summary>
    ///   The data source is the <strong>zero vector</strong> <c>(0, 0, 0, 0)</c>, meaning each component of the color generated
    ///   by the Pixel Shader is multiplied by zero.
    ///   <br/>
    ///   No pre-blend operation.
    /// </summary>
    Zero = 1,

    /// <summary>
    ///   The data source is the <strong>one vector</strong> <c>(1, 1, 1, 1)</c>, meaning each component of the color generated
    ///   by the Pixel Shader is multiplied by one
    ///   <br/>
    ///   No pre-blend operation.
    /// </summary>
    One = 2,

    /// <summary>
    ///   The data source is <strong>color data</strong> (RGB) generated by the Pixel Shader.
    ///   <br/>
    ///   No pre-blend operation. Each component is directly used for blending.
    /// </summary>
    SourceColor = 3,

    /// <summary>
    ///   The data source is <strong>color data</strong> (RGB) generated by the Pixel Shader.
    ///   <br/>
    ///   The pre-blend operation <strong>inverts the data</strong>. Each component is inverted (<c>1 - RGB</c>) before blending.
    /// </summary>
    InverseSourceColor = 4,

    /// <summary>
    ///   The data source is <strong>alpha data</strong> (A) generated by the Pixel Shader.
    ///   <br/>
    ///   No pre-blend operation. The alpha value is directly used for blending.
    /// </summary>
    SourceAlpha = 5,

    /// <summary>
    ///   The data source is <strong>alpha data</strong> (A) generated by the Pixel Shader.
    ///   <br/>
    ///   The pre-blend operation <strong>inverts the data</strong>. The alpha value is inverted (<c>1 - A</c>) before blending.
    /// </summary>
    InverseSourceAlpha = 6,

    /// <summary>
    ///   The data source is the <strong>alpha value</strong> that comes from the existing Render Target before blending.
    ///   <br/>
    ///   No pre-blend operation. The alpha value is directly used for blending.
    /// </summary>
    DestinationAlpha = 7,

    /// <summary>
    ///   The data source is the <strong>alpha value</strong> that comes from the existing Render Target before blending.
    ///   <br/>
    ///   The pre-blend operation <strong>inverts the data</strong>. The alpha value is inverted (<c>1 - A</c>) before blending.
    /// </summary>
    InverseDestinationAlpha = 8,

    /// <summary>
    ///   The data source is <strong>color data</strong> already present in a Render Target.
    ///   <br/>
    ///   No pre-blend operation. Each component is directly used for blending.
    /// </summary>
    DestinationColor = 9,

    /// <summary>
    ///   The data source is <strong>color data</strong> already present in a Render Target.
    ///   <br/>
    ///   The pre-blend operation <strong>inverts the data</strong>. Each component is inverted (<c>1 - RGB</c>) before blending.
    /// </summary>
    InverseDestinationColor = 10,

    /// <summary>
    ///   The data source is <strong>alpha data</strong> generated by the Pixel Shader.
    ///   <br/>
    ///   The pre-blend operation <strong>clamps the data</strong> to 1 or less.
    ///   This ensures the alpha value does not exceed 1, preventing unintended brightness shifts.
    /// </summary>
    SourceAlphaSaturate = 11,

    /// <summary>
    ///   The data source is a <strong>blend factor</strong> set in the <see cref="BlendStateDescription"/>.
    ///   <br/>
    ///   No pre-blend operation. The blend factor is directly used for blending.
    /// </summary>
    BlendFactor = 14,

    /// <summary>
    ///   The data source is a <strong>blend factor</strong> set in the <see cref="BlendStateDescription"/>.
    ///   <br/>
    ///   The pre-blend operation <strong>inverts the data</strong>. The blend factor is inverted (<c>1 - blendFactor</c>) before blending.
    /// </summary>
    InverseBlendFactor = 15,

    /// <summary>
    ///   Uses <strong>two color outputs</strong> (RGB0 and RGB1) from the Pixel Shader for advanced blending techniques.
    ///   <br/>
    ///   No pre-blend operation. Each component is directly used for blending.
    /// </summary>
    SecondarySourceColor = 16,

    /// <summary>
    ///   The data source is <strong>primary color data</strong> (RGB0) and <strong>secondary color data</strong> (RGB1),
    ///   both generated by the Pixel Shader, for use in <strong>dual-source color blending</strong>.
    ///   <br/>
    ///   The pre-blend operation <strong>inverts the data</strong>. Each component of both of the colors is inverted (<c>1 - RGB</c>) before blending.
    ///   This can create interesting effects like color negation.
    /// </summary>
    InverseSecondarySourceColor = 17,

    /// <summary>
    ///   The data source is <strong>primary alpha data</strong> (A0) and <strong>secondary alpha data</strong> (A1),
    ///   both generated by the Pixel Shader, for use in <strong>dual-source color blending</strong>.
    ///   <br/>
    ///   No pre-blend operation. The alpha value is directly used for blending.
    /// </summary>
    SecondarySourceAlpha = 18,

    /// <summary>
    ///   The data source is <strong>primary alpha data</strong> (A0) and <strong>secondary alpha data</strong> (A1),
    ///   both generated by the Pixel Shader, for use in <strong>dual-source color blending</strong>.
    ///   <br/>
    ///   The pre-blend operation <strong>inverts the data</strong>. Both alpha values are inverted (<c>1 - A</c>) before blending.
    /// </summary>
    InverseSecondarySourceAlpha = 19
}
