// Copyright (c) Xenko contributors (https://xenko.com) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.
shader ComputeColorPinLight : ComputeColor
{
    compose ComputeColor color1;
    compose ComputeColor color2;

    override float4 Compute()
    {
        float4 backColor = color1.Compute();
        float4 frontColor = color2.Compute();

        // From http://msdn.microsoft.com/en-us/library/windows/desktop/hh706313(v=vs.85).aspx
        //
        //  b = background, f = foreground, c = color, a = alpha, r = result color obtained with the specific blend formula
        //
        //  PinLight:
        //      if fc <= 0.5 : r = min(bc, 2fc)
        //      if fc  > 0.5 : r = max(bc, (2fc - 1))
        //
        //      color = (fa * ba) * r + (fa * (1-ba)) * fc + ((1-fa) * ba) * bc
        //      alpha = fa * (1-ba) + ba

        float3 r = lerp(max(backColor.rgb, (2.0f * frontColor.rgb - 1.0f)),
                        min(backColor.rgb,  2.0f * frontColor.rgb),
                        step(frontColor.rgb, 0.5f)); 

        return BlendUtils.BasicBlend(backColor, frontColor, r);
    }
};
