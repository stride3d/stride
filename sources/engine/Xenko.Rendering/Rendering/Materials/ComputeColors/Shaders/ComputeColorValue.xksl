// Copyright (c) Xenko contributors (https://xenko.com) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.
shader ComputeColorValue : ComputeColor
{
    compose ComputeColor color1;
    compose ComputeColor color2;

    override float4 Compute()
    {
        float4 backColor = color1.Compute();
        float4 frontColor = color2.Compute();

        // From http://msdn.microsoft.com/en-us/library/windows/desktop/hh706313(v=vs.85).aspx
        //
        //  b = background, f = foreground, c = color, a = alpha, r = result color obtained with the specific blend formula
        //
        //  Value :
        //      if sat(bc) == 0 : color = val(bc), val(bc), val(bc)
        //      if sat(bc) != 0 : color = rgb(hue(bc), sat(bc), val(fc))
        //
        //      alpha = fa * (1-ba) + ba

        float3 color;

        if(HSVUtils.GetSaturation(backColor.rgb) == 0.0f)
            color = float3(HSVUtils.GetValue(backColor.rgb));
        else
            color = HSVUtils.ToRGB(float3(HSVUtils.GetHue(backColor.rgb), HSVUtils.GetSaturation(backColor.rgb), HSVUtils.GetValue(frontColor.rgb)));

        return float4(color, BlendUtils.BasicAlphaBlend(backColor.a, frontColor.a));
    }
};
