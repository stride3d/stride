// Copyright (c) Xenko contributors (https://xenko.com) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.
shader ComputeColorDivide : ComputeColor
{
    compose ComputeColor color1;
    compose ComputeColor color2;

    override float4 Compute()
    {
        float4 backColor = color1.Compute();
        float4 frontColor = color2.Compute();

        // From http://msdn.microsoft.com/en-us/library/windows/desktop/hh706313(v=vs.85).aspx
        //
        //  b = background, f = foreground, c = color, a = alpha, r = result color obtained with the specific blend formula
        //
        //    Divide:
        //        if (fc == 0 && bc == 0) : r = 0
        //        if (fc == 0 && bc != 0) : r = 1
        //        if (fc != 0) : r = bc / fc
        //
        //        color = r
        //        alpha = fa * (1-ba) + ba

        float3 interColor = BlendUtils.ColorDivide(backColor.rgb, frontColor.rgb);

        return float4(interColor,
                      BlendUtils.BasicAlphaBlend(backColor.a,frontColor.a));
    }
};

