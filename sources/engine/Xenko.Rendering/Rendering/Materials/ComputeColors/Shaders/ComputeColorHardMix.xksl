// Copyright (c) Xenko contributors (https://xenko.com) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.
shader ComputeColorHardMix : ComputeColor
{
    compose ComputeColor color1;
    compose ComputeColor color2;

    override float4 Compute()
    {
        float4 backColor = color1.Compute();
        float4 frontColor = color2.Compute();

        // From http://msdn.microsoft.com/en-us/library/windows/desktop/hh706313(v=vs.85).aspx
        //
        //  b = background, f = foreground, c = color, a = alpha, r = result color obtained with the specific blend formula
        //
        //  HardMix:
        //      if (bc + fc) <= 1 : r = 0     (in 3DsMax, the case (bc + fc == 1) always return 0)
        //      if (bc + fc)  > 1 : r = 1
        //
        //      color = (fa * ba) * r + (fa * (1-ba)) * fc + ((1-fa) * ba) * bc
        //      alpha = fa * (1-ba) + ba

        float3 interColor = 1.0f - step(backColor.rbg + frontColor.rgb, 1.0f);

        return BlendUtils.BasicBlend(backColor, frontColor, interColor);
    }
};
