// Copyright (c) .NET Foundation and Contributors (https://dotnetfoundation.org/ & https://stride3d.net) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.
using Stride.Rendering.Data;
using Stride.Rendering.Materials;

namespace Stride.Rendering
{
    /// <summary>
    /// Base effect
    /// </summary>
    partial effect StrideEffectBase
    {
        using params MaterialKeys;
        using params StrideEffectBaseKeys;

        // -----------------------------------------------
        // Base shaders
        // -----------------------------------------------
        mixin ShaderBase;
        mixin ShadingBase;

        // -----------------------------------------------
        // Mix material per Vertex Shader
        // -----------------------------------------------
        var extensionPreVertexStageSurfaceShaders = MaterialKeys.VertexStageSurfaceShaders;
        if (extensionPreVertexStageSurfaceShaders != null)
        {
            // Must come before TransformationBase as this is responsible to modify the vertex input stream
            mixin MaterialSurfaceVertexStageCompositor;  
            mixin compose materialVertexStage = (extensionPreVertexStageSurfaceShaders);
            mixin compose streamInitializerVertexStage = MaterialKeys.VertexStageStreamInitializer;
        }

        // -----------------------------------------------
        // Transform vertex stream
        // -----------------------------------------------
        // Come after material surface per vertex
        mixin TransformationBase;
        mixin NormalStream;

        var extensionTessellationShader = MaterialKeys.TessellationShader;

        if (StrideEffectBaseKeys.HasInstancing)
        {
            mixin macro StrideEffectBaseKeys.ModelTransformUsage;
            mixin TransformationWAndVPInstanced;

            // -----------------------------------------------
            // Performs normal mapping (in case of no-skinning, otherwise it is overloaded below)
            // -----------------------------------------------
            if (MaterialKeys.HasNormalMap)
            {
                if (extensionTessellationShader != null)
                {
                    mixin NormalFromNormalMappingTessellationInstanced;
                }
                else
                {
                    mixin NormalFromNormalMappingInstanced;
                }
            }
            else
            {
                mixin NormalFromMeshInstanced;
            }
        }
        else
        {
            mixin TransformationWAndVP;

            // -----------------------------------------------
            // Performs normal mapping (in case of no-skinning, otherwise it is overloaded below)
            // -----------------------------------------------
            if (MaterialKeys.HasNormalMap)
            {
                if (extensionTessellationShader != null)
                {
                    mixin NormalFromNormalMappingTessellation;
                }
                else
                {
                    mixin NormalFromNormalMapping;
                }
            }
            else
            {
                mixin NormalFromMesh;
            }
        }


        // -----------------------------------------------
        // Performs animation skinning (position, normal and tangent)
        // -----------------------------------------------
        if (MaterialKeys.HasSkinningPosition)
        {
            mixin macro MaterialKeys.SkinningMaxBones;

            if (StrideEffectBaseKeys.HasInstancing)
            {
                mixin TransformationSkinningInstanced;
            }
            else
            {
                mixin TransformationSkinning;
            }

            if (MaterialKeys.HasSkinningNormal)
            {
                mixin NormalMeshSkinning;
            }

            if (MaterialKeys.HasSkinningTangent)
            {
                mixin TangentMeshSkinning;
            }

            if (MaterialKeys.HasSkinningNormal)
            {
                if (MaterialKeys.HasNormalMap)
                {
                    if (extensionTessellationShader != null)
                    {
                        mixin NormalVSSkinningNormalMappingTessellation;
                    }
                    else
                    {
                        mixin NormalVSSkinningNormalMapping;
                    }
                }
                else
                {
                    mixin NormalVSSkinningFromMesh;
                }
            }
        }

        // --------------------------------------------
        // Mix material tessellation for Domain effect
        //---------------------------------------------
        if(extensionTessellationShader != null)
        {
            mixin (extensionTessellationShader);

            var extensionDomainStageSurfaceShaders = MaterialKeys.DomainStageSurfaceShaders;
            if(extensionDomainStageSurfaceShaders != null)
            {
                mixin MaterialSurfaceDomainStageCompositor;  
                mixin compose materialDomainStage = (extensionDomainStageSurfaceShaders);
                mixin compose streamInitializerDomainStage = MaterialKeys.DomainStageStreamInitializer;
            }
        }
        
        // -----------------------------------------------
        // Screen space velocity calculation
        // -----------------------------------------------
        var computeVelocityShader = StrideEffectBaseKeys.ComputeVelocityShader;
        if(computeVelocityShader != null)
        {
            mixin (computeVelocityShader);
        }

        // -----------------------------------------------
        // Mix Extension after vertex stage
        // -----------------------------------------------
        var extensionPostVertexStage = StrideEffectBaseKeys.ExtensionPostVertexStageShader;
        if (extensionPostVertexStage != null)
        {
            mixin (extensionPostVertexStage);
        }

        // -----------------------------------------------
        // MRT output definitions (color0 excluded)
        // -----------------------------------------------
        var targetExtensions = StrideEffectBaseKeys.RenderTargetExtensions;
        if (targetExtensions != null)
        {
            mixin (targetExtensions);
        }
   };
}
