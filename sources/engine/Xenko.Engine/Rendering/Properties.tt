// Copyright (c) Xenko contributors (https://xenko.com) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.

// AUTO-GENERATED, DO NOT EDIT!
#pragma warning disable SA1649 // File name must match first type name
#pragma warning disable SA1402 // File may only contain a single class

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# var nodeTypes = new[] { "ViewObject", "Object", "Render", "EffectObject", "View", "StaticObject" }; #>
namespace Xenko.Rendering
{
    public enum DataType
    {
<# foreach (var type in nodeTypes) { #>
        <#= type #>,
<# } #>
    }

<# foreach (var type in nodeTypes) { #>
    public struct <#=type#>PropertyData<T>
    {
        internal T[] Data;

        internal <#=type#>PropertyData(T[] data)
        {
            Data = data;
        }

        public ref T this[<#=type#>NodeReference index] => ref Data[index.Index];
    }

    public struct <#=type#>PropertyKey<T>
    {
        internal readonly int Index;

        internal <#=type#>PropertyKey(int index)
        {
            Index = index;
        }
    }

    public class <#=type#>PropertyDefinition<T>
    {
    }

    public partial struct <#=type#>NodeReference
    {
        public readonly int Index;

        /// <summary>
        /// Invalid slot.
        /// </summary>
        public static readonly <#=type#>NodeReference Invalid = new <#=type#>NodeReference(-1);

        public <#=type#>NodeReference(int index)
        {
            Index = index;
        }

        public static <#=type#>NodeReference operator +(<#=type#>NodeReference value, int offset)
        {
            return new <#=type#>NodeReference(value.Index + offset);
        }

        public static <#=type#>NodeReference operator *(<#=type#>NodeReference value, int multiplyFactor)
        {
            return new <#=type#>NodeReference(value.Index * multiplyFactor);
        }

        public static bool operator ==(<#=type#>NodeReference a, <#=type#>NodeReference b)
        {
            return a.Index == b.Index;
        }

        public override bool Equals(object other)
        {
            if (other is <#=type#>NodeReference)
            {
                <#=type#>NodeReference p = (<#=type#>NodeReference)other;
                return Index == p.Index;
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return Index;
        }

        public static bool operator !=(<#=type#>NodeReference a, <#=type#>NodeReference b)
        {
            return a.Index != b.Index;
        }
    }

    partial struct RenderDataHolder
    {
        public <#=type#>PropertyKey<T> Create<#=type#>Key<T>(<#=type#>PropertyDefinition<T> definition = null, int multiplier = 1)
        {
            if (definition != null)
            {
                int existingIndex;
                if (dataArraysByDefinition.TryGetValue(definition, out existingIndex))
                    return new <#=type#>PropertyKey<T>(existingIndex);

                dataArraysByDefinition.Add(definition, dataArrays.Count);
            }

            var dataArraysIndex = dataArrays.Count;
            dataArrays.Add(new DataArray(new DataArrayInfo<T>(DataType.<#=type#>, multiplier)));
            return new <#=type#>PropertyKey<T>(dataArraysIndex);
        }

        /// <summary>
        /// Get data from its key.
        /// </summary>
        public <#=type#>PropertyData<T> GetData<T>(<#=type#>PropertyKey<T> key)
        {
            return new <#=type#>PropertyData<T>((T[])dataArrays[key.Index].Array);
        }

        /// <summary>
        /// Change data multiplier (i.e. how many data entries per item there will be).
        /// </summary>
        public void ChangeDataMultiplier<T>(<#=type#>PropertyKey<T> key, int multiplier)
        {
            dataArrays[key.Index].Info.ChangeMutiplier(ref dataArrays.Items[key.Index].Array, multiplier);
        }
    }
<# } #>
}
