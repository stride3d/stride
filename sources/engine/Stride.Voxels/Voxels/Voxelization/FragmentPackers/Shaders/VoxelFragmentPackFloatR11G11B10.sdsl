// Copyright (c) .NET Foundation and Contributors (https://dotnetfoundation.org/ & https://stride3d.net) and Sean Boettger <sean@whypenguins.com>
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.
shader VoxelFragmentPackFloatR11G11B10 : VoxelFragmentPacker, DataPacking
{
    override void Skip(inout uint address, float unpacked){address += 1;}
    override void Skip(inout uint address, float2 unpacked){address += 1;}
    override void Skip(inout uint address, float3 unpacked){address += 1;}
    override void Skip(inout uint address, float4 unpacked){address += 2;}
    override void Write(RWBuffer<uint> fragmentsBuffer, inout uint address, float3 unpacked)
    {
        writer.Write_Internal(fragmentsBuffer, address, Float3ToR11G11B10(unpacked));
    }




    override void Read(RWBuffer<uint> fragmentsBuffer, inout uint address, out float3 unpacked)
    {
        unpacked.rgb = R11G11B10ToFloat3(fragmentsBuffer[address]);
        address++;
    }



    //Until partial packing is implemented (if ever), write some halfs when not writing exactly 3 values
    //Otherwise many bits are wasted
    //Keep layout consistent though (or things like InterlockedMax can give unexpected results)
    override void Write(RWBuffer<uint> fragmentsBuffer, inout uint address, float unpacked)
    {
        writer.Write_Internal(fragmentsBuffer, address, FloatToHalfFloat(unpacked.r));
    }
    override void Write(RWBuffer<uint> fragmentsBuffer, inout uint address, float2 unpacked)
    {
        writer.Write_Internal(fragmentsBuffer, address, PackFloat2ToHalfFloat2(unpacked.rg));
    }
    override void Write(RWBuffer<uint> fragmentsBuffer, inout uint address, float4 unpacked)
    {
        writer.Write_Internal(fragmentsBuffer, address, 
        uint2(
            Float3ToR11G11B10(unpacked.rgb),
            FloatToHalfFloat(unpacked.a)
        )
        );
    }




    override void Read(RWBuffer<uint> fragmentsBuffer, inout uint address, out float unpacked)
    {
        unpacked = HalfFloatToFloat(fragmentsBuffer[address]);
        address++;
    }
    override void Read(RWBuffer<uint> fragmentsBuffer, inout uint address, out float2 unpacked)
    {
        unpacked = UnpackHalfFloat2ToFloat2(fragmentsBuffer[address]);
        address++;
    }
    override void Read(RWBuffer<uint> fragmentsBuffer, inout uint address, out float4 unpacked)
    {
        unpacked.rgb = R11G11B10ToFloat3(fragmentsBuffer[address]);
        address++;
        unpacked.a = HalfFloatToFloat(fragmentsBuffer[address]);
        address++;
    }
};