// Copyright (c) .NET Foundation and Contributors (https://dotnetfoundation.org/ & https://stride3d.net) and Sean Boettger <sean@whypenguins.com>
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.
namespace Stride.Rendering.Voxels
{
    /// <summary>
    /// Voxelization, projects to axis of largest area and writes fragments to buffer
    /// </summary>
    shader VoxelizationMethodDominantAxis : VoxelizationMethod, Math, Transformation, ShaderBase, NormalStream, PositionStream4, VoxelPositionStream
    {
        centroid stream float3 centroidPositionWS;
        centroid stream float3 centroidNormalWS;
        override void PrepareFragment()
        {
            streams.PositionWS = float4(streams.centroidPositionWS,1);
            streams.normalWS = streams.centroidNormalWS;
        }
        override void PrepareVertex()
        {
            streams.centroidPositionWS = streams.PositionWS.xyz;
            streams.centroidNormalWS = streams.normalWS.xyz;
        }
        stream int dominantAxis;
        override void InitializeFromTriangle(triangle Input input[3])
        {
            float3 nor = abs(cross((input[1].ShadingPosition.xyz - input[0].ShadingPosition.xyz), (input[2].ShadingPosition.xyz - input[0].ShadingPosition.xyz)));
            streams.dominantAxis = nor.x > nor.y ? 0 : 1;
            streams.dominantAxis = nor.z > nor.y && nor.z > nor.x ? 2 : streams.dominantAxis;
        }
        void TransformPoint(inout float4 v1)
        {
            if (streams.dominantAxis == 0)
            {
                v1.xyz = float3(v1.yzx);
            }
            else if (streams.dominantAxis == 1)
            {
                v1.xyz = float3(v1.xzy);
            }
            v1.w = 1;
        }
        override void Append(inout TriangleStream<Output> triangleStream)
        {
            TransformPoint(streams.ShadingPosition);
            streams.ShadingPosition.z = streams.ShadingPosition.z * 0.5 + 0.5;
            triangleStream.Append(streams);
        }
    };
}
