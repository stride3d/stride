// Copyright (c) .NET Foundation and Contributors (https://dotnetfoundation.org/ & https://stride3d.net) and Sean Boettger <sean@whypenguins.com>
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.
namespace Stride.Rendering.Voxels
{
    shader Voxel2x2x2MipmapperHeuristic : Voxel2x2x2Mipmapper
    {
        override float4 Mipmap(float4 s000, float4 s100, float4 s110, float4 s101, float4 s011, float4 s010, float4 s001, float4 s111)
        {
            float filledSum = ceil(s000.a) + ceil(s100.a) + ceil(s110.a) + ceil(s101.a) + ceil(s011.a) + ceil(s010.a) + ceil(s001.a) + ceil(s111.a);
            float4 fragmentSum = (s000 + s100 + s110 + s101 + s011 + s010 + s001 + s111);
            fragmentSum.rgb /= max(filledSum, 4);
            fragmentSum.a /= 8;
            return fragmentSum;
            //Rather than divide by 8...
            //I figure that since the visible surface of the
            //emitter is a 2D projection, it should decrease
            //by 2 dimensions rather than 3 (i.e divide by 4 rather than 8).

            //This makes the lighting fall-off much more realistic,
            //but I find the opacity coverage too strong then.
            //so keep that dividing by 8.

            //Of course, then the brightness in areas with clusters of voxels
            //becomes too high, so instead divide by the number of filled voxels, minimum 4
        }
    };
}
