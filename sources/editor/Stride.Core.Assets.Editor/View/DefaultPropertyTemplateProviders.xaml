<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:sd="http://schemas.stride3d.net/xaml/presentation"
                    xmlns:view="clr-namespace:Stride.Core.Presentation.Quantum.View;assembly=Stride.Core.Presentation.Quantum"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:s="clr-namespace:System;assembly=mscorlib"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:math="clr-namespace:Stride.Core.Mathematics;assembly=Stride.Core.Mathematics"
                    xmlns:pvdr="clr-namespace:Stride.Core.Assets.Editor.View.TemplateProviders"
                    xmlns:cvt="clr-namespace:Stride.Core.Assets.Editor.View.ValueConverters"
                    xmlns:behaviors="clr-namespace:Stride.Core.Assets.Editor.View.Behaviors"
                    xmlns:io="clr-namespace:Stride.Core.IO;assembly=Stride.Core.Design"
                    xmlns:edvw="clr-namespace:Stride.Core.Assets.Editor.View"
                    xmlns:viewModel="clr-namespace:Stride.Core.Assets.Editor.ViewModel"
                    xmlns:adr="clr-namespace:Stride.Core.Presentation.Adorners;assembly=Stride.Core.Presentation"
                    xmlns:qvm="clr-namespace:Stride.Core.Presentation.Quantum.ViewModels;assembly=Stride.Core.Presentation.Quantum"
                    xmlns:assetCommands="clr-namespace:Stride.Core.Assets.Editor.Quantum.NodePresenters.Commands"
                    mc:Ignorable="d">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="CommonResources.xaml"/>
  </ResourceDictionary.MergedDictionaries>

  <Storyboard x:Key="HighlightBorderAdornerValidationErrorStoryboard">
    <DoubleAnimation From="0" To="1"
                     AutoReverse="True" RepeatBehavior="3x"
                     Storyboard.TargetProperty="(adr:HighlightBorderAdorner.BorderBrush).(Brush.Opacity)"
                     Duration="0:0:0.30" />
  </Storyboard>

  <Style x:Key="AddNewItemButtonStyle" BasedOn="{StaticResource ImageButtonStyle}" TargetType="Button">
    <Setter Property="Visibility" Value="{sd:MultiBinding {Binding HasCommand_AddNewItem}, {Binding HasCollection},
                                                            {Binding HasAssociatedData_ReadOnlyCollection, Converter={sd:InvertBool}},
                                                            {Binding HasAssociatedData_AbstractNodeMatchingEntries, Converter={sd:InvertBool}},
                                                            Converter={sd:MultiChained {sd:AndMultiConverter}, {sd:VisibleOrCollapsed}}, FallbackValue={sd:Collapsed}}"/>
    <Setter Property="Command" Value="{Binding AddNewItem}"/>
    <Setter Property="ToolTip" Value="{sd:Localize Add..., Context=ToolTip}"/>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Image Source="{StaticResource ImageAdd}" Width="16" Height="16" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="EnumComboBox" BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="ComboBox">
    <Setter Property="Margin" Value="2"/>
    <Setter Property="SelectedItem" Value="{Binding NodeValue}"/>
    <Setter Property="ItemsSource" Value="{Binding Type, Converter={sd:EnumValues}, Mode=OneWay}"/>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding Converter={sd:EnumToDisplayName}}"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="AbstractTypeSelectionComboBox" BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="ComboBox">
    <Setter Property="IsEditable" Value="False"/>
    <Setter Property="ToolTip" Value="{sd:Localize Replace..., Context=ToolTip}"/>
    <!-- Visible if: we have the command to create a new instance, we're not read-only, we not a collection -->
    <Setter Property="Visibility" Value="{sd:MultiBinding {Binding HasCommand_CreateNewInstance},
                                                            {Binding IsReadOnly, Converter={sd:InvertBool}},
                                                            {Binding HasCollection, Converter={sd:InvertBool}},
                                         Converter={sd:MultiChained {sd:AndMultiConverter}, {sd:VisibleOrCollapsed}}}"/>
    <Setter Property="BorderBrush" Value="{StaticResource NormalBorderBrush}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Tag" Value="{StaticResource ImageDropDown}"/>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock x:Name="TypeTextBlock"
                     Text="{Binding Converter={cvt:AbstractNodeEntryToDisplayName}}"
                     Foreground="{sd:MultiBinding {Binding}, {Binding DataContext.NodeValue, RelativeSource={RelativeSource AncestorType=ComboBox}},
                                 Converter={cvt:AbstractNodeEntryToBrush}, FallbackValue={StaticResource TextBrush}}"
                     FontWeight="{sd:MultiBinding {Binding}, {Binding DataContext.NodeValue, RelativeSource={RelativeSource AncestorType=ComboBox}},
                                 Converter={cvt:AbstractNodeEntryToFontWeight}, FallbackValue={x:Static FontWeights.Normal}}"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBox">
          <Grid>
            <ToggleButton x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      BorderBrush="{TemplateBinding BorderBrush}" ClickMode="Press" Tag="{TemplateBinding Tag}">
              <ToggleButton.Template>
                <ControlTemplate TargetType="ToggleButton">
                  <Border x:Name="Border" Width="16" Height="16" Margin="2,0" SnapsToDevicePixels="True" Background="Transparent" Focusable="false">
                    <Image Source="{TemplateBinding Tag}" Width="16" Height="16" Margin="-1"/>
                  </Border>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                      <Setter Property="Background" TargetName="Border" Value="{DynamicResource ToggleButtonHoverBackground}"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="True" >
                      <Setter Property="Background" TargetName="Border" Value="{DynamicResource ToggleButtonHoverBackground}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                      <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                      <Setter Property="Background" TargetName="Border" Value="{DynamicResource DisabledBorderBrush}"/>
                      <Setter Property="Opacity" TargetName="Border" Value="0.8"/>
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </ToggleButton.Template>
            </ToggleButton>
            <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
              <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                <Border x:Name="DropDownBorder" Background="{DynamicResource ControlBackgroundBrush}" CornerRadius="3,3,3,3" />
                <ScrollViewer Margin="1" Style="{DynamicResource NuclearScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True" Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="AddItemComboBox" BasedOn="{StaticResource AbstractTypeSelectionComboBox}" TargetType="ComboBox">
    <Setter Property="Width" Value="18"/>
    <Setter Property="Height" Value="16"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="Visibility" Value="{sd:MultiBinding {Binding HasCommand_AddNewItem}, {Binding HasCollection}, {Binding HasAssociatedData_AbstractNodeMatchingEntries},
                                                            Converter={sd:MultiChained {sd:AndMultiConverter}, {sd:VisibleOrCollapsed}}, FallbackValue={sd:Collapsed}}"/>
    <Setter Property="ToolTip" Value="{sd:Localize Add..., Context=ToolTip}" />
    <Setter Property="Tag" Value="{StaticResource ImageAdd}"/>
  </Style>

  <Style x:Key="RemoveItemButtonStyle" BasedOn="{StaticResource ImageButtonStyle}" TargetType="Button">
    <Setter Property="Visibility" Value="{sd:MultiBinding {Binding HasCommand_RemoveItem},
                                                            {Binding HasAssociatedData_ReadOnlyCollection, Converter={sd:InvertBool}},
                                          Converter={sd:MultiChained {sd:AndMultiConverter}, {sd:VisibleOrCollapsed}}}"/>
    <Setter Property="Command" Value="{Binding RemoveItem}"/>
    <Setter Property="ToolTip" Value="{sd:Localize Delete, Context=ToolTip}"/>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Image Source="{StaticResource ImageRemove}" Width="16" Height="16" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <DataTemplate x:Key="DifferentValuesWatermarkTemplate">
    <TextBlock Text="{Binding Mode=OneTime}" IsHitTestVisible="False"/>
  </DataTemplate>

  <DataTemplate x:Key="DefaultPropertyHeaderTemplate" DataType="qvm:NodeViewModel">
    <Grid x:Name="Grid" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Visibility="{Binding IsVisible, Converter={sd:VisibleOrCollapsed}}">
      <Grid.ColumnDefinitions>
        <!-- Parameters of the SumNum converters used here must be the total width of fixed columns + MinWidths of sizable columns: 8+5+64=77 -->
        <ColumnDefinition Width="8"/>
        <ColumnDefinition Width="{Binding NameColumnSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sd:PropertyView}}, Mode=TwoWay}"
                          MaxWidth="{Binding ActualWidth, ElementName=Grid, Converter={sd:SumNum}, ConverterParameter={sd:Double -77}}" MinWidth="64"/>
        <ColumnDefinition Width="5"/>
        <ColumnDefinition Width="*" MaxWidth="{Binding ActualWidth, ElementName=Grid, Converter={sd:SumNum}, ConverterParameter={sd:Double -77}}" MinWidth="64"/>
      </Grid.ColumnDefinitions>
      <Border Width="8" Margin="4,4,0,4" Visibility="{Binding ReorderCollectionItem, Converter={sd:Chained {sd:ObjectToBool}, {sd:VisibleOrCollapsed}}, FallbackValue={sd:Collapsed}}" Background="Transparent">
        <Rectangle Focusable="False" Cursor="SizeAll">
          <Rectangle.Fill>
            <DrawingBrush Viewport="0,0,8,4" TileMode="Tile" ViewportUnits="Absolute">
              <DrawingBrush.Drawing>
                <DrawingGroup>
                  <GeometryDrawing Brush="Transparent">
                    <GeometryDrawing.Geometry>
                      <RectangleGeometry Rect="0,0,8,4"/>
                    </GeometryDrawing.Geometry>
                  </GeometryDrawing>
                  <GeometryDrawing Brush="#202020">
                    <GeometryDrawing.Geometry>
                      <GeometryGroup>
                        <RectangleGeometry Rect="1,1,2,2"/>
                        <RectangleGeometry Rect="4,1,2,2"/>
                      </GeometryGroup>
                    </GeometryDrawing.Geometry>
                  </GeometryDrawing>
                </DrawingGroup>
              </DrawingBrush.Drawing>
            </DrawingBrush>
          </Rectangle.Fill>
        </Rectangle>
        <i:Interaction.Behaviors>
          <behaviors:PropertyViewItemDragDropBehavior CanDrop="False" CanInsert="False" DragVisualTemplate="{StaticResource DragVisualTemplate}"/>
        </i:Interaction.Behaviors>
      </Border>
      <Border x:Name="PART_Name" Grid.Column="1" MinHeight="23" Margin="2" VerticalAlignment="Top" HorizontalAlignment="Stretch" ToolTip="{Binding Documentation}">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" MinWidth="{Binding Offset, RelativeSource={RelativeSource AncestorType=sd:PropertyViewItem}, Mode=OneWay}"/>
            <ColumnDefinition Width="16"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>
          <ToggleButton Grid.Column="1" Template="{StaticResource TreeExpanderToggleButton}" Width="12" Height="12" HorizontalAlignment="Left"
                                        IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType=sd:PropertyViewItem}}"
                                        Visibility="{Binding VisibleChildrenCount, Converter={sd:Chained {sd:NumericToBool}, {sd:VisibleOrCollapsed}}}"/>
          <TextBlock x:Name="PropertyNameBlock" Grid.Column="2" Text="{Binding DisplayName}" HorizontalAlignment="Stretch" VerticalAlignment="Center"
                     TextTrimming="CharacterEllipsis" Visibility="{Binding HasCommand_RenameStringKey, Converter={sd:Chained {sd:InvertBool}, {sd:VisibleOrCollapsed}}}"/>
          <sd:TextBox x:Name="PropertyNameBox" Grid.Column="2" HorizontalAlignment="Stretch" VerticalAlignment="Center"
                        CancelOnLostFocus="True" SelectAllOnFocus="True" sd:Trimming.TextTrimming="WordEllipsis"
                        Text="{Binding DisplayName, Mode=OneWay}"
                        ValidateCommand="{Binding RenameStringKey}"
                        ValidateCommandParameter="{Binding Text, RelativeSource={RelativeSource Self}}"
                        Visibility="{Binding HasCommand_RenameStringKey, Converter={sd:VisibleOrCollapsed}}"
                        ContextMenu="{Binding ContextMenu, RelativeSource={RelativeSource AncestorType={x:Type sd:PropertyViewItem}}}">
            <sd:TextBox.Style>
              <Style TargetType="{x:Type sd:TextBox}" BasedOn="{StaticResource {x:Type sd:TextBox}}">
                <Style.Triggers>
                  <Trigger Property="IsKeyboardFocused" Value="False">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                  </Trigger>
                  <Trigger Property="IsReadOnly" Value="True">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                  </Trigger>
                </Style.Triggers>
              </Style>
            </sd:TextBox.Style>
          </sd:TextBox>
          <CheckBox Grid.Column="3" Margin="2,0" VerticalAlignment="Center" HorizontalAlignment="Left"
                    IsThreeState="{Binding Enabled.NodeValue, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static qvm:NodeViewModel.DifferentValues}}"
                    IsChecked="{Binding Enabled.NodeValue, Converter={view:DifferentValueToParam}, ConverterParameter={x:Null}}"
                    Visibility="{Binding HasChild_Enabled, Converter={sd:VisibleOrCollapsed}}"/>
        </Grid>
      </Border>
      <GridSplitter Grid.Column="2" ResizeBehavior="PreviousAndNext" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent"/>
      <Border x:Name="PART_Editor" Grid.Column="3" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="0,0,5,0">
        <ContentControl x:Name="PART_ValueContainer" Content="{Binding}" ContentTemplateSelector="{x:Static edvw:PropertyViewHelper.EditorProviders}"
                        Focusable="False" VerticalAlignment="Center" d:DataContext="{d:DesignInstance qvm:NodeViewModel}"/>
      </Border>
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{sd:MultiBinding {Binding IsOverridden},
                                               {Binding Enabled.IsOverridden},
                                               {Binding InlinedProperty.IsOverridden},
                                               Converter={sd:OrMultiConverter}}" Value="{sd:True}">
        <Setter TargetName="PropertyNameBlock" Property="FontWeight" Value="Bold"/>
        <Setter TargetName="PropertyNameBox" Property="FontWeight" Value="Bold"/>
      </DataTrigger>
      <DataTrigger Binding="{sd:MultiBinding {Binding HasBase, FallbackValue={sd:False}},
                                               {Binding IsInherited, FallbackValue={sd:True}},
                                               {Binding Enabled.IsInherited, FallbackValue={sd:True}},
                                               {Binding InlinedProperty.IsInherited, FallbackValue={sd:True}},
                                               Converter={sd:AndMultiConverter}}" Value="{sd:True}">
        <Setter TargetName="PropertyNameBlock" Property="Opacity" Value="0.5"/>
        <Setter TargetName="PropertyNameBox" Property="Opacity" Value="0.5"/>
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>

  <DataTemplate x:Key="HeaderReadOnlyProperty" DataType="qvm:NodeViewModel">
    <Grid Visibility="{Binding IsVisible, Converter={sd:VisibleOrCollapsed}}" edvw:PropertyViewHelper.Increment="0"
              Margin="{Binding Offset, Converter={sd:NumericToThickness}, ConverterParameter={sd:Thickness 1,0,0,0},
                               RelativeSource={RelativeSource AncestorType=sd:PropertyViewItem}, Mode=OneWay}" x:Name="Grid">
      <Border x:Name="PART_Name" MinHeight="26" Margin="6" Background="{StaticResource EmphasisColorBrush}"
                    VerticalAlignment="Stretch" HorizontalAlignment="Stretch" ToolTip="{Binding Documentation}"/>
      <DockPanel Margin="10,8" x:Name="HeaderDockPanel">
        <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" VerticalAlignment="Center">
          <Button Style="{StaticResource RemoveItemButtonStyle}"/>
          <Button Style="{StaticResource AddNewItemButtonStyle}"/>
          <ComboBox DockPanel.Dock="Right" x:Name="InstanceTypeSelectionComboBox" Style="{StaticResource AddItemComboBox}" ItemsSource="{Binding AbstractNodeMatchingEntries}">
            <i:Interaction.Behaviors>
              <behaviors:OnComboBoxClosedWithSelectionBehavior Command="{Binding AddNewItem}" CommandParameter="{Binding SelectedItem, ElementName=InstanceTypeSelectionComboBox}"/>
            </i:Interaction.Behaviors>
          </ComboBox>
        </StackPanel>
        <ToggleButton DockPanel.Dock="Left" Template="{StaticResource PropertyGridHeaderExpanderToggleButton}" Width="16" Height="16"
                                    IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType=sd:PropertyViewItem}}"
                                    Visibility="{Binding VisibleChildrenCount, Converter={sd:Chained {sd:NumericToBool}, {sd:VisibleOrCollapsed}}}"/>
        <StackPanel Orientation="Horizontal" Margin="8,0,0,0">
          <CheckBox Margin="4,0" VerticalAlignment="Center"
                    IsThreeState="{Binding Enabled.NodeValue, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static qvm:NodeViewModel.DifferentValues}}"
                    IsChecked="{Binding Enabled.NodeValue, Converter={view:DifferentValueToParam}, ConverterParameter={x:Null}}"
                    Visibility="{Binding HasChild_Enabled, Converter={sd:VisibleOrCollapsed}}"/>
          <Image Source="{Binding NodeValue, Converter={sd:Chained {sd:ObjectToType}, {cvt:TypeToResource}}}" MaxWidth="16" MaxHeight="16"
                            RenderOptions.BitmapScalingMode="NearestNeighbor" Margin="0,0,4,0"/>
          <TextBlock x:Name="HeaderTextBlock" FontSize="16" TextTrimming="CharacterEllipsis"
                     Text="{Binding DisplayName, Mode=OneWay}" HorizontalAlignment="Left" VerticalAlignment="Center"
                     Foreground="{StaticResource SelectedTextBrush}"/>
        </StackPanel>
      </DockPanel>
      <i:Interaction.Behaviors>
        <behaviors:PropertyViewItemDragDropBehavior CanDrop="False" CanInsert="False" DragVisualTemplate="{StaticResource DragVisualTemplate}"/>
      </i:Interaction.Behaviors>
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{sd:MultiBinding {Binding IsOverridden},
                                               {Binding Enabled.IsOverridden},
                                               {Binding InlinedProperty.IsOverridden},
                                               Converter={sd:OrMultiConverter}}" Value="{sd:True}">
        <Setter TargetName="HeaderTextBlock" Property="FontWeight" Value="Bold"/>
      </DataTrigger>
      <DataTrigger Binding="{sd:MultiBinding {Binding HasBase, FallbackValue={sd:False}},
                                               {Binding IsInherited, FallbackValue={sd:True}},
                                               {Binding Enabled.IsInherited, FallbackValue={sd:True}},
                                               {Binding InlinedProperty.IsInherited, FallbackValue={sd:True}},
                                               Converter={sd:AndMultiConverter}}" Value="{sd:True}">
        <Setter TargetName="HeaderTextBlock" Property="Opacity" Value="0.5"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
        <Setter TargetName="HeaderTextBlock" Property="Text" Value="{sd:Localize (Different values)}"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding Level, Converter={sd:IsEqual}, ConverterParameter=2}" Value="True">
        <Setter TargetName="PART_Name" Property="Opacity" Value="0.6"/>
        <Setter TargetName="HeaderTextBlock" Property="FontSize" Value="14"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding Level, Converter={sd:IsGreater}, ConverterParameter=2}" Value="True">
        <Setter TargetName="PART_Name" Property="Opacity" Value="0.5"/>
        <Setter TargetName="HeaderTextBlock" Property="FontSize" Value="12"/>
        <Setter TargetName="HeaderDockPanel" Property="Margin" Value="10,4"/>
        <Setter TargetName="Grid" Property="Margin" Value="15,0,0,0"/>
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>

  <!-- Base provider for property footer: nothing inside! -->
  <sd:DefaultTemplateProvider x:Key="DefaultPropertyFooterTemplateProvider" edvw:PropertyViewHelper.TemplateCategory="PropertyFooter" OverrideRule="None">
    <DataTemplate/>
  </sd:DefaultTemplateProvider>

  <!-- Base provider for properties: ToggleButton for expander, TextBlock for property name (respecting alignment), and a ContentControl for the actual property editor -->
  <sd:DefaultTemplateProvider x:Key="DefaultPropertyTemplateProvider" edvw:PropertyViewHelper.TemplateCategory="PropertyHeader" OverrideRule="None"
                                  Template="{StaticResource DefaultPropertyHeaderTemplate}">
  </sd:DefaultTemplateProvider>

  <pvdr:CategoryNodeTemplateProvider x:Key="CategoryNodeTemplateProvider" Template="{StaticResource HeaderReadOnlyProperty}"
                                                    edvw:PropertyViewHelper.TemplateCategory="PropertyHeader"/>

  <!-- Provider for abstract types: ComboBox that allows to select a type and create an instance of the selected type, visible if the current value is null -->
  <pvdr:AbstractTypeTemplateProvider x:Key="InlinedAbstractTypePropertyTemplateProvider" OverrideRule="Most" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <pvdr:AbstractTypeTemplateProvider.OverriddenProviderNames>
      <s:String>InlinedProperty</s:String>
    </pvdr:AbstractTypeTemplateProvider.OverriddenProviderNames>
    <DataTemplate DataType="qvm:NodeViewModel">
      <DockPanel>
        <ComboBox x:Name="InstanceTypeSelectionComboBox" DockPanel.Dock="Right" Style="{StaticResource AbstractTypeSelectionComboBox}"
                  ItemsSource="{Binding AbstractNodeMatchingEntries}"
                  DisplayMemberPath="DisplayValue"
                  Visibility="{sd:MultiBinding {Binding HasCommand_CreateNewInstance}, {Binding IsReadOnly, Converter={sd:InvertBool}},
                                                 Converter={sd:MultiChained {sd:AndMultiConverter}, {sd:VisibleOrCollapsed}}}">
          <i:Interaction.Behaviors>
            <behaviors:OnComboBoxClosedWithSelectionBehavior Command="{Binding CreateNewInstance}"
                                                             CommandParameter="{Binding SelectedItem, ElementName=InstanceTypeSelectionComboBox}"/>
          </i:Interaction.Behaviors>
        </ComboBox>
        <ContentControl x:Name="ContentControl" Content="{Binding}" ContentTemplateSelector="{x:Static edvw:PropertyViewHelper.EditorProviders}"/>
      </DockPanel>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue, Converter={sd:ObjectToBool}}" Value="False">
          <Setter Property="Opacity" Value="0.5" TargetName="ContentControl"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </pvdr:AbstractTypeTemplateProvider>

  <!-- Hide header of inlined properties but allow to display its children -->
  <pvdr:InlinedPropertyValueTemplateProvider x:Key="InlinedPropertyHeaderTemplateProvider" OverrideRule="Some" edvw:PropertyViewHelper.TemplateCategory="PropertyHeader">
    <DataTemplate>
      <Border edvw:PropertyViewHelper.Increment="0" edvw:PropertyViewHelper.IsExpanded="True"/>
    </DataTemplate>
  </pvdr:InlinedPropertyValueTemplateProvider>

  <!-- Hide footer of inlined properties but allow to display its children -->
  <pvdr:InlinedPropertyValueTemplateProvider x:Key="InlinedPropertyFooterTemplateProvider" OverrideRule="Some" edvw:PropertyViewHelper.TemplateCategory="PropertyFooter">
    <DataTemplate>
      <Border/>
    </DataTemplate>
  </pvdr:InlinedPropertyValueTemplateProvider>

  <pvdr:InlinedPropertyTemplateProvider x:Key="InlinedPropertyTemplateProvider" OverrideRule="Some" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate>
      <Grid>
        <!-- Fallback when the node has multiple values to display -->
        <TextBlock Margin="2,0" VerticalAlignment="Center" Text="{sd:Localize (Different values)}"
                   Visibility="{Binding NodeValue, Converter={sd:Chained {sd:IsEqualToParam}, {sd:VisibleOrCollapsed},
                               Parameter1={x:Static qvm:NodeViewModel.DifferentValues}}}"/>
        <!-- Fallback when the value does not have an inline property -->
        <ContentControl x:Name="ContentControl" Content="{sd:PriorityBinding {Binding InlinedProperty}, {Binding}}"
                        ContentTemplateSelector="{x:Static edvw:PropertyViewHelper.EditorProviders}"
                        Visibility="{Binding NodeValue, Converter={sd:Chained {sd:IsEqualToParam}, {sd:InvertBool}, {sd:VisibleOrCollapsed},
                                    Parameter1={x:Static qvm:NodeViewModel.DifferentValues}}}"/>
      </Grid>
    </DataTemplate>
  </pvdr:InlinedPropertyTemplateProvider>

  <!-- Provider for collection items: Button to remove an entry, then a ContentControl for the item itself -->
  <pvdr:ListItemTemplateProvider x:Key="CollectionItemPropertyTemplateProvider" OverrideRule="Most" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate>
      <DockPanel>
        <Button Style="{StaticResource RemoveItemButtonStyle}" DockPanel.Dock="Right"/>
        <ContentControl Content="{Binding}" ContentTemplateSelector="{x:Static edvw:PropertyViewHelper.EditorProviders}"/>
      </DockPanel>
    </DataTemplate>
  </pvdr:ListItemTemplateProvider>

  <!-- Provider for list: Button to add an entry, TextBlock to describe the collection -->
  <pvdr:ListTemplateProvider x:Key="ListPropertyTemplateProvider" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <DockPanel>
        <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" VerticalAlignment="Center">
          <Button Style="{StaticResource AddNewItemButtonStyle}"/>
          <ComboBox x:Name="InstanceTypeSelectionComboBox" Style="{StaticResource AddItemComboBox}" ItemsSource="{Binding AbstractNodeMatchingEntries}">
            <i:Interaction.Behaviors>
              <behaviors:OnComboBoxClosedWithSelectionBehavior Command="{Binding AddNewItem}" CommandParameter="{Binding SelectedItem, ElementName=InstanceTypeSelectionComboBox}"/>
            </i:Interaction.Behaviors>
          </ComboBox>
        </StackPanel>
        <TextBlock Margin="2">
          <Run Text="{sd:Localize List}"/> -
          <Run Text="{sd:Localize {}{0} item, Plural={}{0} items, Count={Binding Children.Count, Mode=OneWay}, IsStringFormat=True}"/>
        </TextBlock>
      </DockPanel>
    </DataTemplate>
  </pvdr:ListTemplateProvider>

  <!-- Provider for list: Button to add an entry, in the footer -->
  <pvdr:ListTemplateProvider x:Key="ListPropertyFooterTemplateProvider" edvw:PropertyViewHelper.TemplateCategory="PropertyFooter">
    <DataTemplate DataType="qvm:NodeViewModel">
      <Grid x:Name="Grid" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Background="{StaticResource BackgroundBrush}"
            Visibility="{sd:MultiBinding {Binding IsVisible}, {Binding HasCommand_AddNewItem}, {Binding HasCollection},
                                           {Binding VisibleChildrenCount, Converter={sd:IsGreater}, ConverterParameter={sd:Int 0}},
                                           Converter={sd:MultiChained {sd:AndMultiConverter}, {sd:VisibleOrCollapsed}}, FallbackValue={sd:Collapsed}}">
        <Grid.ColumnDefinitions>
          <!-- Parameters of the SumNum converters used here must be the total width of fixed columns + MinWidths of sizable columns: 8+5+64=77 -->
          <ColumnDefinition Width="8"/>
          <ColumnDefinition Width="{Binding NameColumnSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sd:PropertyView}}, Mode=TwoWay}"
                            MaxWidth="{Binding ActualWidth, ElementName=Grid, Converter={sd:SumNum}, ConverterParameter={sd:Double -77}}" MinWidth="64"/>
          <ColumnDefinition Width="5"/>
          <ColumnDefinition Width="*" MaxWidth="{Binding ActualWidth, ElementName=Grid, Converter={sd:SumNum}, ConverterParameter={sd:Double -77}}" MinWidth="64"/>
        </Grid.ColumnDefinitions>

        <Border Grid.Column="1" MinHeight="23" Margin="2">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" MinWidth="{Binding Offset, RelativeSource={RelativeSource AncestorType=sd:PropertyViewItem}, Mode=OneWay}"/>
              <ColumnDefinition Width="16"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <Grid Grid.Column="2" Margin="0,2,5,2" VerticalAlignment="Center">
              <DockPanel>
                <!-- Concrete type -->
                <Button DockPanel.Dock="Right" Style="{StaticResource AddNewItemButtonStyle}"/>
                <!-- Abstract type -->
                <ComboBox DockPanel.Dock="Right" x:Name="InstanceTypeSelectionComboBox" Style="{StaticResource AddItemComboBox}"
                          ItemsSource="{Binding AbstractNodeMatchingEntries}" Margin="2,0">
                  <i:Interaction.Behaviors>
                    <behaviors:OnComboBoxClosedWithSelectionBehavior Command="{Binding AddNewItem}" CommandParameter="{Binding SelectedItem, ElementName=InstanceTypeSelectionComboBox}"/>
                  </i:Interaction.Behaviors>
                </ComboBox>
                <TextBlock Text="{Binding DisplayName, StringFormat={sd:Localize Add to {0}}}" TextTrimming="CharacterEllipsis" FontStyle="Italic"/>
              </DockPanel>
            </Grid>
          </Grid>
        </Border>
        <GridSplitter Grid.Column="2" ResizeBehavior="PreviousAndNext" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent"/>
      </Grid>
    </DataTemplate>
  </pvdr:ListTemplateProvider>

  <!-- Provider for dictionary: Button to add an entry, TextBlock to describe the collection -->
  <pvdr:DictionaryTemplateProvider x:Key="DictionaryTemplateProvider" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <DockPanel>
        <Button Style="{StaticResource ImageButtonStyle}" DockPanel.Dock="Right" Command="{Binding AddPrimitiveKey}"
                Visibility="{sd:MultiBinding {Binding HasCommand_AddPrimitiveKey}, {Binding HasAssociatedData_ReadOnlyCollection, Converter={sd:InvertBool}},
                             Converter={sd:MultiChained {sd:AndMultiConverter}, {sd:VisibleOrCollapsed}}, FallbackValue={sd:Collapsed}}"
                    ToolTip="{sd:Localize Add a new entry to the dictionary, Context=ToolTip}">
          <Image Source="{StaticResource ImageAdd}" Width="16" Height="16" Margin="-1"/>
        </Button>
        <TextBlock Margin="2">
                    <Run Text="{sd:Localize Dictionary}"/> -
                    <Run Text="{sd:Localize {}{0} item, Plural={}{0} items, Count={Binding Children.Count, Mode=OneWay}, IsStringFormat=True}"/>
        </TextBlock>
      </DockPanel>
    </DataTemplate>
  </pvdr:DictionaryTemplateProvider>

  <!-- Provider for dictionary with a string key: Button to add an entry, TextBlock to describe the collection -->
  <pvdr:DictionaryStringKeyTemplateProvider x:Key="DictionaryStringKeyTemplateProvider" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <pvdr:DictionaryStringKeyTemplateProvider.OverriddenProviderNames>
      <s:String>Dictionary</s:String>
    </pvdr:DictionaryStringKeyTemplateProvider.OverriddenProviderNames>
    <DataTemplate DataType="qvm:NodeViewModel">
      <DockPanel>
        <ComboBox DockPanel.Dock="Right" Margin="2,0"
                  Visibility="{sd:MultiBinding {Binding HasCommand_AddPrimitiveKey}, {Binding HasAssociatedData_ReadOnlyCollection, Converter={sd:InvertBool}},
                                                 Converter={sd:MultiChained {sd:AndMultiConverter}, {sd:VisibleOrCollapsed}}, FallbackValue={sd:Collapsed}}">
          <ComboBox.Template>
            <ControlTemplate TargetType="{x:Type ComboBox}">
              <Grid x:Name="grid">
                <ToggleButton x:Name="ToggleButton" Width="16" Height="16" Background="Transparent"
                              Focusable="false" ClickMode="Press"
                              ToolTip="{sd:Localize Add a new entry to the dictionary, Context=ToolTip}" SnapsToDevicePixels="True"
                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                  <Image Source="{StaticResource ImageAdd}" Width="16" Height="16" Margin="-1"/>
                </ToggleButton>
                <Popup x:Name="Popup" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Left" AllowsTransparency="True"
                       VerticalOffset="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                       HorizontalOffset="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                       PlacementTarget="{Binding ElementName=ToggleButton}" PopupAnimation="Slide">
                  <DockPanel MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True"
                             Background="{DynamicResource ControlBackgroundBrush}" Margin="10">
                    <TextBlock DockPanel.Dock="Left" Margin="8,0,0,0" VerticalAlignment="Center"
                               Text="{sd:Localize Key name:}"/>
                    <sd:TextBox sd:FocusManager.IsFocused="{Binding IsOpen, ElementName=Popup}" CancelOnLostFocus="True"
                                  Text="{sd:Localize New key}" Margin="8" SelectAllOnFocus="True" Width="160"
                                  ValidateCommand="{Binding AddPrimitiveKey}" x:Name="TextBox"
                                  ValidateCommandParameter="{Binding Text, RelativeSource={RelativeSource Self}}"/>
                  </DockPanel>
                </Popup>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                  <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                  <Setter Property="Opacity" TargetName="grid" Value="0.5" />
                </Trigger>
                <!-- This makes sure we can validate the textbox again even if the text is not changed -->
                <Trigger Property="IsOpen" SourceName="Popup" Value="False">
                  <Setter Property="Text" TargetName="TextBox" Value="" />
                </Trigger>
                <Trigger Property="IsOpen" SourceName="Popup" Value="True">
                  <Setter Property="Text" TargetName="TextBox" Value="{sd:Localize New key}" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </ComboBox.Template>
        </ComboBox>
        <TextBlock Margin="2" DockPanel.Dock="Left">
          <Run Text="{sd:Localize Dictionary}"/> -
          <Run Text="{sd:Localize {}{0} item, Plural={}{0} items, Count={Binding Children.Count, Mode=OneWay}, IsStringFormat=True}"/>
        </TextBlock>
      </DockPanel>
    </DataTemplate>
  </pvdr:DictionaryStringKeyTemplateProvider>

  <!-- Provider for boolean editor -->
  <view:TypeMatchTemplateProvider x:Key="BoolPropertyTemplateProvider" Type="{x:Type s:Boolean}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <CheckBox x:Name="CheckBox" Margin="2" HorizontalAlignment="Left"
                IsThreeState="{Binding NodeValue, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static qvm:NodeViewModel.DifferentValues}}"
                IsChecked="{Binding NodeValue, Converter={view:DifferentValueToParam}, ConverterParameter={x:Null}}"/>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for char editor -->
  <view:TypeMatchTemplateProvider x:Key="CharPropertyTemplateProvider" Type="{x:Type s:Char}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="3*"/>
        </Grid.ColumnDefinitions>
        <TextBox Grid.Column="0" Margin="2" Width="40" TextAlignment="Center"
                 Text="{Binding NodeValue, Converter={sd:CharToString}}"
                 ToolTip="{sd:Localize Character, Context=ToolTIp}">
          <i:Interaction.Behaviors>
            <sd:CharInputBehavior/>
          </i:Interaction.Behaviors>
        </TextBox>
        <sd:NumericTextBox x:Name="TextBox" TextAlignment="Center" Grid.Column="1" Margin="2" SelectAllOnFocus="True"
                             Value="{Binding NodeValue, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:CharToUnicode}}}"
                             SmallChange="1" LargeChange="10" DecimalPlaces="0" Minimum="0" ToolTip="{sd:Localize Unicode value, Context=ToolTip}"
                             WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}"
                             DisplayUpDownButtons="False">
          <i:Interaction.Behaviors>
            <!--<sd:NumericTextBoxTransactionalRepeatButtonsBehavior UndoRedoService="{Binding Session.UndoRedoService}"/>-->
            <behaviors:TextBoxPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
          </i:Interaction.Behaviors>
        </sd:NumericTextBox>
      </Grid>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="TextBox" Property="WatermarkContent" Value="{sd:Localize (Different values)}"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Providers for color editors -->
  <DataTemplate x:Key="ColorEditorTemplate" DataType="qvm:NodeViewModel">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <ToggleButton Grid.Column="0" x:Name="PickerToggleButton" VerticalAlignment="Center" Margin="2" Width="22" Height="22" Background="Black">
        <ToggleButton.Template>
          <ControlTemplate TargetType="ToggleButton">
            <Rectangle VerticalAlignment="Center" Width="20" Height="20" Stroke="Black" StrokeThickness="1"
                       Fill="{Binding NodeValue, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ColorConverter}}, FallbackValue={x:Static Brushes.Black}}"/>
          </ControlTemplate>
        </ToggleButton.Template>
        <i:Interaction.Behaviors>
          <sd:ToggleButtonPopupBehavior/>
        </i:Interaction.Behaviors>
      </ToggleButton>
      <sd:TextBox x:Name="TextBox" Grid.Column="1" Margin="2" SelectAllOnFocus="True" VerticalAlignment="Center"
                    Text="{Binding NodeValue, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ColorConverter}}}"
                    WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}">
        <i:Interaction.Behaviors>
          <behaviors:TextBoxPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
        </i:Interaction.Behaviors>
      </sd:TextBox>
      <Popup Grid.Column="0" IsOpen="{Binding ElementName=PickerToggleButton, Path=IsChecked}" StaysOpen="False">
        <Grid Background="{StaticResource BackgroundBrush}" MinWidth="200" MinHeight="200" MaxWidth="400" MaxHeight="400">
          <TabControl>
            <TabItem Header="Color picker">
              <sd:ColorPicker Color="{Binding NodeValue, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ColorConverter}}, FallbackValue={x:Static math:Color4.Black}}"
                                ShowAlpha="{Binding Type, Mode=OneWay, Converter={sd:Chained {sd:IsEqualToParam}, {sd:InvertBool}, Parameter1={x:Type math:Color3}}}"/>
            </TabItem>
            <TabItem Header="Palette">
              <ListBox ItemsSource="{x:Static viewModel:ColorPaletteViewModel.Colors}" SelectedValuePath="Value"
                       SelectedValue="{Binding NodeValue, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ColorConverter}}}">
                <ListBox.ItemTemplate>
                  <DataTemplate>
                    <DockPanel>
                      <Rectangle DockPanel.Dock="Left" Stroke="Black" StrokeThickness="1" Width="28" Height="20" Margin="6,2"
                                 Fill="{Binding Value, Converter={sd:ColorConverter}}"/>
                      <TextBlock Text="{Binding Key}" VerticalAlignment="Center"/>
                    </DockPanel>
                  </DataTemplate>
                </ListBox.ItemTemplate>
              </ListBox>
            </TabItem>
          </TabControl>
        </Grid>
      </Popup>
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
        <Setter TargetName="TextBox" Property="WatermarkContent" Value="{sd:Localize (Different values)}"/>
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <view:TypeMatchTemplateProvider x:Key="ColorPropertyTemplateProvider" Type="{x:Type math:Color}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" Template="{StaticResource ColorEditorTemplate}"/>
  <view:TypeMatchTemplateProvider x:Key="Color3PropertyTemplateProvider" Type="{x:Type math:Color3}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" Template="{StaticResource ColorEditorTemplate}"/>
  <view:TypeMatchTemplateProvider x:Key="Color4PropertyTemplateProvider" Type="{x:Type math:Color4}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" Template="{StaticResource ColorEditorTemplate}"/>

  <!-- Providers for number with a range editors -->
  <pvdr:RangedValueTemplateProvider x:Key="RangedValueTemplateProvider" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" OverrideRule="Most">
    <DataTemplate DataType="qvm:NodeViewModel">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="3*"/>
          <ColumnDefinition Width="*" MinWidth="60"/>
        </Grid.ColumnDefinitions>
        <Slider Grid.Column="0" Height="22" VerticalAlignment="Center"
                Value="{Binding Value, ElementName=TextBox, Mode=TwoWay}"
                IsEnabled="{sd:MultiBinding {Binding Minimum}, {Binding Maximum}, Converter={sd:MultiChained {sd:AllEqualMultiConverter}, {sd:InvertBool}}, Mode=OneWay}"
                Minimum="{Binding Minimum, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                Maximum="{Binding Maximum, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                SmallChange="{Binding SmallStep, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                LargeChange="{Binding LargeStep, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}">
          <i:Interaction.Behaviors>
            <behaviors:ValidateTextBoxAfterSlidingBehavior TextBox="{Binding ElementName=TextBox}"/>
            <sd:ChangeCursorOnSliderThumbBehavior/>
          </i:Interaction.Behaviors>
        </Slider>
        <sd:NumericTextBox x:Name="TextBox" Grid.Column="1" SelectAllOnFocus="True" Margin="6,2,2,2"
                             Value="{Binding NodeValue, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                             Minimum="{Binding Minimum, FallbackValue={x:Static s:Double.MinValue}, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                             Maximum="{Binding Maximum, FallbackValue={x:Static s:Double.MaxValue}, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                             SmallChange="{Binding SmallStep, FallbackValue=1, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                             LargeChange="{Binding LargeStep, FallbackValue=10, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                             DecimalPlaces="{Binding DecimalPlaces, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}, FallbackValue=6}"
                             WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}"
                             DisplayUpDownButtons="False">
          <i:Interaction.Behaviors>
            <!--<sd:NumericTextBoxTransactionalRepeatButtonsBehavior UndoRedoService="{Binding Session.UndoRedoService}"/>-->
            <behaviors:TextBoxPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
          </i:Interaction.Behaviors>
        </sd:NumericTextBox>
      </Grid>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="TextBox" Property="WatermarkContent" Value="≠"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </pvdr:RangedValueTemplateProvider>

  <!-- Providers for floating-point number editors -->
  <DataTemplate x:Key="FloatEditorTemplate" DataType="qvm:NodeViewModel">
    <sd:NumericTextBox x:Name="TextBox" SelectAllOnFocus="True" Margin="2"
                         Value="{Binding NodeValue, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                         Minimum="{Binding Minimum, FallbackValue={x:Static s:Double.MinValue}, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                         Maximum="{Binding Maximum, FallbackValue={x:Static s:Double.MaxValue}, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                         SmallChange="{Binding SmallStep, FallbackValue=1, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                         LargeChange="{Binding LargeStep, FallbackValue=10, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                         DecimalPlaces="{Binding DecimalPlaces, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}, FallbackValue=6}"
                         WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}"
                         DisplayUpDownButtons="False">
      <i:Interaction.Behaviors>
        <!--<sd:NumericTextBoxTransactionalRepeatButtonsBehavior UndoRedoService="{Binding Session.UndoRedoService}"/>-->
        <behaviors:TextBoxPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
      </i:Interaction.Behaviors>
    </sd:NumericTextBox>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
        <Setter TargetName="TextBox" Property="WatermarkContent" Value="{sd:Localize (Different values)}"/>
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <view:TypeMatchTemplateProvider x:Key="FloatPropertyTemplateProvider" Type="{x:Type s:Single}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" Template="{StaticResource FloatEditorTemplate}"/>
  <view:TypeMatchTemplateProvider x:Key="DoublePropertyTemplateProvider" Type="{x:Type s:Double}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" Template="{StaticResource FloatEditorTemplate}"/>

  <!-- Providers for fixed-point number editors -->
  <DataTemplate x:Key="IntEditorTemplate" DataType="qvm:NodeViewModel">
    <sd:NumericTextBox x:Name="TextBox" SelectAllOnFocus="True" Margin="2"
                         Value="{Binding NodeValue, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                         Minimum="{Binding Minimum, FallbackValue={x:Static s:Double.MinValue}, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                         Maximum="{Binding Maximum, FallbackValue={x:Static s:Double.MaxValue}, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                         SmallChange="{Binding SmallStep, FallbackValue=1, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                         LargeChange="{Binding LargeStep, FallbackValue=10, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}}"
                         DecimalPlaces="0"
                         WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}"
                         DisplayUpDownButtons="False">
      <i:Interaction.Behaviors>
        <!--<sd:NumericTextBoxTransactionalRepeatButtonsBehavior UndoRedoService="{Binding Session.UndoRedoService}"/>-->
        <behaviors:TextBoxPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
      </i:Interaction.Behaviors>
    </sd:NumericTextBox>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
        <Setter TargetName="TextBox" Property="WatermarkContent" Value="{sd:Localize (Different values)}"/>
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>

  <view:TypeMatchTemplateProvider x:Key="Int8PropertyTemplateProvider" Type="{x:Type s:SByte}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" Template="{StaticResource IntEditorTemplate}"/>
  <view:TypeMatchTemplateProvider x:Key="UInt8PropertyTemplateProvider" Type="{x:Type s:Byte}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" Template="{StaticResource IntEditorTemplate}"/>
  <view:TypeMatchTemplateProvider x:Key="Int16PropertyTemplateProvider" Type="{x:Type s:Int16}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" Template="{StaticResource IntEditorTemplate}"/>
  <view:TypeMatchTemplateProvider x:Key="UInt16PropertyTemplateProvider" Type="{x:Type s:UInt16}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" Template="{StaticResource IntEditorTemplate}"/>
  <view:TypeMatchTemplateProvider x:Key="Int32PropertyTemplateProvider" Type="{x:Type s:Int32}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" Template="{StaticResource IntEditorTemplate}"/>
  <view:TypeMatchTemplateProvider x:Key="UInt32PropertyTemplateProvider" Type="{x:Type s:UInt32}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" Template="{StaticResource IntEditorTemplate}"/>
  <view:TypeMatchTemplateProvider x:Key="Int64PropertyTemplateProvider" Type="{x:Type s:Int64}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" Template="{StaticResource IntEditorTemplate}"/>
  <view:TypeMatchTemplateProvider x:Key="UInt64PropertyTemplateProvider" Type="{x:Type s:UInt64}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" Template="{StaticResource IntEditorTemplate}"/>

  <!-- Provider for time span editor -->
  <view:TypeMatchTemplateProvider x:Key="TimeSpanPropertyTemplateProvider" Type="{x:Type s:TimeSpan}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <!-- Note: timespan are displayed in seconds -->
      <sd:NumericTextBox x:Name="TextBox" SelectAllOnFocus="True" Margin="2"
                           Value="{Binding NodeValue, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:TimeSpanToDouble}}}"
                           Minimum="{Binding Minimum, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}, FallbackValue=0}"
                           Maximum="{Binding Maximum, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}, FallbackValue={x:Static s:Double.MaxValue}}"
                           SmallChange="{Binding SmallStep, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}, FallbackValue=0.1}"
                           LargeChange="{Binding LargeStep, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}, FallbackValue=1}"
                           DecimalPlaces="{Binding DecimalPlaces, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ToDouble}}, FallbackValue=3}"
                           WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}"
                           DisplayUpDownButtons="False">
        <i:Interaction.Behaviors>
          <!--<sd:NumericTextBoxTransactionalRepeatButtonsBehavior UndoRedoService="{Binding Session.UndoRedoService}"/>-->
          <behaviors:TextBoxPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
        </i:Interaction.Behaviors>
      </sd:NumericTextBox>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="TextBox" Property="WatermarkContent" Value="{sd:Localize (Different values)}"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for string editor -->
  <view:TypeMatchTemplateProvider x:Key="StringPropertyTemplateProvider" Type="{x:Type s:String}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <sd:TextBox x:Name="TextBox" Margin="2" SelectAllOnFocus="True"
                    Text="{Binding NodeValue, Converter={cvt:DifferentValuesToString}}"
                    WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}"/>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="TextBox" Property="WatermarkContent" Value="{sd:Localize (Different values)}"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for vector2 editor -->
  <view:TypeMatchTemplateProvider x:Key="Vector2PropertyTemplateProvider" Type="{x:Type math:Vector2}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <sd:Vector2Editor X="{Binding X.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                          Y="{Binding Y.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                          WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}" DecimalPlaces="3" x:Name="VectorEditor">
        <i:Interaction.Behaviors>
          <behaviors:TextBoxVectorPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
        </i:Interaction.Behaviors>
      </sd:Vector2Editor>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="VectorEditor" Property="WatermarkContent" Value="≠"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for vector3 editor -->
  <view:TypeMatchTemplateProvider x:Key="Vector3PropertyTemplateProvider" Type="{x:Type math:Vector3}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <sd:Vector3Editor X="{Binding X.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                          Y="{Binding Y.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                          Z="{Binding Z.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                          WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}" DecimalPlaces="3" x:Name="VectorEditor">
        <i:Interaction.Behaviors>
          <behaviors:TextBoxVectorPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
        </i:Interaction.Behaviors>
      </sd:Vector3Editor>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="VectorEditor" Property="WatermarkContent" Value="≠"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for vector4 editor -->
  <view:TypeMatchTemplateProvider x:Key="Vector4PropertyTemplateProvider" Type="{x:Type math:Vector4}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <sd:Vector4Editor X="{Binding X.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                          Y="{Binding Y.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                          Z="{Binding Z.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                          W="{Binding W.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                          WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}" DecimalPlaces="3" x:Name="VectorEditor">
        <i:Interaction.Behaviors>
          <behaviors:TextBoxVectorPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
        </i:Interaction.Behaviors>
      </sd:Vector4Editor>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="VectorEditor" Property="WatermarkContent" Value="≠"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for int2 editor -->
  <view:TypeMatchTemplateProvider x:Key="Int2PropertyTemplateProvider" Type="{x:Type math:Int2}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <sd:Int2Editor X="{Binding X.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                       Y="{Binding Y.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                       WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}" x:Name="VectorEditor">
        <i:Interaction.Behaviors>
          <behaviors:TextBoxVectorPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
        </i:Interaction.Behaviors>
      </sd:Int2Editor>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="VectorEditor" Property="WatermarkContent" Value="≠"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for int3 editor -->
  <view:TypeMatchTemplateProvider x:Key="Int3PropertyTemplateProvider" Type="{x:Type math:Int3}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <sd:Int3Editor X="{Binding X.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                       Y="{Binding Y.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                       Z="{Binding Z.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                       WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}" x:Name="VectorEditor">
        <i:Interaction.Behaviors>
          <behaviors:TextBoxVectorPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
        </i:Interaction.Behaviors>
      </sd:Int3Editor>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="VectorEditor" Property="WatermarkContent" Value="≠"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for int4 editor -->
  <view:TypeMatchTemplateProvider x:Key="Int4PropertyTemplateProvider" Type="{x:Type math:Int4}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <sd:Int4Editor X="{Binding X.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                       Y="{Binding Y.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                       Z="{Binding Z.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                       W="{Binding W.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                       WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}" x:Name="VectorEditor">
        <i:Interaction.Behaviors>
          <behaviors:TextBoxVectorPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
        </i:Interaction.Behaviors>
      </sd:Int4Editor>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="VectorEditor" Property="WatermarkContent" Value="≠"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for rectangleF editor -->
  <view:TypeMatchTemplateProvider x:Key="RectangleFPropertyTemplateProvider" Type="{x:Type math:RectangleF}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <sd:RectangleFEditor RectX="{Binding X.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                             RectY="{Binding Y.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                             RectWidth="{Binding Width.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                             RectHeight="{Binding Height.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                             WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}" DecimalPlaces="3" x:Name="VectorEditor"/>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="VectorEditor" Property="WatermarkContent" Value="≠"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for rectangle editor -->
  <view:TypeMatchTemplateProvider x:Key="RectanglePropertyTemplateProvider" Type="{x:Type math:Rectangle}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <sd:RectangleEditor RectX="{Binding X.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                            RectY="{Binding Y.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                            RectWidth="{Binding Width.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                            RectHeight="{Binding Height.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                            WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}" x:Name="VectorEditor"/>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="VectorEditor" Property="WatermarkContent" Value="≠"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for rotation editor -->
  <view:TypeMatchTemplateProvider x:Key="RotationPropertyTemplateProvider" Type="{x:Type math:Quaternion}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <sd:RotationEditor Value="{Binding NodeValue, Converter={cvt:DifferentValuesToNull}}"
                           WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}" DecimalPlaces="3" x:Name="VectorEditor"/>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="VectorEditor" Property="WatermarkContent" Value="≠"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for matrix editor -->
  <view:TypeMatchTemplateProvider x:Key="MatrixPropertyTemplateProvider" Type="{x:Type math:Matrix}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <sd:MatrixEditor M11="{Binding M11.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M12="{Binding M12.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M13="{Binding M13.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M14="{Binding M14.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M21="{Binding M21.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M22="{Binding M22.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M23="{Binding M23.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M24="{Binding M24.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M31="{Binding M31.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M32="{Binding M32.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M33="{Binding M33.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M34="{Binding M34.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M41="{Binding M41.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M42="{Binding M42.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M43="{Binding M43.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         M44="{Binding M44.NodeValue, Converter={cvt:DifferentValuesToNull}}"
                         WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}" DecimalPlaces="3" x:Name="VectorEditor"/>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="VectorEditor" Property="WatermarkContent" Value="≠"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for angleSingle editor -->
  <view:TypeMatchTemplateProvider x:Key="AnglePropertyTemplateProvider" Type="{x:Type math:AngleSingle}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <sd:NumericTextBox x:Name="TextBox" DecimalPlaces="3"
                           Value="{Binding NodeValue, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:AngleSingleToDegrees}}}"
                           ToolTip="{sd:Localize Angle in degrees, Context=ToolTip}"
                           WatermarkContent="≠" WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}"
                           DisplayUpDownButtons="False">
        <i:Interaction.Behaviors>
          <!--<sd:NumericTextBoxTransactionalRepeatButtonsBehavior UndoRedoService="{Binding Session.UndoRedoService}"/>-->
          <behaviors:TextBoxPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
        </i:Interaction.Behaviors>
      </sd:NumericTextBox>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="TextBox" Property="WatermarkContent" Value="{sd:Localize (Different values)}"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for UDirectory editor -->
  <view:TypeMatchTemplateProvider x:Key="UDirectoryPropertyTemplateProvider" Type="{x:Type io:UDirectory}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <DockPanel>
        <Button Style="{StaticResource ImageButtonStyle}" DockPanel.Dock="Right" Command="{Binding BrowseDirectory}"
                Visibility="{Binding HasCommand_BrowseDirectory, Converter={sd:VisibleOrCollapsed}}"
                ToolTip="{sd:Localize Browse directory, Context=ToolTip}">
          <Image Source="{StaticResource ImageBrowse}" Width="16" Height="16" Margin="-1"/>
        </Button>
        <sd:TextBox x:Name="TextBox" Margin="2" SelectAllOnFocus="True"
                      sd:Trimming.TextTrimming="WordEllipsis" sd:Trimming.TrimmingSource="Middle" sd:Trimming.WordSeparators="/\\"
                      Text="{Binding NodeValue, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:UDirectoryToString}}}"
                      WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}">
          <i:Interaction.Behaviors>
            <behaviors:ReferenceHostDragDropBehavior UsePreviewEvents="True" DisplayDropAdorner="ExternalOnly"/>
          </i:Interaction.Behaviors>
        </sd:TextBox>
      </DockPanel>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="TextBox" Property="WatermarkContent" Value="{sd:Localize (Different values)}"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for UFile editor -->
  <view:TypeMatchTemplateProvider x:Key="UFilePropertyTemplateProvider" Type="{x:Type io:UFile}" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <DockPanel>
        <Button Style="{StaticResource ImageButtonStyle}" DockPanel.Dock="Right" Command="{Binding BrowseFile}"
                Visibility="{Binding HasCommand_BrowseFile, Converter={sd:VisibleOrCollapsed}}"
                ToolTip="{sd:Localize Browse file, Context=ToolTip}">
          <Image Source="{StaticResource ImageBrowse}" Width="16" Height="16" Margin="-1"/>
        </Button>
        <sd:TextBox x:Name="TextBox" Margin="2" SelectAllOnFocus="True"
                      sd:Trimming.TextTrimming="WordEllipsis" sd:Trimming.TrimmingSource="Middle" sd:Trimming.WordSeparators="/\\"
                      Text="{Binding NodeValue, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:UFileToString}}}"
                      WatermarkContentTemplate="{StaticResource DifferentValuesWatermarkTemplate}">
          <i:Interaction.Behaviors>
            <behaviors:ReferenceHostDragDropBehavior UsePreviewEvents="True" DisplayDropAdorner="ExternalOnly"/>
            <behaviors:TextBoxPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
          </i:Interaction.Behaviors>
        </sd:TextBox>
      </DockPanel>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="TextBox" Property="WatermarkContent" Value="{sd:Localize (Different values)}"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </view:TypeMatchTemplateProvider>

  <!-- Provider for simple enum editor: A ComboBox to select a single value -->
  <pvdr:EnumTemplateProvider x:Key="EnumPropertyTemplateProvider" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate DataType="qvm:NodeViewModel">
      <Grid>
        <ComboBox Style="{StaticResource EnumComboBox}" Text=""/>
        <TextBlock x:Name="TextBlock" VerticalAlignment="Center" Margin="9,0,30,0" HorizontalAlignment="Left" IsHitTestVisible="False"/>
      </Grid>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="TextBlock" Property="Text" Value="{sd:Localize (Different values)}"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </pvdr:EnumTemplateProvider>

  <!-- Provider for flag enum editor: A ListBox to select a multiple value -->
  <pvdr:EnumTemplateProvider x:Key="FlagEnumPropertyTemplateProvider" FlagEnum="True" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <pvdr:EnumTemplateProvider.OverriddenProviderNames>
      <s:String>Enum</s:String>
    </pvdr:EnumTemplateProvider.OverriddenProviderNames>
    <DataTemplate DataType="qvm:NodeViewModel">
      <Grid>
        <ToggleButton x:Name="ToggleButton" VerticalAlignment="Center" Margin="2" Content="{sd:Localize Change values..., Context=Button}">
          <i:Interaction.Behaviors>
            <sd:ToggleButtonPopupBehavior/>
          </i:Interaction.Behaviors>
        </ToggleButton>
        <Popup Grid.Column="0" IsOpen="{Binding ElementName=ToggleButton, Path=IsChecked}" StaysOpen="False">
          <Grid Background="{StaticResource BackgroundBrush}" MinWidth="200" MaxWidth="400" MaxHeight="200">
            <DockPanel>
              <UniformGrid DockPanel.Dock="Bottom" Columns="3">
                <Button Content="{sd:Localize All, Context=Button}" ToolTip="{sd:Localize Select all values, Context=ToolTip}"
                        Command="{Binding FlagEnumSelectAll}" Margin="1"/>
                <Button Content="{sd:Localize None, Context=Button}" ToolTip="{sd:Localize Clear selection, Context=ToolTip}"
                        Command="{Binding FlagEnumSelectNone}" Margin="1"/>
                <Button Content="{sd:Localize Invert, Context=Button}" ToolTip="{sd:Localize Invert selection, Context=ToolTip}"
                        Command="{Binding FlagEnumSelectInvert}" Margin="1"/>
              </UniformGrid>
              <ListBox Margin="0" Padding="2" Background="Transparent" BorderThickness="0" SelectionMode="Multiple"
                                 ItemsSource="{Binding Type, Converter={sd:EnumValues}, Mode=OneWay}" Focusable="False"
                                 ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto">
                <i:Interaction.Behaviors>
                  <sd:ListBoxBindableSelectedItemsBehavior SelectedItems="{sd:MultiBinding {Binding}, {Binding NodeValue, Converter={cvt:DifferentValuesToNull}}, Converter={cvt:FlagEnumToObservableList}}"/>
                </i:Interaction.Behaviors>
                <ListBox.ItemContainerStyle>
                  <Style BasedOn="{StaticResource {x:Type ListBoxItem}}" TargetType="ListBoxItem">
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="ListBoxItem">
                          <CheckBox IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}}">
                            <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                              ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                          </CheckBox>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemTemplate>
                  <DataTemplate>
                    <TextBlock Text="{Binding Converter={sd:EnumToDisplayName}}"/>
                  </DataTemplate>
                </ListBox.ItemTemplate>
              </ListBox>
            </DockPanel>
          </Grid>
        </Popup>
      </Grid>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="ToggleButton" Property="Content" Value="{sd:Localize (Different values)}"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </pvdr:EnumTemplateProvider>

  <!-- Provider for editor for enum that have an associated image set: A ListBox to select a single value -->
  <pvdr:EnumTemplateProvider x:Key="ImageEnumPropertyTemplateProvider" ImageEnum="True" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <pvdr:EnumTemplateProvider.OverriddenProviderNames>
      <s:String>Enum</s:String>
    </pvdr:EnumTemplateProvider.OverriddenProviderNames>
    <DataTemplate DataType="qvm:NodeViewModel">
      <ListBox Margin="0" Padding="2" Background="Transparent" BorderThickness="0" sd:BehaviorProperties.HandlesMouseWheelScrolling="False"
               ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Disabled" Focusable="False"
               ItemsSource="{Binding Type, Converter={sd:EnumValues}, Mode=OneWay}"
               SelectedItem="{Binding NodeValue, Converter={cvt:DifferentValuesToNull}}">
        <ItemsControl.ItemTemplate>
          <DataTemplate>
            <Border Width="20" Height="20" Margin="0,0,1,0" ToolTip="{Binding}">
              <Image HorizontalAlignment="Left" VerticalAlignment="Center" Width="16" Height="16" Margin="-1"
                     Source="{Binding Converter={cvt:EnumToResource}}"/>
            </Border>
          </DataTemplate>
        </ItemsControl.ItemTemplate>
        <ItemsControl.ItemContainerStyle>
          <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
            <Setter Property="Width" Value="24"/>
          </Style>
        </ItemsControl.ItemContainerStyle>
        <ItemsControl.ItemsPanel>
          <ItemsPanelTemplate>
            <WrapPanel Orientation="Horizontal"/>
          </ItemsPanelTemplate>
        </ItemsControl.ItemsPanel>
      </ListBox>
    </DataTemplate>
  </pvdr:EnumTemplateProvider>

  <!-- Provider for editor for flag enum that have an associated image set: A ListBox to select a single value -->
  <pvdr:EnumTemplateProvider x:Key="ImageFlagEnumPropertyTemplateProvider" FlagEnum="True" ImageEnum="True" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <pvdr:EnumTemplateProvider.OverriddenProviderNames>
      <s:String>Enum</s:String>
      <s:String>FlagEnum</s:String>
      <s:String>ImageEnum</s:String>
    </pvdr:EnumTemplateProvider.OverriddenProviderNames>
    <DataTemplate>
      <ListBox Margin="0" Padding="2" Background="Transparent" BorderThickness="0" SelectionMode="Multiple"
               sd:BehaviorProperties.HandlesMouseWheelScrolling="False" Focusable="False"
               ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Disabled"
               ItemsSource="{Binding Type, Converter={sd:EnumValues}, Mode=OneWay}">
        <ItemsControl.ItemTemplate>
          <DataTemplate>
            <Border Width="20" Height="20" Margin="0,0,1,0" ToolTip="{Binding}">
              <Image HorizontalAlignment="Left" VerticalAlignment="Center" Width="16" Height="16" Margin="-1"
                                Source="{Binding Converter={cvt:EnumToResource}}" />
            </Border>
          </DataTemplate>
        </ItemsControl.ItemTemplate>
        <ItemsControl.ItemContainerStyle>
          <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
            <Setter Property="Width" Value="24"/>
          </Style>
        </ItemsControl.ItemContainerStyle>
        <ItemsControl.ItemsPanel>
          <ItemsPanelTemplate>
            <WrapPanel Orientation="Horizontal"/>
          </ItemsPanelTemplate>
        </ItemsControl.ItemsPanel>
        <i:Interaction.Behaviors>
          <sd:ListBoxBindableSelectedItemsBehavior SelectedItems="{sd:MultiBinding {Binding}, {Binding NodeValue, Converter={cvt:DifferentValuesToNull}},
                                                                    Converter={cvt:FlagEnumToObservableList}}"/>
        </i:Interaction.Behaviors>
      </ListBox>
    </DataTemplate>
  </pvdr:EnumTemplateProvider>

  <ContextMenu x:Key="ReferenceContextMenu">
    <MenuItem Icon="{sd:Image {StaticResource ImageFetchAsset}}"
              Header="{sd:Localize Select the referenced asset}"
              Command="{Binding FetchAsset}"
              IsEnabled="{Binding NodeValue, Converter={sd:Chained {cvt:DifferentValuesToNull}, {sd:ObjectToBool}}}"
              Visibility="{Binding HasCommand_FetchAsset, Converter={sd:VisibleOrCollapsed}, FallbackValue=Collapsed}"/>
    <MenuItem Icon="{sd:Image {StaticResource ImagePickup}}"
              Header="{sd:Localize Select an asset}"
              Command="{Binding PickupAsset}"
              CommandParameter="{Binding Type}"
              Visibility="{Binding HasCommand_PickupAsset, Converter={sd:VisibleOrCollapsed}, FallbackValue=Collapsed}"/>
    <MenuItem Icon="{sd:Image {StaticResource ImageClear}}"
              Header="{sd:Localize Clear this reference}"
              Command="{Binding CreateNewInstance}"
              CommandParameter="{x:Static assetCommands:AbstractNodeValue.Null}"
              Visibility="{Binding HasCommand_CreateNewInstance, Converter={sd:VisibleOrCollapsed}, FallbackValue=Collapsed}"/>
  </ContextMenu>

  <DataTemplate x:Key="SimpleContentReferencePropertyTemplate">
    <DockPanel>
      <UniformGrid Rows="1" DockPanel.Dock="Right">
        <Button Style="{StaticResource ImageButtonStyle}" Command="{Binding PickupAsset}" CommandParameter="{Binding Type}"
                ToolTip="{sd:Localize Select an asset, Context=ToolTip}">
          <Image Source="{StaticResource ImagePickup}" Width="16" Height="16" Margin="-1"/>
        </Button>
        <Button Style="{StaticResource ImageButtonStyle}" Command="{Binding CreateNewInstance}" CommandParameter="{x:Static assetCommands:AbstractNodeValue.Null}"
                ToolTip="{sd:Localize Clear the reference, Context=ToolTip}">
          <Image Source="{StaticResource ImageClear}" Width="16" Height="16" Margin="-1"/>
        </Button>
        <Button Style="{StaticResource ImageButtonStyle}" Command="{Binding FetchAsset}"
                ToolTip="{sd:Localize Select the referenced asset, Context=ToolTip}">
          <Image Source="{StaticResource ImageFetchAsset}" Width="16" Height="16" Margin="-1"/>
        </Button>
      </UniformGrid>
      <sd:TextBox SelectAllOnFocus="True" Text="{Binding NodeValue, Converter={cvt:ContentReferenceToUrl}}" Margin="5"
                    ContextMenu="{StaticResource ReferenceContextMenu}" IsReadOnly="{Binding IsReadOnly}">
        <i:Interaction.Behaviors>
          <behaviors:ReferenceHostDragDropBehavior UsePreviewEvents="True" DisplayDropAdorner="InternalOnly"/>
        </i:Interaction.Behaviors>
      </sd:TextBox>
    </DockPanel>
  </DataTemplate>

  <pvdr:ContentReferenceTemplateProvider x:Key="SimpleContentReferencePropertyTemplateProvider" DynamicThumbnail="False"
                                         edvw:PropertyViewHelper.TemplateCategory="PropertyEditor"
                                         Template="{StaticResource SimpleContentReferencePropertyTemplate}" OverrideRule="Some">
  </pvdr:ContentReferenceTemplateProvider>

  <pvdr:ContentReferenceTemplateProvider x:Key="ThumbnailContentReferencePropertyTemplateProvider" DynamicThumbnail="True" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" OverrideRule="Some">
    <DataTemplate>
      <DockPanel>
        <Border BorderThickness="1" BorderBrush="Black" Background="Transparent" DockPanel.Dock="Right"
                Cursor="Hand" Margin="0,1" ContextMenu="{StaticResource ReferenceContextMenu}">
          <Grid>
            <Border Width="64" Height="64" Background="Transparent" ToolTip="{sd:Localize Select the referenced asset, Context=ToolTip}"
                    Visibility="{Binding Visibility,ElementName=ThumbnailImage}">
              <Image x:Name="ThumbnailImage" DataContext="{Binding NodeValue, Converter={cvt:ContentReferenceToAsset}}" Width="64" Height="64"
                     Source="{Binding ThumbnailData.Presenter, Mode=OneWay}"/>
              <i:Interaction.Behaviors>
                <sd:OnEventCommandBehavior EventName="MouseLeftButtonDown" Command="{Binding FetchAsset}"/>
              </i:Interaction.Behaviors>
            </Border>
            <ProgressBar DataContext="{Binding NodeValue, Converter={cvt:ContentReferenceToAsset}}" Width="16" Height="4" IsIndeterminate="True"
                         Visibility="{Binding ThumbnailData, Mode=OneWay, FallbackValue={sd:Collapsed},
                                                          Converter={sd:Chained {sd:ObjectToBool}, {sd:InvertBool}, {sd:VisibleOrHidden}}}"/>
            <Border Width="64" Height="64" Background="Transparent" ToolTip="{sd:Localize Select an asset, Context=ToolTip}"
                    Visibility="{Binding Visibility,ElementName=PickupImage}">
              <Image x:Name="PickupImage" Source="{StaticResource ImagePickup}" Width="16" Height="16"
                     DataContext="{Binding NodeValue, Converter={cvt:ContentReferenceToAsset}}"
                     Visibility="{Binding Converter={sd:Chained {sd:ObjectToBool}, {sd:InvertBool}, {sd:VisibleOrHidden}}, Mode=OneWay}"/>
              <i:Interaction.Behaviors>
                <sd:OnEventCommandBehavior EventName="MouseLeftButtonDown" Command="{Binding PickupAsset}" CommandParameter="{Binding Type}"/>
              </i:Interaction.Behaviors>
            </Border>
          </Grid>
          <i:Interaction.Behaviors>
            <behaviors:ReferenceHostDragDropBehavior DisplayDropAdorner="InternalOnly"/>
          </i:Interaction.Behaviors>
        </Border>
        <DockPanel>
          <sd:TextBox DockPanel.Dock="Top" SelectAllOnFocus="True" Text="{Binding NodeValue, Converter={cvt:ContentReferenceToUrl}}"
                                  Margin="2,0,5,5" ContextMenu="{StaticResource ReferenceContextMenu}" IsReadOnly="{Binding IsReadOnly}">
            <i:Interaction.Behaviors>
              <behaviors:ReferenceHostDragDropBehavior UsePreviewEvents="True" DisplayDropAdorner="InternalOnly"/>
              <behaviors:TextBoxPropertyValueValidationBehavior AdornerStoryboard="{StaticResource HighlightBorderAdornerValidationErrorStoryboard}"/>
            </i:Interaction.Behaviors>
          </sd:TextBox>
          <UniformGrid Rows="1" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="6,0">
            <Button Style="{StaticResource ImageButtonStyle}" Command="{Binding PickupAsset}" CommandParameter="{Binding Type}"
                    ToolTip="{sd:Localize Select an asset, Context=ToolTip}" Visibility="{Binding HasCommand_PickupAsset, Converter={sd:VisibleOrCollapsed}}">
              <Image Source="{StaticResource ImagePickup}" Width="16" Height="16" Margin="-1"/>
            </Button>
            <Button Style="{StaticResource ImageButtonStyle}" Command="{Binding CreateNewInstance}"
                    CommandParameter="{x:Static assetCommands:AbstractNodeValue.Null}"
                    ToolTip="{sd:Localize Clear the reference, Context=ToolTip}" Visibility="{Binding HasCommand_CreateNewInstance, Converter={sd:VisibleOrCollapsed}}">
              <Image Source="{StaticResource ImageClear}" Width="16" Height="16" Margin="-1"/>
            </Button>
          </UniformGrid>
        </DockPanel>
      </DockPanel>
    </DataTemplate>
  </pvdr:ContentReferenceTemplateProvider>

  <pvdr:NullableTemplateProvider x:Key="NullableStructPropertyTemplateProvider" Struct="True" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor">
    <DataTemplate>
      <DockPanel>
        <StackPanel DockPanel.Dock="Right" Visibility="{Binding HasCommand_CreateNewInstance, Converter={sd:VisibleOrCollapsed}}" Orientation="Horizontal">
          <Button Style="{StaticResource ImageButtonStyle}" ToolTip="{sd:Localize Create an instance of this structure, Context=ToolTip}"
                  Command="{Binding CreateNewInstance, Mode=OneWay}" CommandParameter="{Binding Type, Converter={sd:UnderlyingType}, Mode=OneWay}"
                  Visibility="{Binding NodeValue, Converter={sd:Chained {sd:ObjectToBool}, {sd:InvertBool}, {sd:VisibleOrCollapsed}}}">
            <Image Source="{StaticResource ImageCreateInstance}" Width="16" Height="16" Margin="-1"/>
          </Button>
          <Button Style="{StaticResource ImageButtonStyle}" ToolTip="{sd:Localize Clear value (set to null), Context=ToolTip}"
                  Command="{Binding CreateNewInstance, Mode=OneWay}" CommandParameter="{x:Static assetCommands:AbstractNodeValue.Null}"
                  Visibility="{Binding NodeValue, Converter={sd:Chained {sd:ObjectToBool}, {sd:VisibleOrCollapsed}}}"
                  VerticalAlignment="Center">
            <Image Source="{StaticResource ImageClear}" Width="16" Height="16" Margin="-1"/>
          </Button>
        </StackPanel>
        <TextBlock Text="{sd:Localize (null)}"  Visibility="{Binding NodeValue, Converter={sd:Chained {sd:ObjectToBool}, {sd:InvertBool}, {sd:VisibleOrCollapsed}}}"/>
        <ContentControl Visibility="{Binding NodeValue, Converter={sd:Chained {sd:ObjectToBool}, {sd:VisibleOrCollapsed}}}"  Content="{Binding}"
                        ContentTemplateSelector="{x:Static edvw:PropertyViewHelper.EditorProviders}"/>
      </DockPanel>
    </DataTemplate>
  </pvdr:NullableTemplateProvider>

  <edvw:SettingsCommandTemplateProvider x:Key="SettingsCommandTemplateProvider" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" OverrideRule="All">
    <DataTemplate DataType="qvm:NodeViewModel">
      <Border>
        <Button MinWidth="80" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="2" Content="{Binding NodeValue.ActionName}" Command="{Binding NodeValue.Command}"/>
      </Border>
    </DataTemplate>
  </edvw:SettingsCommandTemplateProvider>

  <edvw:SettingsStringFromAcceptableValuesTemplateProvider x:Key="StringFromAcceptableValuesEditorTemplate" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" OverrideRule="All">
    <DataTemplate DataType="qvm:NodeViewModel">
      <Border>
        <ComboBox IsEditable="False" ItemsSource="{Binding Parent.AcceptableValues}"
                          SelectedItem="{Binding NodeValue}" Margin="2">
        </ComboBox>
      </Border>
    </DataTemplate>
  </edvw:SettingsStringFromAcceptableValuesTemplateProvider>

  <!-- Fallback terminal provider -->
  <sd:DefaultTemplateProvider x:Key="ObjectPropertyTemplateProvider" edvw:PropertyViewHelper.TemplateCategory="PropertyEditor" OverrideRule="None">
    <DataTemplate DataType="qvm:NodeViewModel">
      <TextBlock Margin="2,0" VerticalAlignment="Center" x:Name="DefaultTextBlock"
                 Text="{sd:PriorityBinding {Binding AttributeDisplayName, Mode=OneWay}, {Binding Type, Mode=OneWay, StringFormat={sd:Localize {}{0} (Not supported)}, Converter={sd:NotSupportedTypeToTypeName}}, {Binding NodeValue, Mode=OneWay, Converter={sd:ObjectToTypeName}}}"/>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="DefaultTextBlock" Property="Text" Value="{sd:Localize (Different values)}"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </sd:DefaultTemplateProvider>

  <pvdr:UnloadableObjectTemplateProvider x:Key="YamlProxyTemplateProvider" OverrideRule="All" edvw:PropertyViewHelper.TemplateCategory="PropertyHeader">
    <DataTemplate DataType="qvm:NodeViewModel">
      <DockPanel>
        <Border DockPanel.Dock="Top" BorderBrush="Black" Margin="4,8" BorderThickness="1" Background="{StaticResource NormalBrush}">
          <StackPanel Orientation="Vertical">
            <TextBlock Foreground="Orange" Margin="8" TextWrapping="WrapWithOverflow" TextTrimming="CharacterEllipsis">
              <TextBlock.Text>
                <MultiBinding StringFormat="{sd:Localize Unable to load the object of type {0} from assembly {1}}">
                  <Binding Path="NodeValue.TypeName" />
                  <Binding Path="NodeValue.AssemblyName" />
                </MultiBinding>
              </TextBlock.Text>
            </TextBlock>
            <TextBlock Text="{Binding NodeValue.Error}" Margin="8" TextWrapping="WrapWithOverflow" TextTrimming="CharacterEllipsis"/>
          </StackPanel>
        </Border>
      </DockPanel>
    </DataTemplate>
  </pvdr:UnloadableObjectTemplateProvider>

</ResourceDictionary>
