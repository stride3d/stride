<#@ template inherits="ProjectTemplateTransformation" language="C#" #>
using System;
using Windows.ApplicationModel.Activation;
using Windows.ApplicationModel.Core;
using Windows.UI.Core;
using Windows.UI.Popups;
using Windows.UI.ViewManagement;
using Stride.Engine;
using Stride.Games;

namespace <#= Properties.Namespace #>
{
    class App
    {
        [MTAThread]
        private static void Main()
        {
            var viewFactory = new FrameworkViewSource();
            CoreApplication.Run(viewFactory);
        }

        class FrameworkViewSource : IFrameworkViewSource
        {
            public IFrameworkView CreateView()
            {
                var frameworkView = new FrameworkView();
                return frameworkView;
            }
        }

        class FrameworkView : IFrameworkView
        {
            Game Game;
            CoreWindow m_window;

            public void Initialize(CoreApplicationView applicationView)
            {
                ApplicationView.PreferredLaunchWindowingMode = ApplicationViewWindowingMode.FullScreen;
                applicationView.Activated += OnActivated;
            }

            void OnActivated(CoreApplicationView applicationView, IActivatedEventArgs args)
            {
                CoreWindow.GetForCurrentThread().Activate();
            }

            public void Load(string entryPoint)
            {
            }

            public void Run()
            {
                Game = new Game();
                Game.GraphicsDeviceManager.IsFullScreen = true;
                Game.UnhandledException += Game_UnhandledException;

                Game.Run(new GameContextUWPCoreWindow(m_window));
            }

            private async void Game_UnhandledException(object sender, GameUnhandledExceptionEventArgs e)
            {
                // If something went wrong (i.e. GPU feature level is not enough), display an error message instead of crashing to properly pass certifications
                var exception = e.ExceptionObject as Exception;
                if (exception != null)
                {
                    // Display error message
                    var messageDialog = new MessageDialog(exception.Message);
                    await messageDialog.ShowAsync();

                    // Exit application
                    CoreApplication.Exit();
                }
            }

            public void SetWindow(CoreWindow window)
            {
                m_window = window;
            }

            public void Uninitialize()
            {
            }
        }
    }
}