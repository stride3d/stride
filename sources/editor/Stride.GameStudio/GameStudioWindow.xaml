<Window x:Class="Stride.GameStudio.GameStudioWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:strings="clr-namespace:Stride.GameStudio.Resources.Strings"
        xmlns:stringsEd="clr-namespace:Stride.Core.Assets.Editor.Resources.Strings;assembly=Stride.Core.Assets.Editor"
        xmlns:gs="clr-namespace:Stride.GameStudio"
        xmlns:xcad="https://github.com/Dirkster99/AvalonDock"
        xmlns:sd="http://schemas.stride3d.net/xaml/presentation"
        xmlns:viewModels="clr-namespace:Stride.Core.Presentation.Quantum.ViewModels;assembly=Stride.Core.Presentation.Quantum"
        xmlns:viewModels1="clr-namespace:Stride.Core.Assets.Editor.Components.TemplateDescriptions.ViewModels;assembly=Stride.Core.Assets.Editor"
        mc:Ignorable="d" d:DesignHeight="300" d:DesignWidth="300"
        Title="{Binding EditorTitle, RelativeSource={RelativeSource Self}}" Width="1280" Height="900" Style="{DynamicResource WindowChromeStyle}"
        PreviewMouseDown="EditorWindowPreviewMouseDown"
        d:DataContext="{d:DesignInstance gs:GameStudioViewModel}" x:Name="EditorWindow">
  <Window.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Theme.AvalonDock.xaml"/>
        <ResourceDictionary Source="/Stride.Core.Assets.Editor;component/View/CommonResources.xaml" />
      </ResourceDictionary.MergedDictionaries>
      <DataTemplate x:Key="AvalonDock_GameStudio_TitleTemplate">
        <DockPanel LastChildFill="False">
          <DockPanel.Resources>
            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
              <Style.Triggers>
                <DataTrigger Binding="{Binding LayoutItem.IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xcad:LayoutDocumentTabItem}}, Mode=OneWay}" Value="True">
                  <Setter Property="Foreground" Value="{StaticResource SelectedTextBrush}"/>
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </DockPanel.Resources>
          <TextBlock Margin="3 0" Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
          <TextBlock DockPanel.Dock="Left" HorizontalAlignment="Center" VerticalAlignment="Top"
                     Visibility="{Binding Path=Content.DataContext.IsDirty, Converter={sd:VisibleOrCollapsed}, FallbackValue={sd:Collapsed}}"
                     Text="*" TextAlignment="Center"/>
        </DockPanel>
      </DataTemplate>

      <!-- TODO: Migrate ImageDictionary from Editor to here -->
      <DrawingImage x:Key="ImageReloadProject">
        <DrawingImage.Drawing>
          <DrawingGroup>
            <DrawingGroup>
              <GeometryDrawing Brush="#00FFFFFF" Geometry="F1M16,16L0,16 0,0 16,0z" />
              <GeometryDrawing Brush="#FFF6F6F6" Geometry="F1M0,15L16,15 16,1 0,1z" />
              <GeometryDrawing Brush="#FF424242" Geometry="F1M14,13L2,13 2,5 14,5z M1,14L15,14 15,2 1,2z" />
              <GeometryDrawing Brush="#FFEFEFF0" Geometry="F1M14,13L2,13 2,5 14,5z" />
            </DrawingGroup>
            <DrawingGroup>
              <DrawingGroup.Transform>
                <TransformGroup>
                  <ScaleTransform ScaleX="0.3" ScaleY="0.3"/>
                  <SkewTransform/>
                  <RotateTransform/>
                  <TranslateTransform X="11" Y="10"/>
                </TransformGroup>
              </DrawingGroup.Transform>
              <GeometryDrawing Brush="#00FFFFFF" Geometry="F1M16,16L0,16 0,0 16,0z" />
              <GeometryDrawing Brush="#FFF6F6F6" Geometry="F1M16,8C16,12.411 12.411,16 8,16 3.589,16 0,12.411 0,8 0,6.597 0.384,5.212 1.088,4L0,4 0,0 8,0 8,8 4,8C4,10.206 5.794,12 8,12 10.206,12 12,10.206 12,8 12,6.656 11.331,5.41 10.21,4.666L9.377,4.112 11.592,0.78 12.425,1.333C14.663,2.822,16,5.314,16,8" />
              <GeometryDrawing Brush="#FF00529C" Geometry="F1M15,8C15,11.859 11.859,15 8,15 4.14,15 1,11.859 1,8 1,6.076 1.801,4.292 3.121,3L1,3 1,1 7,1 7,7 5,7 5,4.002C3.766,4.931 3,6.401 3,8 3,10.757 5.243,13 8,13 10.757,13 13,10.757 13,8 13,6.321 12.164,4.763 10.764,3.833L11.871,2.167C13.83,3.469,15,5.649,15,8" />
            </DrawingGroup>
          </DrawingGroup>
        </DrawingImage.Drawing>
      </DrawingImage>

      <ContextMenu x:Key="AssetContextMenu" d:DataContext="{d:DesignInstance sd:AssetCollectionViewModel}">
        <!-- Asset -->
        <MenuItem Header="{sd:Localize Asset, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}"/>
        <MenuItem Header="{sd:Localize Edit asset..., Context=Menu}" Command="{Binding Session.EditSelectedContentCommand}" Icon="{sd:Image {StaticResource ImageEditAsset}}" InputGestureText="{x:Static strings:KeyGestures.EditAsset}"/>
        <MenuItem Header="{Binding Session.SelectionIsRoot, Converter={sd:BoolToParam}, ConverterParameter={sd:Localize Don\'t include in build as root asset, Context=Menu},
                          FallbackValue={sd:Localize Include in build as root asset, Context=Menu}}" Command="{Binding Session.ToggleIsRootOnSelectedAssetCommand}"
                          Icon="{sd:Image {StaticResource ImageAssetIsRoot}}"/>
        <Separator Visibility="{Binding Session.ActiveAssetView.SingleSelectedAsset.AssetCommands.Count, Converter={sd:Chained {sd:NumericToBool}, {sd:VisibleOrCollapsed}}, FallbackValue={sd:Collapsed}}" />
        <!-- IsCheckable=True is a hack to prevent WPF from clearing the selected sub menu item -->
        <MenuItem ItemsSource="{Binding Session.ActiveAssetView.SingleSelectedAsset.AssetCommands}" IsCheckable="True"
                  Visibility="{Binding HasItems, RelativeSource={RelativeSource Self}, Converter={sd:VisibleOrCollapsed}, FallbackValue={sd:Collapsed}}">
          <MenuItem.ItemContainerStyle>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}" d:DataContext="{d:DesignInstance sd:MenuCommandInfo}">
              <Setter Property="Command" Value="{Binding Command}" />
              <Setter Property="CommandParameter" Value="{Binding}" />
              <Setter Property="Header" Value="{Binding DisplayName}" />
              <Setter Property="Icon" Value="{Binding Icon}" />
              <Setter Property="IsEnabled" Value="{Binding Command.IsEnabled, Mode=OneWay}" />
              <Setter Property="ToolTip" Value="{Binding Tooltip}" />
              <Setter Property="InputGestureText" Value="{Binding Gesture}" />
            </Style>
          </MenuItem.ItemContainerStyle>
          <MenuItem.Template>
            <ControlTemplate>
              <StackPanel IsItemsHost="True" />
            </ControlTemplate>
          </MenuItem.Template>
        </MenuItem>
        <Separator/>
        <MenuItem Header="{sd:Localize Cut, Context=Menu}" Command="ApplicationCommands.Cut" CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Icon="{sd:Image {StaticResource ImageCut}}"/>
        <MenuItem Header="{sd:Localize Copy, Context=Menu}" Command="ApplicationCommands.Copy" CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Icon="{sd:Image {StaticResource ImageCopy}}"/>
        <MenuItem Header="{sd:Localize Copy with dependencies, Context=Menu}" Command="{Binding CopyAssetsRecursivelyCommand}" InputGestureText="{x:Static strings:KeyGestures.CopyAssetRecursively}" Icon="{sd:Image {StaticResource ImageCopyRecursively}}"/>
        <MenuItem Header="{sd:Localize Paste, Context=Menu}" Command="ApplicationCommands.Paste" CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Icon="{sd:Image {StaticResource ImagePaste}}"/>
        <MenuItem Header="{sd:Localize Delete, Context=Menu}" Command="ApplicationCommands.Delete" CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Icon="{sd:Image {StaticResource ImageDelete}}"/>
        <Separator/>
        <MenuItem Header="{sd:Localize Copy asset URL, Context=Menu}" Command="{Binding CopyAssetUrlCommand}" />
        <MenuItem Header="{sd:Localize Rename, Context=Menu}" Command="sd:AssetViewUserControl.BeginEditCommand" Icon="{sd:Image {StaticResource ImageRename}}" InputGestureText="F2"/>
        <Separator/>
        <MenuItem Header="{sd:Localize Create folder, Context=Menu}" Command="{Binding Session.NewDirectoryCommand}" CommandParameter="{Binding Session.ActiveAssetView.SelectedLocations}" Icon="{sd:Image {StaticResource ImageNewFolder}}" Visibility="{Binding Session.NewDirectoryCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}" />
        <MenuItem Header="{sd:Localize Add asset..., Context=Menu}" Command="{Binding Session.ActiveAssetView.ShowAddAssetDialogCommand}" InputGestureText="{x:Static strings:KeyGestures.AddAsset}" Icon="{sd:Image {StaticResource ImageNewAsset}}" Visibility="{Binding Session.ActiveAssetView.ShowAddAssetDialogCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>
        <MenuItem Header="{sd:Localize Update selected assets from their source, Context=Menu}" Command="{Binding Session.SourceTracker.UpdateSelectedAssetsFromSourceCommand}" InputGestureText="{x:Static stringsEd:KeyGestures.UpdateSelectedAssetsFromSource}" Icon="{sd:Image {StaticResource UpdateSelectedAssetsFromSource}}"/>
        <MenuItem Header="{sd:Localize Update all assets with modified source, Context=Menu}" Command="{Binding Session.SourceTracker.UpdateAllAssetsWithModifiedSourceCommand}" InputGestureText="{x:Static stringsEd:KeyGestures.UpdateAllAssetsWithModifiedSource}" Icon="{sd:Image {StaticResource UpdateAllAssetsWithModifiedSource}}"/>
        <!-- Explore -->
        <MenuItem Header="{sd:Localize Explore, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}"/>
        <MenuItem Header="{sd:Localize Open with text editor, Context=Menu}" Command="{Binding Session.OpenWithTextEditorCommand}" CommandParameter="{Binding SingleSelectedAsset}" Icon="{sd:Image {StaticResource ImageOpenWithTextEditor}}"/>
        <MenuItem Header="{sd:Localize Open asset file, Context=Menu}" Command="{Binding Session.OpenAssetFileCommand}" CommandParameter="{Binding SingleSelectedAsset}" Icon="{sd:Image {StaticResource ImageOpenAssetFile}}"/>
        <MenuItem Header="{sd:Localize Open source file, Context=Menu}" Command="{Binding Session.OpenSourceFileCommand}" CommandParameter="{Binding SingleSelectedAsset}" Icon="{sd:Image {StaticResource ImageOpenSourceFile}}"/>
        <MenuItem Header="{sd:Localize Show in Explorer, Context=Menu}" Command="{Binding Session.ExploreCommand}" CommandParameter="{Binding SelectedContent}" Icon="{sd:Image {StaticResource ImageExplore}}"/>
        <MenuItem Header="{sd:Localize Show source file in Explorer, Context=Menu}" Command="{Binding Session.ExploreSourceFileCommand}" CommandParameter="{Binding SingleSelectedAsset}" Icon="{sd:Image {StaticResource ImageExplore}}"/>
      </ContextMenu>

    </ResourceDictionary>
  </Window.Resources>

  <Window.InputBindings>
    <KeyBinding Command="{Binding Session.ActiveAssetView.CopyAssetsRecursivelyCommand}" Gesture="{sd:KeyGesture {x:Static strings:KeyGestures.CopyAssetRecursively}}" />
    <KeyBinding Command="{Binding Session.EditSelectedContentCommand}" Gesture="{sd:KeyGesture {x:Static strings:KeyGestures.EditAsset}}"/>
    <KeyBinding Command="{Binding Session.ActiveAssetView.ShowAddAssetDialogCommand}" Gesture="{sd:KeyGesture {x:Static strings:KeyGestures.AddAsset}}"/>
    <KeyBinding Command="{Binding Session.SourceTracker.UpdateSelectedAssetsFromSourceCommand}" Gesture="{sd:KeyGesture {x:Static stringsEd:KeyGestures.UpdateSelectedAssetsFromSource}}"/>
    <KeyBinding Command="{Binding Session.SourceTracker.UpdateAllAssetsWithModifiedSourceCommand}" Gesture="{sd:KeyGesture {x:Static stringsEd:KeyGestures.UpdateAllAssetsWithModifiedSource}}"/>
    <KeyBinding Command="{Binding Debugging.BuildProjectCommand}" Gesture="{sd:KeyGesture {x:Static strings:KeyGestures.BuildProject}}"/>
    <KeyBinding Command="{Binding Debugging.StartProjectCommand}" Gesture="{sd:KeyGesture {x:Static strings:KeyGestures.StartProject}}"/>
    <KeyBinding Command="{Binding Debugging.CancelBuildCommand}" Gesture="{sd:KeyGesture {x:Static strings:KeyGestures.CancelBuild}}"/>
    <KeyBinding Command="{Binding OpenDebugWindowCommand, RelativeSource={RelativeSource AncestorType=Window}}" Gesture="{sd:KeyGesture {x:Static strings:KeyGestures.OpenDebugWindow}}"/>
  </Window.InputBindings>

  <i:Interaction.Behaviors>
    <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.New" Command="{Binding NewSessionCommand}"/>
    <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Open" Command="{Binding OpenSessionCommand}"/>
    <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Save" Command="{Binding Session.SaveSessionCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
    <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Undo" Command="{Binding Session.ActionHistory.UndoCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
    <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Redo" Command="{Binding Session.ActionHistory.RedoCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
  </i:Interaction.Behaviors>

  <Grid>
    <Grid.RowDefinitions>
      <!-- MENU ROW DEFINITION-->
      <RowDefinition Height="Auto"/>
      <!-- DOCUMENT ROW DEFINITION-->
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>

    <!-- MENU ROW -->
    <Menu IsHitTestVisible="True" Grid.Row="0" FontSize="12">
      <!-- File Menu -->
      <MenuItem Header="{sd:Localize File, Context=Menu}">
        <MenuItem Header="{sd:Localize New, Context=Menu}" Command="ApplicationCommands.New" Icon="{sd:Image {StaticResource ImageNewSolution}}"/>
        <MenuItem Header="{sd:Localize Open, Context=Menu}" Command="ApplicationCommands.Open" Icon="{sd:Image {StaticResource ImageOpen}}"/>
        <MenuItem Header="{sd:Localize Open recent, Context=Menu}" Icon="{sd:Image {StaticResource ImageOpen}}" IsEnabled="{Binding MRU.MostRecentlyUsedFiles.Count, Converter={sd:NumericToBool}}">
          <!-- IsCheckable=True is a hack to prevent WPF from clearing the selected sub menu item -->
          <MenuItem ItemsSource="{Binding RecentFiles}" IsCheckable="True">
            <MenuItem.ItemTemplate>
              <DataTemplate>
                <Grid HorizontalAlignment="Stretch" ToolTip="{Binding FilePath, Converter={sd:UFileToString}, Mode=OneWay}">
                  <Grid.ColumnDefinitions >
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition MaxWidth="320"/>
                  </Grid.ColumnDefinitions>
                  <TextBlock Grid.Column="0" Text="{Binding Version}" FontWeight="Bold" />
                  <TextBlock Grid.Column="1"
                             Text="{sd:MultiBinding {Binding FilePath, Converter={sd:UFileToString}, Mode=OneWay}, {Binding RelativeSource={RelativeSource Self}},
                                                      Converter={sd:TrimString MaxWidth=320, TextTrimming=WordEllipsis, TrimmingSource=Middle, WordSeparators=/\\}}"/>
                </Grid>
              </DataTemplate>
            </MenuItem.ItemTemplate>
            <MenuItem.ItemContainerStyle>
              <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                <Setter Property="Command" Value="{Binding DataContext.OpenSessionCommand, RelativeSource={RelativeSource AncestorType=Menu}}"/>
                <Setter Property="CommandParameter" Value="{Binding FilePath}"/>
              </Style>
            </MenuItem.ItemContainerStyle>
            <MenuItem.Template>
              <ControlTemplate>
                <StackPanel IsItemsHost="True"/>
              </ControlTemplate>
            </MenuItem.Template>
          </MenuItem>
          <Separator/>
          <MenuItem Header="{sd:Localize Clear list, Context=Menu}" Command="{Binding ClearMRUCommand}" Icon="{sd:Image {StaticResource ImageDelete}}"/>
        </MenuItem>
        <MenuItem Header="{sd:Localize Save, Context=Menu}" Command="ApplicationCommands.Save" Icon="{sd:Image {StaticResource ImageSave}}"/>
        <Separator/>
        <MenuItem Header="{sd:Localize Reload project, Context=Menu}" Command="{Binding ReloadSessionCommand}" Icon="{sd:Image {StaticResource ImageReloadProject}}"/>
        <Separator/>
        <MenuItem Header="{sd:Localize Quit, Context=Menu}">
          <i:Interaction.Behaviors>
            <sd:MenuItemCloseWindowBehavior/>
          </i:Interaction.Behaviors>
        </MenuItem>
      </MenuItem>
      <!-- Edit Menu -->
      <MenuItem Header="{sd:Localize Edit, Context=Menu}">
        <MenuItem Header="{sd:Localize Undo, Context=Menu}" Command="ApplicationCommands.Undo" Icon="{sd:Image {StaticResource ImageUndo}}"/>
        <MenuItem Header="{sd:Localize Redo, Context=Menu}" Command="ApplicationCommands.Redo" Icon="{sd:Image {StaticResource ImageRedo}}"/>
        <Separator/>
        <MenuItem Header="{sd:Localize Cut, Context=Menu}" Command="ApplicationCommands.Cut" Icon="{sd:Image {StaticResource ImageCut}}" />
        <MenuItem Header="{sd:Localize Copy, Context=Menu}" Command="ApplicationCommands.Copy" Icon="{sd:Image {StaticResource ImageCopy}}" />
        <MenuItem Header="{sd:Localize Paste, Context=Menu}" Command="ApplicationCommands.Paste" Icon="{sd:Image {StaticResource ImagePaste}}" />
        <MenuItem Header="{sd:Localize Delete, Context=Menu}" Command="ApplicationCommands.Delete" Icon="{sd:Image {StaticResource ImageDelete}}"/>
        <Separator/>
        <MenuItem Header="{sd:Localize Settings, Context=Menu}" Command="{Binding OpenSettingsWindowCommand}" Icon="{sd:Image {StaticResource ImageSettings}}"/>
      </MenuItem>
      <!-- Project Menu -->
      <MenuItem Header="{sd:Localize Project, Context=Menu}" IsEnabled="{Binding Session, Converter={sd:ObjectToBool}}">
        <MenuItem Header="{sd:Localize Build project, Context=Menu}" Command="{Binding Debugging.BuildProjectCommand}" Icon="{sd:Image {StaticResource ImageBuildProject}}" InputGestureText="{x:Static strings:KeyGestures.BuildProject}"/>
        <MenuItem Header="{sd:Localize Start project, Context=Menu}" Command="{Binding Debugging.StartProjectCommand}" Icon="{sd:Image {StaticResource ImageStartProject}}" InputGestureText="{x:Static strings:KeyGestures.StartProject}"/>
        <!-- Disable live-scripting commands until it is working -->
        <MenuItem Header="{sd:Localize Start live-scripting, Context=Menu}" Command="{Binding Debugging.LivePlayProjectCommand}" Icon="{sd:Image {StaticResource ImageLiveScripting}}" Visibility="Collapsed"/>
        <MenuItem Header="{sd:Localize Cancel build, Context=Menu}" Command="{Binding Debugging.CancelBuildCommand}" Icon="{sd:Image {StaticResource ImageStopBuild}}" InputGestureText="{x:Static strings:KeyGestures.CancelBuild}"/>
        <MenuItem Header="{sd:Localize Folder, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}"/>
        <MenuItem Header="{sd:Localize Create folder, Context=Menu}" Command="{Binding Session.NewDirectoryCommand}" CommandParameter="{Binding Session.ActiveAssetView.SelectedLocations}" Icon="{sd:Image {StaticResource ImageNewFolder}}"/>

        <MenuItem Header="{sd:Localize Package, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}"/>
        <MenuItem Header="{sd:Localize Update package, Context=Menu}" ItemsSource="{Binding Session.UpdatePackageViewModel.Templates}" Icon="{sd:Image {StaticResource ImageAddNewProject}}" Visibility="{Binding Session.IsUpdatePackageEnabled, Converter={sd:VisibleOrCollapsed}}">
          <MenuItem.ItemContainerStyle>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}" d:DataContext="{d:DesignInstance viewModels1:TemplateDescriptionViewModel}">
              <Setter Property="Command" Value="{Binding UpdatePackageCommand}"/>
            </Style>
          </MenuItem.ItemContainerStyle>
          <MenuItem.ItemTemplate>
            <DataTemplate DataType="viewModels1:TemplateDescriptionViewModel">
              <DockPanel Width="384">
                <Image Source="{Binding Icon}" DockPanel.Dock="Left" Width="48" Height="48" Margin="2"/>
                <DockPanel Margin="18,0">
                  <TextBlock DockPanel.Dock="Top" FontSize="16" Text="{Binding Name}"/>
                  <TextBlock Text="{Binding Description}" TextWrapping="Wrap" TextTrimming="WordEllipsis"/>
                </DockPanel>
              </DockPanel>
            </DataTemplate>
          </MenuItem.ItemTemplate>
        </MenuItem>
        <MenuItem Header="{sd:Localize Add dependency..., Context=Menu}" Command="{Binding Session.AddDependencyCommand}" Icon="{sd:Image {StaticResource ImageAddDependency}}"/>
        <MenuItem Header="{sd:Localize Set as current project, Context=Menu}" Command="{Binding Session.SetCurrentProjectCommand}" CommandParameter="{Binding}" Icon="{sd:Image {StaticResource ImageStartupProject}}"/>
        <MenuItem Header="{sd:Localize Package properties, Context=Menu}" Command="{Binding Session.ActivatePackagePropertiesCommand}" Icon="{sd:Image {StaticResource ImagePackageProperties}}"/>

        <MenuItem Header="{sd:Localize Solution, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}"/>
        <MenuItem Header="{sd:Localize New project..., Context=Menu}" Command="{Binding Session.NewProjectCommand}" Icon="{sd:Image {StaticResource ImageAddNewPackage}}"/>
        <MenuItem Header="{sd:Localize Add existing project..., Context=Menu}" Command="{Binding Session.AddExistingProjectCommand}" Icon="{sd:Image {StaticResource ImageAddExistingProject}}"/>
        <MenuItem Header="{sd:Localize Open in IDE, Context=Menu}" Command="{Binding Session.OpenInIDECommand}" Icon="{sd:Image {StaticResource ImageVisualStudio}}"/>
        <MenuItem Header="{sd:Localize Reload game assemblies, Context=Menu}" Command="{Binding Debugging.ReloadAssembliesCommand}" Icon="{sd:Image {StaticResource ImageReloadAssemblies}}"/>

        <MenuItem Header="{sd:Localize Actions, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}"/>
        <MenuItem Header="{sd:Localize Delete, Context=Menu}" Command="{Binding Session.DeleteSelectedSolutionItemsCommand}" Icon="{sd:Image {StaticResource ImageDelete}}"/>
        <MenuItem Header="{sd:Localize Rename, Context=Menu}" Command="{Binding Session.RenameDirectoryOrPackageCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}}" CommandParameter="{Binding Session.ActiveAssetView.SelectedLocations}" Icon="{sd:Image {StaticResource ImageRename}}" InputGestureText="F2"/>

        <MenuItem Header="{sd:Localize Asset, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}"/>
        <MenuItem Header="{sd:Localize Add asset..., Context=Menu}" Command="{Binding Session.ActiveAssetView.ShowAddAssetDialogCommand}" InputGestureText="{x:Static strings:KeyGestures.AddAsset}" Icon="{sd:Image {StaticResource ImageNewAsset}}"/>
        <MenuItem Header="{sd:Localize Update selected assets from their source, Context=Menu}" Command="{Binding Session.SourceTracker.UpdateSelectedAssetsFromSourceCommand}" InputGestureText="{x:Static stringsEd:KeyGestures.UpdateSelectedAssetsFromSource}" Icon="{sd:Image {StaticResource UpdateSelectedAssetsFromSource}}"/>
        <MenuItem Header="{sd:Localize Update all assets with modified source, Context=Menu}" Command="{Binding Session.SourceTracker.UpdateAllAssetsWithModifiedSourceCommand}" InputGestureText="{x:Static stringsEd:KeyGestures.UpdateAllAssetsWithModifiedSource}" Icon="{sd:Image {StaticResource UpdateAllAssetsWithModifiedSource}}" Visibility="{Binding Session.NewDirectoryCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>
        <MenuItem Header="{sd:Localize Explore, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}" Visibility="{Binding Session.ExploreCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>
        <MenuItem Header="{sd:Localize Show in Explorer, Context=Menu}" Command="{Binding Session.ExploreCommand}" CommandParameter="{Binding Session.ActiveAssetView.SelectedLocations}" Icon="{sd:Image {StaticResource ImageExplore}}" Visibility="{Binding Session.ExploreCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>
      </MenuItem>
      <!-- View Menu -->
      <MenuItem Header="{sd:Localize View, Context=Menu}" IsEnabled="{Binding Session, Converter={sd:ObjectToBool}}">
        <MenuItem Header="{sd:Localize Solution explorer, Context=Menu}" IsCheckable="True" IsChecked="{Binding Panels.SessionExplorerPanelVisible, Mode=TwoWay}"/>
        <MenuItem Header="{sd:Localize Asset view, Context=Menu}" IsCheckable="True" IsChecked="{Binding Panels.AssetViewPanelVisible, Mode=TwoWay}"/>
        <MenuItem Header="{sd:Localize References, Context=Menu}" IsCheckable="True" IsChecked="{Binding Panels.ReferencesPanelVisible, Mode=TwoWay}"/>
        <Separator/>
        <MenuItem Header="{sd:Localize Asset preview, Context=Menu}" IsCheckable="True" IsChecked="{Binding Panels.AssetPreviewPanelVisible, Mode=TwoWay}"/>

        <Separator/>
        <MenuItem Header="{sd:Localize Property grid, Context=Menu}" IsCheckable="True" IsChecked="{Binding Panels.PropertyGridPanelVisible, Mode=TwoWay}"/>
        <MenuItem Header="{sd:Localize Edit history, Context=Menu}" IsCheckable="True" IsChecked="{Binding Panels.ActionHistoryPanelVisible, Mode=TwoWay}"/>

        <Separator/>
        <MenuItem Header="{sd:Localize Asset errors, Context=Menu}" IsCheckable="True" IsChecked="{Binding Panels.AssetLogPanelVisible, Mode=TwoWay}"/>
        <MenuItem Header="{sd:Localize Output, Context=Menu}" IsCheckable="True" IsChecked="{Binding Panels.BuildLogPanelVisible, Mode=TwoWay}"/>

      </MenuItem>
      <!-- Help Menu -->
      <MenuItem Header="{sd:Localize Help, Context=Menu}">
        <MenuItem Header="{sd:Localize Online documentation, Context=Menu}" Command="{Binding OpenWebPageCommand}" CommandParameter="{x:Static gs:StrideGameStudio.DocumentationUrl}"/>
        <Separator/>
        <MenuItem Header="{sd:Localize Questions and answers, Context=Menu}" Command="{Binding OpenWebPageCommand}" CommandParameter="{x:Static gs:StrideGameStudio.AnswersUrl}"/>
        <MenuItem Header="{sd:Localize Report an issue..., Context=Menu}" Command="{Binding OpenWebPageCommand}" CommandParameter="{x:Static gs:StrideGameStudio.ReportIssueUrl}"/>
        <MenuItem Header="{sd:Localize Community forums, Context=Menu}" Command="{Binding OpenWebPageCommand}" CommandParameter="{x:Static gs:StrideGameStudio.ForumsUrl}"/>
        <Separator/>
        <MenuItem Header="{sd:Localize Show debug window, Context=Menu}" Command="{Binding OpenDebugWindowCommand, RelativeSource={RelativeSource AncestorType=Window}}" InputGestureText="{x:Static strings:KeyGestures.OpenDebugWindow}"/>
        <Separator/>
        <MenuItem Header="{sd:Localize About..., Context=Menu}" Command="{Binding OpenAboutPageCommand}"/>
      </MenuItem>
      <!-- Debug Menu -->
      <MenuItem Header="Debug" Visibility="{Binding IsTestMenuVisible, ElementName=EditorWindow, Converter={sd:VisibleOrCollapsed}}">
        <MenuItem Header="Create test asset" Command="{Binding CreateTestAssetCommand, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <MenuItem Header="Create unit test asset" Command="{Binding CreateUnitTestAssetCommand, RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Separator/>
        <MenuItem Header="Break with debugger" Command="{Binding BreakDebuggerCommand, RelativeSource={RelativeSource AncestorType=Window}}"/>
      </MenuItem>
    </Menu>

    <!-- DOCUMENT ROW -->
    <Grid Grid.Row="1">
      <Grid.RowDefinitions>
        <!-- TOOLBAR ROW DEFINITION-->
        <RowDefinition Height="Auto"/>
        <!-- DOCKING ROW DEFINITION -->
        <RowDefinition Height="*"/>
        <!-- STATUS BAR ROW DEFINITION-->
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>

      <!-- TOOLBAR ROW -->
      <ToolBarTray Grid.Row="0" Visibility="{Binding Session, Converter={sd:Chained {sd:ObjectToBool}, {sd:VisibleOrCollapsed}}}">
        <ToolBar>
          <Button Command="ApplicationCommands.New"
                  ToolTip="{sd:Localize Create a project, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageNewSolution}" />
          </Button>
          <Button Command="ApplicationCommands.Open" Margin="2,0,0,0"
                  ToolTip="{sd:Localize Open an existing project, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageOpen}" />
          </Button>
          <Menu Background="Transparent" Margin="0"
                ToolTip="{sd:Localize Open recent, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True"
                ToolTipService.IsEnabled="{Binding ElementName=MRUMenu, Path=IsSubmenuOpen, Converter={sd:InvertBool}}">
            <MenuItem x:Name="MRUMenu" ItemsSource="{Binding RecentFiles}" Style="{StaticResource ToolBarDropDownMenuItemStyle}">
              <MenuItem.ItemTemplate>
                <DataTemplate>
                  <Grid HorizontalAlignment="Stretch" ToolTip="{Binding FilePath, Converter={sd:UFileToString}, Mode=OneWay}">
                    <Grid.ColumnDefinitions >
                      <ColumnDefinition Width="30"/>
                      <ColumnDefinition MaxWidth="320"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" Text="{Binding Version}" FontWeight="Bold" />
                    <TextBlock Grid.Column="1"
                               Text="{sd:MultiBinding {Binding FilePath, Converter={sd:UFileToString}, Mode=OneWay}, {Binding RelativeSource={RelativeSource Self}},
                                                        Converter={sd:TrimString MaxWidth=320, TextTrimming=WordEllipsis, TrimmingSource=Middle, WordSeparators=/\\}}"/>
                  </Grid>
                </DataTemplate>
              </MenuItem.ItemTemplate>
              <MenuItem.ItemContainerStyle>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                  <Setter Property="Command" Value="{Binding DataContext.OpenSessionCommand, RelativeSource={RelativeSource AncestorType=Menu}}"/>
                  <Setter Property="CommandParameter" Value="{Binding FilePath}"/>
                </Style>
              </MenuItem.ItemContainerStyle>
            </MenuItem>
          </Menu>
          <Button Command="ApplicationCommands.Save"
                  ToolTip="{sd:Localize Save the project and all its documents, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageSave}" />
          </Button>
          <Separator/>
          <Button Command="{Binding ReloadSessionCommand}"
                  ToolTip="{sd:Localize Reload current project (ask to save), Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageReloadProject}" />
          </Button>
          <Separator/>
          <Button Command="ApplicationCommands.Undo"
                  ToolTip="{sd:Localize Undo last action, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageUndo}" />
          </Button>
          <Button Command="ApplicationCommands.Redo"
                  ToolTip="{sd:Localize Redo last cancelled action, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageRedo}" />
          </Button>
        </ToolBar>
        <ToolBar>
          <Button Command="{Binding Session.OpenInIDECommand}" Margin="2,0,0,0"
                  ToolTip="{sd:Localize Open in IDE, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageVisualStudio}" Width="16" Height="16" />
          </Button>
          <Menu Background="Transparent"
                ToolTip="{sd:Localize Open with..., Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
            <MenuItem ItemsSource="{Binding AvailableIDEs}" Style="{StaticResource ToolBarDropDownMenuItemStyle}">
              <MenuItem.ItemContainerStyle>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                  <Setter Property="Command" Value="{Binding DataContext.Session.OpenInIDECommand, RelativeSource={RelativeSource AncestorType=Menu}}"/>
                  <Setter Property="CommandParameter" Value="{Binding}"/>
                </Style>
              </MenuItem.ItemContainerStyle>
            </MenuItem>
          </Menu>
          <Button Command="{Binding Debugging.ReloadAssembliesCommand}"
                  ToolTip="{sd:Localize Reload game assemblies and update scripts, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
            <Grid>
              <Image Source="{StaticResource ImageReloadAssemblies}"/>
              <Rectangle Fill="White" Visibility="{Binding Debugging.ReloadAssembliesCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}">
                <Rectangle.OpacityMask>
                  <ImageBrush ImageSource="{StaticResource ImageReloadAssemblies}"/>
                </Rectangle.OpacityMask>
                <Rectangle.Triggers>
                  <EventTrigger RoutedEvent="Window.Loaded">
                    <BeginStoryboard>
                      <Storyboard RepeatBehavior="Forever">
                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.5" BeginTime="0:0:0" AutoReverse="True"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </EventTrigger>
                </Rectangle.Triggers>
              </Rectangle>
            </Grid>
          </Button>
          <Separator/>
          <Button Command="{Binding Debugging.BuildProjectCommand}"
                  ToolTip="{sd:ToolTip {sd:Localize Build the project, Context=ToolTip}, {x:Static strings:KeyGestures.BuildProject}}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageBuildProject}"/>
          </Button>
          <Button Command="{Binding Debugging.StartProjectCommand}"
                  ToolTip="{sd:ToolTip {sd:Localize Build the project and start the game, Context=ToolTip}, {x:Static strings:KeyGestures.StartProject}}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageStartProject}"/>
          </Button>
          <!-- Live Scripting -->
          <!-- FIXME live scripting is disabled (XK-4309) -->
          <Button Command="{Binding Debugging.LivePlayProjectCommand}"
                  ToolTip="{sd:Localize Start project in live-scripting mode, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True"
                  Visibility="Collapsed">
            <Image Source="{StaticResource ImageLiveScripting}"/>
          </Button>
          <Button Command="{Binding Debugging.CancelBuildCommand}"
                  ToolTip="{sd:ToolTip {sd:Localize Cancel the current build, Context=ToolTip}, {x:Static strings:KeyGestures.CancelBuild}}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageStopBuild}"/>
          </Button>
        </ToolBar>
      </ToolBarTray>

      <!-- DOCKING ROW -->
      <xcad:DockingManager x:Name="Docking" Grid.Row="1" Visibility="{Binding Session, Converter={sd:Chained {sd:ObjectToBool}, {sd:VisibleOrCollapsed}}}"
                           AllowMixedOrientation="True"
                           DocumentHeaderTemplate="{StaticResource AvalonDock_GameStudio_TitleTemplate}" DocumentTitleTemplate="{StaticResource AvalonDock_GameStudio_TitleTemplate}" AnchorableTitleTemplate="{StaticResource AvalonDock_GameStudio_TitleTemplate}">
        <xcad:LayoutRoot>
          <xcad:LayoutPanel Orientation="Horizontal">
            <xcad:LayoutPanel Orientation="Vertical">
              <xcad:LayoutPanel Orientation="Horizontal">
                <xcad:LayoutAnchorablePane DockWidth="300">
                  <!-- SOLUTION EXPLORER -->
                  <xcad:LayoutAnchorable AutoHideMinWidth="300" ContentId="SolutionExplorer" Title="{Binding Source={sd:Localize Solution explorer, Context=View}}"
                                         gs:AvalonDockHelper.IsVisible="{Binding Panels.SessionExplorerPanelVisible, Mode=TwoWay,
                                         Source={x:Static gs:GameStudioViewModel.GameStudio}, FallbackValue={sd:True}}">
                    <DockPanel>
                      <ToolBarTray DockPanel.Dock="Top">
                        <ToolBar>
                          <Button Command="{Binding Session.NewProjectCommand}"
                            ToolTip="{sd:Localize Create a project..., Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
                            <Image Source="{StaticResource ImageAddNewPackage}" />
                          </Button>
                          <Button Command="{Binding Session.NewDirectoryCommand}" CommandParameter="{Binding SelectedItems, ElementName=DirectoryTreeView}"
                            ToolTip="{sd:Localize Create a folder, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
                            <Image Source="{StaticResource ImageNewFolder}" />
                          </Button>
                          <Separator/>
                          <Button Command="{Binding Session.ActivatePackagePropertiesCommand}"
                            ToolTip="{sd:Localize Display the properties of the selected package in the property grid, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
                            <Image Source="{StaticResource ImagePackageProperties}" />
                          </Button>
                          <Button Command="{Binding Session.RenameDirectoryOrPackageCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}}" CommandParameter="{Binding SelectedItems, ElementName=DirectoryTreeView}"
                            ToolTip="{sd:Localize Rename the selected folder or package, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
                            <Image Source="{StaticResource ImageRename}" />
                          </Button>
                          <Button Command="{Binding Session.DeleteSelectedSolutionItemsCommand}"
                            ToolTip="{sd:Localize Delete the selected items, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
                            <Image Source="{StaticResource ImageDelete}" />
                          </Button>
                          <Separator/>
                          <Button Command="{x:Static sd:SessionExplorerHelper.ExpandAssetFolders}" CommandTarget="{Binding ElementName=DirectoryTreeView}"
                            ToolTip="{sd:Localize Expand all asset folders, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
                            <Image Source="{StaticResource ImageExpandAssetFolders}" />
                          </Button>
                          <Button Command="{x:Static sd:SessionExplorerHelper.ExpandAllFolders}" CommandTarget="{Binding ElementName=DirectoryTreeView}"
                            ToolTip="{sd:Localize Expand all, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
                            <Image Source="{StaticResource ImageExpandAllFolders}" />
                          </Button>
                          <Button Command="{x:Static sd:SessionExplorerHelper.CollapseAllFolders}" CommandTarget="{Binding ElementName=DirectoryTreeView}"
                            ToolTip="{sd:Localize Collapse all, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
                            <Image Source="{StaticResource ImageCollapseAllFolders}" />
                          </Button>
                          <Separator/>
                          <Button Command="{Binding Session.ExploreCommand}" CommandParameter="{Binding SelectedItems, ElementName=DirectoryTreeView}"
                            ToolTip="{sd:Localize Show in Explorer, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Status}" ToolTipService.ShowOnDisabled="True">
                            <Image Source="{StaticResource ImageExplore}" />
                          </Button>
                        </ToolBar>
                      </ToolBarTray>
                      <!-- TODO: SearchText -->
                      <sd:TreeView x:Name="DirectoryTreeView" ItemsSource="{Binding Session.PackageCategories.Values}" AllowDrop="True" IsVirtualizing="False">
                        <sd:TreeView.Resources>
                          <ContextMenu x:Key="ContextMenu">
                            <MenuItem Header="{sd:Localize Folder, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}" Visibility="{Binding Session.NewDirectoryCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>
                            <MenuItem Header="{sd:Localize Create folder, Context=Menu}" Command="{Binding Session.NewDirectoryCommand}" CommandParameter="{Binding Session.ActiveAssetView.SelectedLocations}" Icon="{sd:Image {StaticResource ImageNewFolder}}" Visibility="{Binding Session.NewDirectoryCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>

                            <MenuItem Header="{sd:Localize Package, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}" Visibility="{sd:MultiBinding {Binding Session.IsUpdatePackageEnabled}, {Binding Session.AddExistingProjectCommand.IsEnabled}, {Binding Session.AddDependencyCommand.IsEnabled}, {Binding Session.SetCurrentProjectCommand.IsEnabled}, Converter={sd:MultiChained {sd:OrMultiConverter}, {sd:VisibleOrCollapsed}}}"/>
                            <MenuItem Header="{sd:Localize Update package, Context=Menu}" ItemsSource="{Binding Session.UpdatePackageViewModel.Templates}" Icon="{sd:Image {StaticResource ImageAddNewProject}}" Visibility="{Binding Session.IsUpdatePackageEnabled, Converter={sd:VisibleOrCollapsed}}">
                              <MenuItem.ItemContainerStyle>
                                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}" d:DataContext="{d:DesignInstance viewModels1:TemplateDescriptionViewModel}">
                                  <Setter Property="Command" Value="{Binding UpdatePackageCommand}"/>
                                </Style>
                              </MenuItem.ItemContainerStyle>
                              <MenuItem.ItemTemplate>
                                <DataTemplate DataType="viewModels1:TemplateDescriptionViewModel">
                                  <DockPanel Width="384">
                                    <Image Source="{Binding Icon}" DockPanel.Dock="Left" Width="48" Height="48" Margin="2"/>
                                    <DockPanel Margin="18,0">
                                      <TextBlock DockPanel.Dock="Top" FontSize="16" Text="{Binding Name}"/>
                                      <TextBlock Text="{Binding Description}" TextWrapping="Wrap" TextTrimming="WordEllipsis"/>
                                    </DockPanel>
                                  </DockPanel>
                                </DataTemplate>
                              </MenuItem.ItemTemplate>
                            </MenuItem>
                            <MenuItem Header="{sd:Localize Add dependency..., Context=Menu}" Command="{Binding Session.AddDependencyCommand}" Icon="{sd:Image {StaticResource ImageAddDependency}}" Visibility="{Binding Session.AddDependencyCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>
                            <MenuItem Header="{sd:Localize Set as current project, Context=Menu}" Command="{Binding Session.SetCurrentProjectCommand}" CommandParameter="{Binding}" Icon="{sd:Image {StaticResource ImageStartupProject}}" Visibility="{Binding Session.SetCurrentProjectCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>
                            <MenuItem Header="{sd:Localize Package properties, Context=Menu}" Command="{Binding Session.ActivatePackagePropertiesCommand}" Icon="{sd:Image {StaticResource ImagePackageProperties}}" Visibility="{Binding Session.ActivatePackagePropertiesCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>

                            <MenuItem Header="{sd:Localize Solution, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}" Visibility="{sd:MultiBinding {Binding Session.NewPackageCommand.IsEnabled}, {Binding Session.AddExistingPackageCommand.IsEnabled}, {Binding Session.OpenInIDECommand.IsEnabled}, Converter={sd:MultiChained {sd:OrMultiConverter}, {sd:VisibleOrCollapsed}}}"/>
                            <MenuItem Header="{sd:Localize New project..., Context=Menu}" Command="{Binding Session.NewProjectCommand}" Icon="{sd:Image {StaticResource ImageAddNewPackage}}" Visibility="{Binding Session.NewProjectCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>
                            <MenuItem Header="{sd:Localize Add existing project..., Context=Menu}" Command="{Binding Session.AddExistingProjectCommand}" Icon="{sd:Image {StaticResource ImageAddExistingProject}}" Visibility="{Binding Session.AddExistingProjectCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>
                            <MenuItem Header="{sd:Localize Open in IDE, Context=Menu}" Command="{Binding Session.OpenInIDECommand}" Icon="{sd:Image {StaticResource ImageVisualStudio}}" Visibility="{Binding Session.OpenInIDECommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>

                            <MenuItem Header="{sd:Localize Actions, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}"/>
                            <MenuItem Header="{sd:Localize Cut, Context=Menu}" Command="ApplicationCommands.Cut" CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Icon="{sd:Image {StaticResource ImageCut}}"/>
                            <MenuItem Header="{sd:Localize Copy, Context=Menu}" Command="ApplicationCommands.Copy" CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Icon="{sd:Image {StaticResource ImageCopy}}"/>
                            <MenuItem Header="{sd:Localize Paste, Context=Menu}" Command="ApplicationCommands.Paste" CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Icon="{sd:Image {StaticResource ImagePaste}}"/>
                            <MenuItem Header="{sd:Localize Delete, Context=Menu}" Command="ApplicationCommands.Delete" CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Icon="{sd:Image {StaticResource ImageDelete}}"/>
                            <MenuItem Header="{sd:Localize Rename, Context=Menu}" Command="{Binding Session.RenameDirectoryOrPackageCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}}" CommandParameter="{Binding Session.ActiveAssetView.SelectedLocations}" Icon="{sd:Image {StaticResource ImageRename}}" Visibility="{Binding Session.RenameDirectoryOrPackageCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}" InputGestureText="F2"/>

                            <MenuItem Header="{sd:Localize Asset, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}" Visibility="{Binding Session.NewDirectoryCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>
                            <MenuItem Header="{sd:Localize Add asset..., Context=Menu}" Command="{Binding Session.ActiveAssetView.ShowAddAssetDialogCommand}" InputGestureText="{x:Static strings:KeyGestures.AddAsset}" Icon="{sd:Image {StaticResource ImageNewAsset}}" Visibility="{Binding Session.NewDirectoryCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>

                            <MenuItem Header="{sd:Localize Explore, Context=Menu}" Style="{StaticResource MenuGroupSeparatorStyle}" Visibility="{Binding Session.ExploreCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>
                            <MenuItem Header="{sd:Localize Show in Explorer, Context=Menu}" Command="{Binding Session.ExploreCommand}" CommandParameter="{Binding}" Icon="{sd:Image {StaticResource ImageExplore}}" Visibility="{Binding Session.ExploreCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}}"/>

                          </ContextMenu>
                        </sd:TreeView.Resources>
                        <i:Interaction.Behaviors>
                          <sd:DragOverAutoScrollBehavior/>
                          <sd:TreeViewAutoExpandBehavior/>
                          <sd:TreeViewDragDropBehavior DragVisualTemplate="{StaticResource DragVisualTemplate}"/>
                          <sd:TreeViewBindableSelectedItemsBehavior SelectedItems="{Binding Session.ActiveAssetView.SelectedLocations}"/>
                          <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Cut" Command="{Binding Session.ActiveAssetView.CutLocationsCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
                          <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Copy" Command="{Binding Session.ActiveAssetView.CopyLocationsCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
                          <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Paste" Command="{Binding Session.ActiveAssetView.PasteCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
                          <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Delete" Command="{Binding Session.DeleteSelectedSolutionItemsCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
                        </i:Interaction.Behaviors>
                        <sd:TreeView.ItemContainerStyle>
                          <Style TargetType="{x:Type sd:TreeViewItem}" BasedOn="{StaticResource {x:Type sd:TreeViewItem}}">
                            <Setter Property="IsExpanded" Value="{Binding Mode=OneTime, Converter={sd:AssetToExpandedAtInitialization}}"/>
                            <Setter Property="IsEditable" Value="{Binding IsEditable, Mode=OneTime}" d:DataContext="{d:DesignInstance sd:IIsEditableViewModel}"/>
                            <Setter Property="IsEditing" Value="{Binding IsEditing, Mode=TwoWay}" d:DataContext="{d:DesignInstance sd:IIsEditableViewModel}"/>
                            <Setter Property="ContextMenu" Value="{StaticResource ContextMenu}"/>
                            <Setter Property="TemplateSelectorEdit" Value="{StaticResource SolutionTreeViewEditTemplate}"/>
                            <Setter Property="sd:Interaction.Behaviors">
                              <Setter.Value>
                                <sd:BehaviorCollection>
                                  <sd:TreeViewStopEditOnLostFocusBehavior/>
                                </sd:BehaviorCollection>
                              </Setter.Value>
                            </Setter>
                          </Style>
                        </sd:TreeView.ItemContainerStyle>
                        <sd:TreeView.ItemTemplate>
                          <HierarchicalDataTemplate ItemsSource="{Binding Content}" ItemTemplateSelector="{StaticResource SolutionTreeViewTemplate}">
                            <TextBlock Text="{Binding Name}"/>
                          </HierarchicalDataTemplate>
                        </sd:TreeView.ItemTemplate>
                      </sd:TreeView>
                    </DockPanel>
                  </xcad:LayoutAnchorable>
                </xcad:LayoutAnchorablePane>
                <xcad:LayoutDocumentPane>
                  <!-- ASSET VIEW -->
                  <xcad:LayoutAnchorable AutoHideMinWidth="300" ContentId="AssetView" Title="{Binding Source={sd:Localize Asset view, Context=View}}"
                                           gs:AvalonDockHelper.IsVisible="{Binding Panels.AssetViewPanelVisible, Mode=TwoWay,
                                           Source={x:Static gs:GameStudioViewModel.GameStudio}, FallbackValue={sd:True}}">
                    <sd:AssetViewUserControl AssetCollection="{Binding Session.ActiveAssetView}" AssetContextMenu="{StaticResource AssetContextMenu}"
                                           AssetDoubleClick="{Binding Session.EditSelectedContentCommand}">
                      <i:Interaction.Behaviors>
                        <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Cut" Command="{Binding Session.ActiveAssetView.CutContentCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
                        <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Copy" Command="{Binding Session.ActiveAssetView.CopyContentCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
                        <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Paste" Command="{Binding Session.ActiveAssetView.PasteCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
                        <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Delete" Command="{Binding Session.ActiveAssetView.DeleteContentCommand}"/>
                        <gs:ActivateParentPaneOnGotFocusBehavior/>
                      </i:Interaction.Behaviors>
                    </sd:AssetViewUserControl>
                    <i:Interaction.Behaviors>
                      <gs:LayoutAnchorableActivateOnLocationChangedBehavior Collection="{Binding Session.ActiveAssetView.SelectedLocations}" />
                    </i:Interaction.Behaviors>
                  </xcad:LayoutAnchorable>
                </xcad:LayoutDocumentPane>
              </xcad:LayoutPanel>
              <xcad:LayoutAnchorablePane DockHeight="200">
                <!-- REFERENCES -->
                <xcad:LayoutAnchorable AutoHideMinHeight="200" ContentId="References" Title="{Binding Source={sd:Localize References, Context=View}}"
                                       gs:AvalonDockHelper.IsVisible="{Binding Panels.ReferencesPanelVisible, Mode=TwoWay,
                                       Source={x:Static gs:GameStudioViewModel.GameStudio}, FallbackValue={sd:True}}">
                  <DockPanel LastChildFill="True" x:Name="RefViewDockPanel">
                    <!-- stats -->
                    <Border DockPanel.Dock="Bottom" Padding="10,5">
                      <TextBlock Text="{Binding Session.References.TypeCountersAsText}" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap">
                        <TextBlock.ToolTip>
                          <TextBlock Text="{Binding Session.References.TypeCountersAsText}" TextTrimming="None" TextWrapping="Wrap" />
                        </TextBlock.ToolTip>
                      </TextBlock>
                    </Border>
                    <!-- view -->
                    <sd:AssetViewUserControl AssetCollection="{Binding Session.References.DisplayedReferences}" AssetContextMenu="{StaticResource AssetContextMenu}" GiveFocusOnSelectionChange="False"
                                               CanEditAssets="False" CanAddAssets="False" CanDeleteAssets="False" CanRecursivelyDisplayAssets="False" TileThumbnailSize="64" AssetDoubleClick="{Binding Session.ActiveAssetView.SelectAssetCommand}"
                                               BorderThickness="0">
                      <sd:AssetViewUserControl.PrimaryToolBarItems>
                        <ToggleButton IsChecked="{Binding Session.References.ShowReferencers, Converter={sd:InvertBool}}" Content="{sd:Localize References}" MinWidth="80"/>
                        <ToggleButton IsChecked="{Binding Session.References.ShowReferencers}" Content="{sd:Localize Referenced by}" MinWidth="80"/>
                      </sd:AssetViewUserControl.PrimaryToolBarItems>
                      <i:Interaction.Behaviors>
                        <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Cut" Command="{Binding Session.References.DisplayedReferences.CutContentCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
                        <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Copy" Command="{Binding Session.References.DisplayedReferences.CopyContentCommand, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
                      </i:Interaction.Behaviors>
                    </sd:AssetViewUserControl>
                  </DockPanel>
                </xcad:LayoutAnchorable>
                <!-- ASSET LOG -->
                <xcad:LayoutAnchorable AutoHideMinHeight="200" ContentId="AssetLog"
                                       Title="{sd:Localize Asset error ({0}), Plural=Asset errors ({0}), Count={Binding Session.AssetLog.ErrorCount, Source={x:Static gs:GameStudioViewModel.GameStudio}}, IsStringFormat=True, Context=View}"
                                       gs:AvalonDockHelper.IsVisible="{Binding Panels.AssetLogPanelVisible, Mode=TwoWay,
                                       Source={x:Static gs:GameStudioViewModel.GameStudio}, FallbackValue={sd:True}}">
                  <sd:GridLogViewer LogMessages="{Binding Session.AssetLog.FilteredMessages}" Session="{Binding Session}" ShowDebugMessages="False" ShowVerboseMessages="False" ShowInfoMessages="False"/>
                </xcad:LayoutAnchorable>
                <!-- BUILD LOG -->
                <xcad:LayoutAnchorable AutoHideMinHeight="200" ContentId="BuildLog" Title="{Binding Debugging.OutputTitle, Source={x:Static gs:GameStudioViewModel.GameStudio}}"
                                       gs:AvalonDockHelper.IsVisible="{Binding Panels.BuildLogPanelVisible, Mode=TwoWay,
                                       Source={x:Static gs:GameStudioViewModel.GameStudio}, FallbackValue={sd:True}}">
                  <TabControl x:Name="LogTabControl">
                    <TabItem DataContext="{Binding Debugging.BuildLog}">
                      <TabItem.Header>
                        <TextBlock FontWeight="{Binding HasNewMessages, Mode=OneWay, Converter={sd:BoolToParam},
                                    ConverterParameter={x:Static FontWeights.Bold}, FallbackValue={x:Static FontWeights.Normal}}"
                                   Foreground="{StaticResource SelectedTextBrush}">
                                    <Run Text="{sd:Localize Build}"/>
                                    <Run Text="{Binding HasNewMessages, Mode=OneWay, Converter={sd:BoolToParam}, ConverterParameter=*}"/>
                        </TextBlock>
                      </TabItem.Header>
                      <sd:TextLogViewer LogMessages="{Binding Messages}" ShowDebugMessages="False" ShowVerboseMessages="False" ShowInfoMessages="True"/>
                      <i:Interaction.Behaviors>
                        <sd:TabItemActivateOnLogBehavior MinimumLevel="Error" Collection="{Binding Messages}"/>
                      </i:Interaction.Behaviors>
                    </TabItem>
                    <!-- FIXME live scripting is disabled (XK-4309) -->
                    <TabItem DataContext="{Binding Debugging.LiveScriptingLog}" Visibility="Collapsed">
                      <TabItem.Header>
                        <TextBlock FontWeight="{Binding HasNewMessages, Mode=OneWay, Converter={sd:BoolToParam},
                                    ConverterParameter={x:Static FontWeights.Bold}, FallbackValue={x:Static FontWeights.Normal}}"
                                   Foreground="{StaticResource SelectedTextBrush}">
                                    <Run Text="{sd:Localize Live-scripting}"/>
                                    <Run Text="{Binding HasNewMessages, Mode=OneWay, Converter={sd:BoolToParam}, ConverterParameter=*}"/>
                        </TextBlock>
                      </TabItem.Header>
                      <sd:TextLogViewer LogMessages="{Binding Messages}" ShowDebugMessages="False" ShowVerboseMessages="False" ShowInfoMessages="True"/>
                      <i:Interaction.Behaviors>
                        <sd:TabItemActivateOnLogBehavior MinimumLevel="Error" Collection="{Binding Messages}"/>
                      </i:Interaction.Behaviors>
                    </TabItem>
                    <i:Interaction.Behaviors>
                      <sd:OnEventCommandBehavior Command="{Binding SelectedItem.DataContext.ClearNewMessageFlagCommand, ElementName=LogTabControl}" EventName="SelectionChanged"/>
                    </i:Interaction.Behaviors>
                  </TabControl>
                  <i:Interaction.Behaviors>
                    <sd:OnEventCommandBehavior Command="{Binding Debugging.ResetOutputTitleCommand, Source={x:Static gs:GameStudioViewModel.GameStudio}}" EventName="IsActiveChanged"/>
                    <gs:LayoutAnchorableActivateOnLogBehavior MinimumLevel="Error" Collection="{Binding Debugging.BuildLog.Messages, Source={x:Static gs:GameStudioViewModel.GameStudio}}"/>
                    <gs:LayoutAnchorableActivateOnLogBehavior MinimumLevel="Error" Collection="{Binding Debugging.LiveScriptingLog.Messages, Source={x:Static gs:GameStudioViewModel.GameStudio}}"/>
                  </i:Interaction.Behaviors>
                </xcad:LayoutAnchorable>
              </xcad:LayoutAnchorablePane>
            </xcad:LayoutPanel>
            <xcad:LayoutAnchorablePaneGroup Orientation="Vertical" DockWidth="400">
              <xcad:LayoutAnchorablePane DockHeight="2*">
                <!-- PROPERTY GRID -->
                <xcad:LayoutAnchorable AutoHideMinWidth="400" ContentId="PropertyGrid" Title="{Binding Source={sd:Localize Property grid, Context=View}}"
                                       gs:AvalonDockHelper.IsVisible="{Binding Panels.PropertyGridPanelVisible, Mode=TwoWay,
                                       Source={x:Static gs:GameStudioViewModel.GameStudio}, FallbackValue={sd:True}}">
                  <Grid Background="{StaticResource ToolBarBackgroundBrush}">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="*"/>
                      <RowDefinition Height="5"/>
                      <RowDefinition Height="70"/>
                    </Grid.RowDefinitions>
                    <DockPanel Margin="6,6,6,2">
                      <!-- Adding tag -->
                      <sd:TextBox MinWidth="90" DockPanel.Dock="Right" ValidateOnLostFocus="False" WatermarkContent="{sd:Localize Add new tag}" x:Name="NewTagTextBox"  Visibility="{Binding Session.ActiveAssetView.SelectedAssets.Count, Converter={sd:Chained {sd:NumericToBool}, {sd:VisibleOrCollapsed}}}">
                        <i:Interaction.Behaviors>
                          <sd:OnEventCommandBehavior EventName="Validated" Command="{Binding Session.AssetTags.AddTagCommand}" CommandParameter="{Binding Text, ElementName=NewTagTextBox}"/>
                          <sd:OnEventCommandBehavior EventName="Validated" Command="{x:Static sd:TextBox.ClearTextCommand}"/>
                        </i:Interaction.Behaviors>
                      </sd:TextBox>
                      <!-- Navigation -->
                      <StackPanel DockPanel.Dock="Left" Orientation="Horizontal" Margin="0,0,6,0" VerticalAlignment="Center">
                        <Button Content="{sd:Image {StaticResource ImagePrevious}, 16, 16, HighQuality}" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
                            Command="{Binding Session.PreviousSelectionCommand}"
                            ToolTip="{sd:Localize Previous selection, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True" />
                        <Button Content="{sd:Image {StaticResource ImageNext}, 16, 16, HighQuality}" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
                            Command="{Binding Session.NextSelectionCommand}"
                            ToolTip="{sd:Localize Next selection, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True" />
                      </StackPanel>
                      <!-- Description -->
                      <TextBlock TextTrimming="CharacterEllipsis" VerticalAlignment="Center">
                        <Run Text="{Binding Session.ActiveProperties.TypeDescription, Mode=OneWay}" FontWeight="Bold"/>
                        <Run Text="{Binding Session.ActiveProperties.Name, Mode=OneWay}"/>
                      </TextBlock>
                    </DockPanel>
                    <!--  TAGS  -->
                    <ToolBar Grid.Row="1" Margin="6,2" ItemsSource="{Binding Session.AssetTags.Tags}" HorizontalAlignment="Stretch" Visibility="{Binding Session.AssetTags.Tags.Count, Converter={sd:Chained {sd:NumericToBool}, {sd:VisibleOrCollapsed}}}"
                             Style="{StaticResource TagToolBarStyle}">
                      <ToolBar.ItemTemplate>
                        <DataTemplate>
                          <sd:TagControl Height="20" Margin="2" ToolTip="{Binding Name}" Visibility="{Binding Assets.Count, Converter={sd:Chained {sd:NumericToBool}, {sd:VisibleOrCollapsed}}}"
                                       VerticalAlignment="Center" CloseTagCommand="{Binding RemoveTagCommand}">
                            <StackPanel Orientation="Horizontal">
                              <TextBlock Margin="2,0" Text="{Binding Name}" TextTrimming="CharacterEllipsis" MaxWidth="100" VerticalAlignment="Center" />
                              <TextBlock Text="{Binding Counter}" Cursor="Hand" IsEnabled="{Binding Counter, Converter={sd:Chained {sd:StringEquals}, {sd:InvertBool}, Parameter1={} (all)}}"
                                         ToolTip="{sd:Localize Add tag to all, Context=ToolTip}">
                            <i:Interaction.Behaviors>
                              <sd:OnEventCommandBehavior EventName="MouseDown" Command="{Binding AddTagToAllCommand}"/>
                            </i:Interaction.Behaviors>
                              </TextBlock>
                            </StackPanel>
                          </sd:TagControl>
                        </DataTemplate>
                      </ToolBar.ItemTemplate>
                    </ToolBar>

                    <DockPanel Grid.Row="3" Margin="6,2">
                      <Button Command="{Binding Session.EditSelectedContentCommand}" DockPanel.Dock="Top" HorizontalContentAlignment="Center" Margin="0,0,0,8"
                              Visibility="{Binding Session.EditSelectedContentCommand.IsEnabled, Converter={sd:VisibleOrCollapsed}, FallbackValue={sd:Collapsed}}">
                        <Grid>
                          <DockPanel Visibility="{Binding Session.ActiveProperties.CanDisplayProperties, Converter={sd:VisibleOrCollapsed}}">
                            <Image Source="{StaticResource ImageEditAsset}" Margin="4" DockPanel.Dock="Left" Width="24" Height="24" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                            <TextBlock Text="{sd:Localize Open this asset in editor}" Margin="0,4,4,4" VerticalAlignment="Center" />
                          </DockPanel>
                          <TextBlock Text="{sd:Localize Show this asset in editor}" Margin="0,4,4,4" VerticalAlignment="Center"
                                     Visibility="{Binding Session.ActiveProperties.CanDisplayProperties, Converter={sd:Chained {sd:InvertBool}, {sd:VisibleOrCollapsed}}}" />
                        </Grid>
                      </Button>
                      <DockPanel Visibility="{Binding Session.ActiveProperties.CanDisplayProperties, Converter={sd:VisibleOrCollapsed}}">
                        <!-- TODO: Disabling this button for now, it is relatively terrible in term of UX -->
                        <ToggleButton Margin="4,0" Height="22" Width="22" Content="{sd:Image {StaticResource ImageAssetOverride}, 16, 16}"
                                      IsChecked="{Binding Session.ActiveProperties.ShowOverridesOnly}" ToolTip="{sd:Localize Display only overridden properties, Context=ToolTip}"
                                      Visibility="Collapsed"/>
                        <AdornerDecorator>
                          <sd:TextBox UseTimedValidation="True" x:Name="PropertyFilterTextBox" WatermarkContent="{sd:Localize Search properties}">
                            <i:Interaction.Behaviors>
                              <sd:ContainTextAdornerBehavior />
                            </i:Interaction.Behaviors>
                          </sd:TextBox>
                        </AdornerDecorator>
                      </DockPanel>
                    </DockPanel>

                    <TextBlock Grid.Row="4" Text="{Binding Session.ActiveProperties.FallbackMessage}" HorizontalAlignment="Center" VerticalAlignment="Center"
                           Visibility="{Binding Session.ActiveProperties.CanDisplayProperties, Converter={sd:Chained {sd:InvertBool}, {sd:VisibleOrCollapsed}}}"/>
                    <sd:PropertyView x:Name="AssetPropertyView" Grid.Row="4"
                                       ItemsSource="{Binding Session.ActiveProperties.ViewModel.RootNode.Children}"
                                       Visibility="{Binding Session.ActiveProperties.CanDisplayProperties, Converter={sd:VisibleOrCollapsed}}">
                      <sd:PropertyView.Resources>
                        <RoutedUICommand x:Key="ReplaceCommand" Text="Replace">
                          <RoutedUICommand.InputGestures>
                            <KeyGesture>Ctrl+Shift+V</KeyGesture>
                          </RoutedUICommand.InputGestures>
                        </RoutedUICommand>
                      </sd:PropertyView.Resources>
                      <sd:PropertyView.ItemContainerStyle>
                        <Style BasedOn="{StaticResource {x:Type sd:PropertyViewItem}}" TargetType="sd:PropertyViewItem">
                          <Setter Property="Background" Value="Transparent"/>
                          <Setter Property="ContextMenu">
                            <Setter.Value>
                              <ContextMenu Visibility="{Binding HasItems, RelativeSource={RelativeSource Self}, Converter={sd:VisibleOrHidden}, FallbackValue={sd:Hidden}}">
                                <MenuItem Header="{sd:Localize Reset to base value, Context=Menu}" Command="{Binding ResetOverride, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"
                                          IsEnabled="{Binding HasBase}"/>
                                <Separator />
                                <MenuItem Icon="{sd:Image {StaticResource ImageCopy}}"
                                          Command="ApplicationCommands.Copy" CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}}"/>
                                <MenuItem Icon="{sd:Image {StaticResource ImagePaste}}"
                                          Command="ApplicationCommands.Paste" CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}}" />
                                <MenuItem Icon="{sd:Image {StaticResource ImagePaste}}"
                                          Visibility="{Binding HasCommand_ReplaceProperty, Converter={sd:VisibleOrCollapsed}, FallbackValue={sd:Collapsed}}"
                                          Command="{StaticResource ReplaceCommand}" CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}}"/>
                              </ContextMenu>
                            </Setter.Value>
                          </Setter>
                          <Setter Property="HeaderTemplate">
                            <Setter.Value>
                              <HierarchicalDataTemplate ItemsSource="{Binding Children, Mode=OneWay}" DataType="viewModels:NodeViewModel">
                                <ContentPresenter Content="{Binding}" ContentTemplateSelector="{x:Static sd:PropertyViewHelper.HeaderProviders}"/>
                              </HierarchicalDataTemplate>
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Template">
                            <Setter.Value>
                              <ControlTemplate TargetType="sd:PropertyViewItem">
                                <Border BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" SnapsToDevicePixels="True"
                                        Visibility="{Binding IsVisible, Converter={sd:VisibleOrCollapsed}}" d:DataContext="{d:DesignInstance viewModels:NodeViewModel}">
                                  <DockPanel>
                                    <Border DockPanel.Dock="Top" Background="{TemplateBinding Background}">
                                      <ContentPresenter ContentSource="Header" Name="PART_Header"
                                                        Content="{TemplateBinding HeaderedContentControl.Header}"
                                                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                        ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                        ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                                        Visibility="{sd:MultiBinding {Binding DataContext.Session.ActiveProperties.ShowOverridesOnly, Converter={sd:InvertBool}, RelativeSource={RelativeSource AncestorType=sd:PropertyView}},
                                                                                       {Binding IsOverridden},
                                                                                       {Binding HasBase, Converter={sd:InvertBool}},
                                                                                       Converter={sd:MultiChained {sd:OrMultiConverter}, {sd:VisibleOrCollapsed}}}"/>
                                    </Border>
                                    <Expander x:Name="propertyExpander" IsExpanded="{TemplateBinding IsExpanded}" Style="{StaticResource PropertyExpanderStyle}" IsEnabled="True">
                                      <StackPanel>
                                        <ItemsPresenter Name="ItemsHost"/>
                                        <Border Background="{TemplateBinding Background}">
                                          <ContentPresenter Name="PART_Footer"
                                                            Content="{TemplateBinding HeaderedContentControl.Header}"
                                                            ContentTemplateSelector="{x:Static sd:PropertyViewHelper.FooterProviders}"
                                                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                                            Visibility="{sd:MultiBinding {Binding DataContext.Session.ActiveProperties.ShowOverridesOnly, Converter={sd:InvertBool}, RelativeSource={RelativeSource AncestorType=sd:PropertyView}},
                                                                                           {Binding IsOverridden},
                                                                                           {Binding HasBase, Converter={sd:InvertBool}},
                                                                                           Converter={sd:MultiChained {sd:OrMultiConverter}, {sd:VisibleOrCollapsed}}}"/>
                                        </Border>
                                      </StackPanel>
                                    </Expander>
                                  </DockPanel>
                                </Border>
                              </ControlTemplate>
                            </Setter.Value>
                          </Setter>
                          <Setter Property="sd:Interaction.Behaviors">
                            <Setter.Value>
                              <sd:BehaviorCollection>
                                <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Copy" ContinueRouting="False" Command="{Binding CopyProperty, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
                                <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Paste" ContinueRouting="False" Command="{Binding PasteProperty, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}"/>
                                <sd:CommandBindingBehavior RoutedCommand="{StaticResource ReplaceCommand}" ContinueRouting="False" Command="{Binding ReplaceProperty, FallbackValue={x:Static sd:DisabledCommand.Instance}, Mode=OneWay}" />
                                <sd:PropertyViewFilteringBehavior FilterToken="{Binding Text, ElementName=PropertyFilterTextBox, Mode=OneWay}"/>
                                <sd:PropertyViewItemDragDropBehavior CanDrop="False" CanDrag="False" CanInsert="True"/>
                              </sd:BehaviorCollection>
                            </Setter.Value>
                          </Setter>
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding Documentation, FallbackValue={x:Null}}" Value="{x:Null}">
                              <Setter Property="Highlightable" Value="False"/>
                            </DataTrigger>
                            <Trigger Property="IsHovered" Value="True">
                              <Setter Property="Background" Value="{StaticResource PropertyGridItemHoverBrush}"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                              <Setter Property="Background" Value="{StaticResource NormalBrush}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardActive" Value="True">
                              <Setter Property="Background" Value="{StaticResource NormalBrush}"/>
                            </Trigger>
                          </Style.Triggers>
                          <Style.Resources>
                            <Style TargetType="{x:Type sd:TextBox}" BasedOn="{StaticResource {x:Type sd:TextBox}}">
                              <Setter Property="ToolTip" Value="{Binding Text, RelativeSource={RelativeSource Self}}" />
                              <Setter Property="ToolTipService.IsEnabled" Value="{Binding Text, RelativeSource={RelativeSource Self}, Converter={sd:Chained {sd:EmptyStringToBool}, {sd:InvertBool}, Parameter1={sd:True}}}" />
                            </Style>
                          </Style.Resources>
                        </Style>
                      </sd:PropertyView.ItemContainerStyle>
                      <i:Interaction.Behaviors>
                        <sd:PropertyViewDragDropBehavior Target="{Binding Session.ActiveProperties.ViewModel}" CanDrag="False" CanDrop="True" CanInsert="False" />
                        <sd:PropertyViewFilteringBehavior FilterToken="{Binding Text, ElementName=PropertyFilterTextBox, Mode=OneWay}"/>
                        <sd:PropertyViewAutoExpandNodesBehavior ViewModel="{Binding Session.ActiveProperties.ViewModel, Mode=OneWay}"/>
                      </i:Interaction.Behaviors>
                    </sd:PropertyView>

                    <GridSplitter Grid.Row="5" HorizontalAlignment="Stretch" Height="5" ResizeBehavior="PreviousAndNext"/>

                    <Border Grid.Row="6" Background="{StaticResource ToolBarBackgroundBrush}">
                      <DockPanel>
                        <TextBlock Margin="4" DockPanel.Dock="Top" FontWeight="Bold" Text="{Binding HoveredItem.DataContext.DisplayName, ElementName=AssetPropertyView}" TextTrimming="CharacterEllipsis"/>
                        <TextBlock Margin="4" Text="{Binding HoveredItem.DataContext.Documentation, ElementName=AssetPropertyView}" TextWrapping="Wrap" TextTrimming="WordEllipsis"/>
                      </DockPanel>
                    </Border>
                  </Grid>
                </xcad:LayoutAnchorable>
              </xcad:LayoutAnchorablePane>
              <xcad:LayoutAnchorablePaneGroup DockHeight="1*">
                <xcad:LayoutAnchorablePane>
                  <!-- ASSET PREVIEW -->
                  <xcad:LayoutAnchorable AutoHideMinWidth="400" ContentId="AssetPreview" Title="{Binding Source={sd:Localize Asset preview, Context=View}}"
                                         gs:AvalonDockHelper.IsVisible="{Binding Panels.AssetPreviewPanelVisible, Mode=TwoWay,
                                         Source={x:Static gs:GameStudioViewModel.GameStudio}, FallbackValue={sd:True}}">
                    <DockPanel LastChildFill="True">
                      <ContentPresenter Content="{Binding Preview.PreviewObject}"/>
                    </DockPanel>
                  </xcad:LayoutAnchorable>
                  <!-- ACTION HISTORY -->
                  <xcad:LayoutAnchorable AutoHideMinWidth="400" ContentId="ActionHistory" Title="{Binding Source={sd:Localize Edit history, Context=View}}"
                                         gs:AvalonDockHelper.IsVisible="{Binding Panels.ActionHistoryPanelVisible, Mode=TwoWay,
                                         Source={x:Static gs:GameStudioViewModel.GameStudio}, FallbackValue={sd:True}}">
                    <ListBox ItemsSource="{Binding Session.ActionHistory.Transactions}" HorizontalContentAlignment="Stretch">
                      <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                          <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        </Style>
                      </ListBox.ItemContainerStyle>
                      <ListBox.ItemTemplate>
                        <DataTemplate>
                          <DockPanel HorizontalAlignment="Stretch">
                            <TextBlock DockPanel.Dock="Left" x:Name="txt" Text="{Binding Name, Mode=OneWay}"/>
                            <Image DockPanel.Dock="Right" x:Name="img" Source="{StaticResource ImageSave}" HorizontalAlignment="Right" Visibility="Hidden"/>
                          </DockPanel>
                          <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding IsDone, Mode=OneWay}" Value="False">
                              <Setter TargetName="txt" Property="Foreground" Value="{DynamicResource PressedBrush}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsSavePoint, Mode=OneWay}" Value="True">
                              <Setter TargetName="img" Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                          </DataTemplate.Triggers>
                        </DataTemplate>
                      </ListBox.ItemTemplate>
                    </ListBox>
                  </xcad:LayoutAnchorable>
                </xcad:LayoutAnchorablePane>
              </xcad:LayoutAnchorablePaneGroup>
            </xcad:LayoutAnchorablePaneGroup>
          </xcad:LayoutPanel>
        </xcad:LayoutRoot>
      </xcad:DockingManager>
      <StatusBar Grid.Row="2" Background="#007ACC" Visibility="{Binding Session, Converter={sd:Chained {sd:ObjectToBool}, {sd:VisibleOrCollapsed}}}">
        <StatusBar.Resources>
          <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
            <Setter Property="Foreground" Value="{StaticResource SelectedTextBrush}"/>
          </Style>
          <Style x:Key="StatusBarSeparatorStyle" TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Type Separator}}">
            <Setter Property="Background" Value="{StaticResource SelectedTextBrush}"/>
            <Setter Property="Opacity" Value="0.25"/>
          </Style>
        </StatusBar.Resources>
        <StatusBar.ItemsPanel>
          <ItemsPanelTemplate>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="100"/>
              </Grid.ColumnDefinitions>
            </Grid>
          </ItemsPanelTemplate>
        </StatusBar.ItemsPanel>
        <StatusBarItem Grid.Column="0">
          <TextBlock Margin="5,0" Text="{Binding Status.CurrentStatus}"/>
        </StatusBarItem>
        <Separator Grid.Column="1" Style="{StaticResource StatusBarSeparatorStyle}"/>
        <StatusBarItem Grid.Column="2">
          <TextBlock>
            <Run Text="{sd:Localize {}{0} item, Plural={}{0} items, Count={Binding Session.ActiveAssetView.FilteredContent.Count, Mode=OneWay}, IsStringFormat=True, Context=StatusBar}"/>
            <Run Text="{sd:Localize ({0} selected), Plural=({0} selected), Count={Binding Session.ActiveAssetView.SelectedContent.Count, Mode=OneWay}, IsStringFormat=True, Context=StatusBar}"/>
          </TextBlock>
        </StatusBarItem>
        <Separator Grid.Column="3" Style="{StaticResource StatusBarSeparatorStyle}"/>
        <StatusBarItem Grid.Column="4" HorizontalContentAlignment="Right">
          <TextBlock Margin="5,0" Text="{Binding Status.CurrentJob.Message}"/>
        </StatusBarItem>
        <StatusBarItem Grid.Column="5" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
          <ProgressBar Visibility="{Binding Status.CurrentJob, Converter={sd:Chained {sd:ObjectToBool}, {sd:VisibleOrCollapsed}}}"
                       IsIndeterminate="{Binding Status.CurrentJob.IsIndeterminate}" Maximum="{Binding Status.CurrentJob.Total}"
                       Value="{Binding Status.CurrentJob.Current}">
          </ProgressBar>
        </StatusBarItem>
      </StatusBar>
    </Grid>
  </Grid>
</Window>

