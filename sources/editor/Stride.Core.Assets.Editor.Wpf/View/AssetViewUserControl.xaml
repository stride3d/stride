<UserControl x:Class="Stride.Core.Assets.Editor.View.AssetViewUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:viewModel="clr-namespace:Stride.Core.Assets.Editor.ViewModel"
             xmlns:sd="http://schemas.stride3d.net/xaml/presentation"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:view="clr-namespace:Stride.Core.Assets.Editor.View"
             xmlns:controls="clr-namespace:Stride.Core.Assets.Editor.View.Controls"
             xmlns:behaviors="clr-namespace:Stride.Core.Assets.Editor.View.Behaviors"
             xmlns:cvt="clr-namespace:Stride.Core.Assets.Editor.View.ValueConverters"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:status="clr-namespace:Stride.Core.Assets.Editor.Components.Status.Views"
             xmlns:strings="clr-namespace:Stride.Core.Assets.Editor.Resources.Strings"
             xmlns:templateViews="clr-namespace:Stride.Core.Assets.Editor.Components.TemplateDescriptions.Views"
             xmlns:services="clr-namespace:Stride.Core.Assets.Editor.Services"
             mc:Ignorable="d" d:DataContext="{d:DesignInstance viewModel:AssetCollectionViewModel}" Focusable="True"
             d:DesignHeight="300" d:DesignWidth="300" x:Name="AssetView" BorderThickness="1" BorderBrush="{DynamicResource MenuBorderBrush}">
  <DockPanel x:Name="RootContainer">
    <FrameworkElement.Resources>
      <ResourceDictionary>
        <!-- MERGED DICTIONARIES: IMAGE DICTIONARY, PROPERTY GRID VIEWS -->
        <ResourceDictionary.MergedDictionaries>
          <ResourceDictionary Source="CommonResources.xaml"/>
        </ResourceDictionary.MergedDictionaries>

        <Style TargetType="controls:EditableContentListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}"/>

        <Style TargetType="controls:EditableContentListBox" BasedOn="{StaticResource {x:Type ListBox}}"/>

        <DataTemplate x:Key="AssetTileView">
          <DataTemplate.Resources>
            <DataTemplate x:Key="ItemTemplate" DataType="{x:Type viewModel:ISessionObjectViewModel}">
              <HeaderedContentControl SnapsToDevicePixels="True" ToolTipService.InitialShowDelay="1">
                <i:Interaction.Behaviors>
                  <sd:OnEventCommandBehavior EventName="MouseDoubleClick" Command="{Binding AssetDoubleClick, RelativeSource={RelativeSource AncestorType=view:AssetViewUserControl}}"
                                               CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType=controls:EditableContentListBox}}"/>
                </i:Interaction.Behaviors>
                <HeaderedContentControl.Header>
                  <Grid Background="Transparent">
                    <Border BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="2" CornerRadius="3" Margin="0,3,0,0">
                      <Image Source="{Binding ThumbnailData.Presenter, Mode=OneWay}" RenderOptions.BitmapScalingMode="Linear"
                             Width="{Binding TileThumbnailSize, RelativeSource={RelativeSource AncestorType=view:AssetViewUserControl}}"
                             Height="{Binding TileThumbnailSize, RelativeSource={RelativeSource AncestorType=view:AssetViewUserControl}}"/>
                    </Border>
                    <ProgressBar Width="32" Height="8"
                               IsIndeterminate="{Binding ThumbnailData, Mode=OneWay, Converter={sd:Chained {sd:ObjectToBool}, {sd:InvertBool}}}"
                               Visibility="{Binding ThumbnailData, Mode=OneWay, Converter={sd:Chained {sd:ObjectToBool}, {sd:InvertBool}, {sd:VisibleOrCollapsed}}, FallbackValue={sd:Collapsed}}"/>
                    <Border BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="2" CornerRadius="3" Background="{StaticResource NormalBrush}"
                          HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="{Binding Sources.NeedUpdateFromSource, Converter={sd:VisibleOrHidden}, FallbackValue={sd:Hidden}}" Margin="0,3,0,0">
                      <Button Style="{StaticResource ImageButtonStyle}" Command="{Binding Sources.UpdateFromSourceCommand}" Margin="0">
                        <Image Source="{StaticResource UpdateSelectedAssetsFromSource}" Width="12" Height="12" Margin="5"/>
                      </Button>
                    </Border>
                    <Button HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,3" Command="{Binding Dependencies.ToggleIsRootOnSelectedAssetCommand, FallbackValue={x:Null}}">
                      <Button.Style>
                        <Style TargetType="Button">
                          <Setter Property="Template">
                            <Setter.Value>
                              <ControlTemplate TargetType="Button">
                                <ContentPresenter ContentSource="Content"/>
                              </ControlTemplate>
                            </Setter.Value>
                          </Setter>
                        </Style>
                      </Button.Style>
                      <Grid Background="Transparent">
                        <Image Source="{StaticResource ImageAssetIsRoot}" Width="12" Height="12" Margin ="5" Visibility="{Binding Dependencies.IsRoot, Converter={sd:VisibleOrHidden}, FallbackValue={sd:Hidden}}"/>
                        <Image Source="{StaticResource ImageAssetIsIndirectlyIncluded}" Width="12" Height="12" Margin ="5" Visibility="{Binding Dependencies.IsIndirectlyIncluded, Converter={sd:VisibleOrHidden}, FallbackValue={sd:Hidden}}"/>
                        <Image Source="{StaticResource ImageAssetIsExcluded}" Width="12" Height="12" Margin ="5" Visibility="{Binding Dependencies.IsExcluded, Converter={sd:VisibleOrHidden}, FallbackValue={sd:Hidden}}"/>
                      </Grid>
                    </Button>
                  </Grid>
                </HeaderedContentControl.Header>
                <StackPanel Background="Transparent" Width="{Binding TileThumbnailSize, RelativeSource={RelativeSource AncestorType=view:AssetViewUserControl}}" Height="48">
                  <DockPanel HorizontalAlignment="Center" LastChildFill="False">
                    <TextBlock DockPanel.Dock="Right" Text="{Binding IsDirty, Converter={sd:BoolToParam}, ConverterParameter=*}" HorizontalAlignment="Center"
                               VerticalAlignment="Bottom" TextAlignment="Center" TextTrimming="CharacterEllipsis"/>
                    <TextBlock Text="{Binding Name, Converter={cvt:NameBreakingLine}}" TextAlignment="Center" TextTrimming="CharacterEllipsis" TextWrapping="Wrap" MaxHeight="32"/>
                  </DockPanel>
                  <TextBlock Text="{Binding TypeDisplayName}" HorizontalAlignment="Center" TextAlignment="Center" TextTrimming="CharacterEllipsis" FontSize="10" Opacity="0.5" />
                </StackPanel>
                <ToolTipService.ToolTip>
                  <ContentControl Content="{Binding}">
                    <FrameworkElement.Resources>
                      <!-- default template (fallback) -->
                      <DataTemplate DataType="{x:Type viewModel:SessionObjectViewModel}">
                        <StackPanel>
                          <TextBlock Text="{Binding Name, StringFormat={sd:Localize Name: {0}}}" FontWeight="Bold"/>
                          <TextBlock Text="{Binding TypeDisplayName, StringFormat={sd:Localize Type: {0}}}"/>
                        </StackPanel>
                      </DataTemplate>
                      <!-- asset -->
                      <DataTemplate DataType="{x:Type viewModel:AssetViewModel}">
                        <StackPanel>
                          <TextBlock Text="{Binding Url, StringFormat={sd:Localize URL: {0}}}" FontWeight="Bold"/>
                          <TextBlock Text="{Binding TypeDisplayName, StringFormat={sd:Localize Type: {0}}}"/>
                          <TextBlock Text="{Binding Tags, Converter={sd:JoinStrings}, StringFormat={sd:Localize Tags: {0}}}"  Visibility="{Binding Tags, Converter={sd:Chained {sd:CountEnumerable}, {sd:NumericToBool}, {sd:VisibleOrCollapsed}}, FallbackValue={sd:Collapsed}}"/>
                          <StackPanel Orientation="Horizontal" Visibility="{Binding Dependencies.IsRoot, Converter={sd:VisibleOrCollapsed}, FallbackValue={sd:Collapsed}}">
                            <Image Source="{StaticResource ImageAssetIsRoot}" Width="16" Height="16" Margin="0,2,0,0"/>
                            <TextBlock Text="{sd:Localize Included in build as root}"/>
                          </StackPanel>
                          <StackPanel Orientation="Horizontal" Visibility="{Binding Dependencies.IsIndirectlyIncluded, Converter={sd:VisibleOrCollapsed}, FallbackValue={sd:Collapsed}}">
                            <Image Source="{StaticResource ImageAssetIsIndirectlyIncluded}" Width="16" Height="16" Margin="0,2,0,0"/>
                            <TextBlock Text="{sd:Localize Included in build as dependency}"/>
                          </StackPanel>
                          <StackPanel Orientation="Horizontal" Visibility="{Binding Dependencies.IsExcluded, Converter={sd:VisibleOrCollapsed}, FallbackValue={sd:Collapsed}}">
                            <Image Source="{StaticResource ImageAssetIsExcluded}" Width="16" Height="16" Margin="0,2,0,0"/>
                            <TextBlock Text="{sd:Localize Excluded from build}"/>
                          </StackPanel>
                        </StackPanel>
                      </DataTemplate>
                      <!-- folder -->
                      <DataTemplate DataType="{x:Type viewModel:DirectoryViewModel}">
                        <StackPanel>
                          <TextBlock Text="{Binding Path, StringFormat={sd:Localize URL: {0}}}" FontWeight="Bold"/>
                          <TextBlock Text="{Binding TypeDisplayName, StringFormat={sd:Localize Type: {0}}}"/>
                        </StackPanel>
                      </DataTemplate>
                    </FrameworkElement.Resources>
                  </ContentControl>

                </ToolTipService.ToolTip>
              </HeaderedContentControl>
            </DataTemplate>

            <DataTemplate  x:Key="EditItemTemplate" DataType="{x:Type viewModel:ISessionObjectViewModel}">
              <HeaderedContentControl>
                <HeaderedContentControl.Header>
                  <Grid>
                    <Border BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="2" CornerRadius="3" Margin="0,3,0,0">
                      <Image Source="{Binding ThumbnailData.Presenter, Mode=OneWay}" RenderOptions.BitmapScalingMode="Linear"
                             Width="{Binding TileThumbnailSize, RelativeSource={RelativeSource AncestorType=view:AssetViewUserControl}}"
                             Height="{Binding TileThumbnailSize, RelativeSource={RelativeSource AncestorType=view:AssetViewUserControl}}"/>
                    </Border>
                    <ProgressBar Width="32" Height="8" IsIndeterminate="{Binding ThumbnailData, Mode=OneWay, Converter={sd:Chained {sd:ObjectToBool}, {sd:InvertBool}}}"
                                 Visibility="{Binding ThumbnailData, Mode=OneWay, Converter={sd:Chained {sd:ObjectToBool}, {sd:InvertBool}, {sd:VisibleOrCollapsed}}}"/>
                  </Grid>
                </HeaderedContentControl.Header>
                <sd:TextBox Text="{Binding Name}" Width="{Binding TileThumbnailSize, RelativeSource={RelativeSource AncestorType=view:AssetViewUserControl}}"
                              Margin="0,5,0,0" GetFocusOnLoad="True" SelectAllOnFocus="True"/>
              </HeaderedContentControl>
            </DataTemplate>
          </DataTemplate.Resources>
          <controls:EditableContentListBox ItemsSource="{Binding FilteredContent}" SelectionMode="Extended" ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                           VirtualizingPanel.IsVirtualizing="True" VirtualizingPanel.VirtualizationMode="Recycling" TextSearch.TextPath="Name"
                                           CanEdit="{Binding CanEditAssets, RelativeSource={RelativeSource AncestorType=view:AssetViewUserControl}}"
                                           ItemTemplate="{StaticResource ItemTemplate}" EditItemTemplate="{StaticResource EditItemTemplate}">
            <controls:EditableContentListBox.ItemsPanel>
              <ItemsPanelTemplate>
                <sd:VirtualizingTilePanel MaximumItemSpacing="{Binding TileThumbnailSize, RelativeSource={RelativeSource AncestorType=view:AssetViewUserControl}, Converter={sd:Multiply}, ConverterParameter=0.375}" MinimumItemSpacing="4"
                                            ItemSlotSize="{Binding TileThumbnailSize, RelativeSource={RelativeSource AncestorType=view:AssetViewUserControl}, Converter={sd:Chained {sd:NumericToSize}, {sd:SumSize}, Parameter1={sd:Size 1,1}, Parameter2={sd:Size 18,64}}}">
                  <i:Interaction.Behaviors>
                    <sd:TilePanelNavigationBehavior/>
                  </i:Interaction.Behaviors>
                </sd:VirtualizingTilePanel>
              </ItemsPanelTemplate>
            </controls:EditableContentListBox.ItemsPanel>
            <controls:EditableContentListBox.ItemContainerStyle>
              <Style TargetType="controls:EditableContentListBoxItem" BasedOn="{StaticResource {x:Type controls:EditableContentListBoxItem}}" d:DataContext="{d:DesignInstance viewModel:AssetViewModel}">
                <Setter Property="CanEdit" Value="{Binding IsLocked, Converter={sd:InvertBool}}"/>
                <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
                <Setter Property="sd:Interaction.Behaviors">
                  <Setter.Value>
                    <sd:BehaviorCollection>
                      <sd:OnEventSetPropertyBehavior EventName="Validated" EventOwnerType="sd:TextBox" Property="controls:EditableContentListBoxItem.IsEditing" Value="False"/>
                      <sd:OnEventSetPropertyBehavior EventName="Cancelled" EventOwnerType="sd:TextBox" Property="controls:EditableContentListBoxItem.IsEditing" Value="False"/>
                    </sd:BehaviorCollection>
                  </Setter.Value>
                </Setter>
              </Style>
            </controls:EditableContentListBox.ItemContainerStyle>
            <i:Interaction.Behaviors>
              <sd:ListBoxBindableSelectedItemsBehavior SelectedItems="{Binding SelectedContent}" GiveFocusOnSelectionChange="{Binding GiveFocusOnSelectionChange, ElementName=AssetView}"/>
              <behaviors:ListBoxDragDropBehavior DragVisualTemplate="{StaticResource DragVisualTemplate}"/>
              <behaviors:TilePanelThumbnailPrioritizationBehavior/>
              <behaviors:BringSelectionToViewBehavior/>
              <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Delete" Command="{Binding DeleteContentCommand}" IsEnabled="{Binding CanDeleteAssets, ElementName=AssetView}"/>
            </i:Interaction.Behaviors>
          </controls:EditableContentListBox>
        </DataTemplate>
        <CollectionViewSource x:Key="FilteredContentView" Source="{Binding FilteredAssets}" />
      </ResourceDictionary>
    </FrameworkElement.Resources>
    <ToolBarTray DockPanel.Dock="Top">
      <FrameworkElement.Resources>
        <Style TargetType="{x:Type Image}">
          <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor" />
        </Style>
      </FrameworkElement.Resources>
      <ToolBar Visibility="{Binding PrimaryToolBarItems.Count, ElementName=AssetView, Converter={sd:Chained {sd:NumericToBool}, {sd:VisibleOrCollapsed}}}" ItemsSource="{Binding PrimaryToolBarItems, ElementName=AssetView}" />
      <!--  SECONDARY TOOLBAR  -->
      <ToolBar>
        <!--  NEW ASSET  -->
        <ToggleButton x:Name="Toggle" Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
                      ToolTip="{sd:Localize Add an asset to this location, Context=ToolTip}" status:ToolTipHelper.Status="{Binding Session.Editor.Status}"
                      Visibility="{Binding CanAddAssets, ElementName=AssetView, Converter={sd:VisibleOrCollapsed}}">
          <StackPanel Orientation="Horizontal">
            <Image Source="{StaticResource ImageNewAsset}" />
            <TextBlock Text="{sd:Localize Add asset}" Margin="2,2,4,2" VerticalAlignment="Center"/>
          </StackPanel>
          <i:Interaction.Behaviors>
            <sd:ToggleButtonPopupBehavior/>
          </i:Interaction.Behaviors>
        </ToggleButton>
        <Popup IsOpen="{Binding IsChecked, ElementName=Toggle, Mode=TwoWay}" StaysOpen="False" AllowsTransparency="True">
          <Border MinHeight="300" Margin="6" Background="{StaticResource ControlBackgroundBrush}"
                  BorderBrush="{StaticResource NormalBrush}" BorderThickness="1">
            <Border.Effect>
              <DropShadowEffect BlurRadius="5" Opacity="0.4"/>
            </Border.Effect>
            <templateViews:AddItemUserControl TemplateCollection="{Binding AddAssetTemplateCollection}" AddItemCommand="{Binding RunAssetTemplateCommand}"
                                              SelectFilesToCreateItemCommand="{Binding SelectFilesToCreateAssetCommand}"/>
          </Border>
          <i:Interaction.Behaviors>
            <sd:OnEventSetPropertyBehavior EventName="Validated" EventOwnerType="sd:FilteringComboBox" Property="{x:Static Popup.IsOpenProperty}" Value="{sd:False}"/>
          </i:Interaction.Behaviors>
        </Popup>
        <!--  UPDATE ASSETS FROM SOURCE BUTTON  -->
        <Button Command="{Binding Session.SourceTracker.UpdateAllAssetsWithModifiedSourceCommand}"
                ToolTip="{sd:ToolTip {sd:Localize Update assets whose source files have changed, Context=ToolTip}, {x:Static strings:KeyGestures.UpdateAllAssetsWithModifiedSource}}" status:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True"
                Visibility="{Binding CanEditAssets, ElementName=AssetView, Converter={sd:VisibleOrCollapsed}}">
          <DockPanel>
            <TextBlock DockPanel.Dock="Right" Margin="3,0" Visibility="{Binding Session.SourceTracker.AssetsToUpdate.Count, Converter={sd:Chained {sd:NumericToBool}, {sd:VisibleOrCollapsed}}}"
                       Text="{Binding Session.SourceTracker.AssetsToUpdate.Count, StringFormat=({0})}" VerticalAlignment="Center" />
            <Grid>
              <Image Source="{StaticResource UpdateAllAssetsWithModifiedSource}"/>
              <Rectangle Fill="{StaticResource NormalBrush}" Visibility="{Binding Session.SourceTracker.AssetsToUpdate.Count, Converter={sd:Chained {sd:NumericToBool}, {sd:VisibleOrCollapsed}}}">
                <Rectangle.OpacityMask>
                  <ImageBrush ImageSource="{StaticResource UpdateAllAssetsWithModifiedSource}"/>
                </Rectangle.OpacityMask>
                <Rectangle.Triggers>
                  <EventTrigger RoutedEvent="Window.Loaded">
                    <BeginStoryboard>
                      <Storyboard RepeatBehavior="Forever">
                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.5" BeginTime="0:0:0" AutoReverse="True"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </EventTrigger>
                </Rectangle.Triggers>
              </Rectangle>
            </Grid>
          </DockPanel>
        </Button>
        <Button Command="{Binding Session.ImportEffectLogCommand}"
                IsEnabled="{Binding Session.ImportEffectLogPendingCount, Converter={sd:NumericToBool}}"
                Visibility="{Binding CanEditAssets, ElementName=AssetView, Converter={sd:VisibleOrCollapsed}}"
                ToolTip="{sd:Localize Import last effects compiled remotely, Context=ToolTip}" status:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
          <DockPanel>
            <TextBlock DockPanel.Dock="Right" Margin="3,0" Visibility="{Binding Session.ImportEffectLogPendingCount, Converter={sd:Chained {sd:IsGreater}, {sd:VisibleOrCollapsed},  Parameter1={sd:Double 0}}}"
                       Text="{Binding Session.ImportEffectLogPendingCount, StringFormat=({0})}" VerticalAlignment="Center" />
            <Grid>
              <Image Source="{StaticResource ImageReimportEffects}"/>
              <Rectangle Fill="{StaticResource NormalBrush}" Visibility="{Binding Session.ImportEffectLogPendingCount, Converter={sd:Chained {sd:IsGreater}, {sd:VisibleOrCollapsed},  Parameter1={sd:Double 0}}}">
                <Rectangle.OpacityMask>
                  <ImageBrush ImageSource="{StaticResource ImageReimportEffects}"/>
                </Rectangle.OpacityMask>
                <Rectangle.Triggers>
                  <EventTrigger RoutedEvent="Window.Loaded">
                    <BeginStoryboard>
                      <Storyboard RepeatBehavior="Forever">
                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.5" BeginTime="0:0:0" AutoReverse="True"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </EventTrigger>
                </Rectangle.Triggers>
              </Rectangle>
            </Grid>
          </DockPanel>
        </Button>
        <Separator/>
        <!--  EDIT  -->
        <Button Command="{Binding Session.EditSelectedContentCommand}" Visibility="{Binding CanEditAssets, ElementName=AssetView, Converter={sd:VisibleOrCollapsed}}"
                ToolTip="{sd:ToolTip {sd:Localize Open asset in dedicated editor, Context=ToolTip}, {x:Static strings:KeyGestures.EditAsset}}" status:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
          <Image Source="{StaticResource ImageEditAsset}" />
        </Button>
        <Separator Visibility="{Binding CanEditAssets, ElementName=AssetView, Converter={sd:VisibleOrCollapsed}}" />
        <!-- VIEW OPTIONS -->
        <Menu Background="Transparent">
          <MenuItem StaysOpenOnClick="True" Style="{StaticResource ToolBarIconMenuItemStyle}">
            <MenuItem.Icon>
              <Image Source="{StaticResource ImageView}" MaxHeight="16" MaxWidth="16"
                     ToolTip="{sd:Localize Asset view options, Context=ToolTip}" status:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True"/>
            </MenuItem.Icon>
            <MenuItem.Resources>
              <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}" />
            </MenuItem.Resources>
            <MenuItem Header="{sd:Localize Display, Context=Menu}" Style="{StaticResource MenuGroupWithItemsStyle}" Visibility="{Binding CanRecursivelyDisplayAssets, ElementName=AssetView, Converter={sd:VisibleOrCollapsed}}">
              <MenuItem Header="{sd:Localize Assets in selected folder only, Context=Menu}" IsCheckable="False"
                        Command="{Binding ChangeDisplayAssetModeCommand}" CommandParameter="{x:Static viewModel:DisplayAssetMode.AssetInSelectedFolderOnly}"
                        IsChecked="{Binding DisplayAssetMode, Mode=OneWay, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static viewModel:DisplayAssetMode.AssetInSelectedFolderOnly}}" />
              <MenuItem Header="{sd:Localize Assets and folders in selected folder, Context=Menu}" IsCheckable="False"
                        Command="{Binding ChangeDisplayAssetModeCommand}" CommandParameter="{x:Static viewModel:DisplayAssetMode.AssetAndFolderInSelectedFolder}"
                        IsChecked="{Binding DisplayAssetMode, Mode=OneWay, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static viewModel:DisplayAssetMode.AssetAndFolderInSelectedFolder}}" />
              <MenuItem Header="{sd:Localize Assets in selected folder and subfolders, Context=Menu}" IsCheckable="False"
                        Command="{Binding ChangeDisplayAssetModeCommand}" CommandParameter="{x:Static viewModel:DisplayAssetMode.AssetInSelectedFolderAndSubFolder}"
                        IsChecked="{Binding DisplayAssetMode, Mode=OneWay, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static viewModel:DisplayAssetMode.AssetInSelectedFolderAndSubFolder}}" />
            </MenuItem>
            <MenuItem Header="Sort by" Style="{StaticResource MenuGroupSeparatorStyle}" />
            <MenuItem Header="{sd:Localize Name, Context=Menu}" IsCheckable="False"
                      Command="{Binding SortAssetsCommand}" CommandParameter="{x:Static viewModel:SortRule.Name}"
                      IsChecked="{Binding SortRule, Mode=OneWay, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static viewModel:SortRule.Name}}"/>
            <MenuItem Header="{sd:Localize Date modified, Context=Menu}" IsCheckable="False"
                      Command="{Binding SortAssetsCommand}" CommandParameter="{x:Static viewModel:SortRule.ModificationDateThenName}"
                      IsChecked="{Binding SortRule, Mode=OneWay, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static viewModel:SortRule.ModificationDateThenName}}"/>
            <MenuItem Header="{sd:Localize Type, Context=Menu}" IsCheckable="False"
                      Command="{Binding SortAssetsCommand}" CommandParameter="{x:Static viewModel:SortRule.TypeOrderThenName}"
                      IsChecked="{Binding SortRule, Mode=OneWay, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static viewModel:SortRule.TypeOrderThenName}}"/>
            <MenuItem Header="{sd:Localize Unsaved changes, Context=Menu}" IsCheckable="False"
                      Command="{Binding SortAssetsCommand}" CommandParameter="{x:Static viewModel:SortRule.DirtyThenName}"
                      IsChecked="{Binding SortRule, Mode=OneWay, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static viewModel:SortRule.DirtyThenName}}"/>
            <MenuItem Style="{StaticResource MenuGroupWithItemsStyle}">
              <MenuItem.Header>
                <DockPanel LastChildFill="False">
                  <TextBlock DockPanel.Dock="Left" Text="View" FontWeight="Bold" />
                  <Button DockPanel.Dock="Right" Margin="4 0 0 0" Background="Transparent"
                          Command="view:AssetViewUserControl.ZoomInCommand"
                          ToolTip="{sd:Localize Zoom in, Context=ToolTip}" status:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
                    <Image Source="{StaticResource ImageZoomIn}"/>
                  </Button>
                  <Button DockPanel.Dock="Right" Background="Transparent"
                          Command="view:AssetViewUserControl.ZoomOutCommand"
                          ToolTip="{sd:Localize Zoom out, Context=ToolTip}" status:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
                    <Image Source="{StaticResource ImageZoomOut}"/>
                  </Button>
                </DockPanel>
              </MenuItem.Header>
              <MenuItem Header="{sd:Localize Tiles, Context=Menu}" CommandParameter="{StaticResource AssetTileView}">
                <MenuItem.Command>
                  <view:SetContentTemplateCommand Target="{x:Reference AssetViewPresenter}"/>
                </MenuItem.Command>
                <MenuItem.Icon>
                  <Image Grid.Column="0" Source="{StaticResource ImageShowTiles}"/>
                </MenuItem.Icon>
              </MenuItem>
            </MenuItem>
          </MenuItem>
        </Menu>
        <Separator/>
        <!--  FILTER  -->
        <sd:SearchComboBox Width="120" WatermarkContent="{sd:Localize Add a filter...}"
                             ItemsSource="{Binding AvailableAssetFilters}" SearchText="{Binding AssetFilterPattern}" ClearTextAfterSelection="True"
                             Command="{Binding AddAssetFilterCommand}" AlternativeCommand="{Binding RefreshAssetFilterCommand}" AlternativeModifiers="Shift"
                             Grid.IsSharedSizeScope="True" x:Name="FilterSearchComboBox" status:ToolTipHelper.Status="{Binding Session.Editor.Status}"
                             ToolTip="{sd:Localize Filter assets by name\, type or tag}" ToolTipService.ShowOnDisabled="True">
          <sd:SearchComboBox.ItemTemplate>
            <DataTemplate>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="IconColumn"  MinWidth="17" Width="Auto" SharedSizeGroup="IconColumnGroup" />
                  <ColumnDefinition Width="Auto" SharedSizeGroup="ContentColumnGroup" />
                </Grid.ColumnDefinitions>
                <Image Grid.Column="0" Height="16" Width="16" RenderOptions.BitmapScalingMode="HighQuality" >
                  <Image.Style>
                    <Style TargetType="{x:Type Image}" BasedOn="{StaticResource {x:Type Image}}">
                      <Setter Property="Source" Value="{StaticResource ImageNewAsset}" />
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding IsAlternative, ElementName=FilterSearchComboBox}" Value="True">
                          <Setter Property="Source" Value="{StaticResource ImageRefresh}" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </Image.Style>
                </Image>
                <TextBlock Margin="4,0" Grid.Column="1" Text="{Binding Converter={cvt:AssetFilterViewModelToFullDisplayName}}" VerticalAlignment="Center" />
              </Grid>
            </DataTemplate>
          </sd:SearchComboBox.ItemTemplate>
        </sd:SearchComboBox>
        <Button Command="{Binding ClearAssetFiltersCommand}" Visibility="{Binding CurrentAssetFilters.Count, Converter={sd:Chained {sd:NumericToBool}, {sd:VisibleOrCollapsed}}}"
                ToolTip="{sd:Localize Clear filters, Context=ToolTip}" status:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
          <Image Source="{StaticResource ImageClearFilters}"/>
        </Button>
      </ToolBar>
      <!--  FILTER TAGS  -->
      <ToolBar ItemsSource="{Binding CurrentAssetFilters}" Style="{StaticResource TagToolBarStyle}" HorizontalAlignment="Stretch">
        <ToolBar.ItemTemplate>
          <DataTemplate>
            <sd:TagControl Height="20" Margin="2" ToolTip="{Binding Converter={cvt:AssetFilterViewModelToFullDisplayName}}"
                             VerticalAlignment="Center" CloseTagCommand="{Binding RemoveFilterCommand}">
              <sd:TagControl.Style>
                <Style TargetType="{x:Type sd:TagControl}" BasedOn="{StaticResource {x:Type sd:TagControl}}">
                  <Style.Triggers>
                    <!--  Background Color  -->
                    <DataTrigger Binding="{Binding Category}" Value="{x:Static viewModel:FilterCategory.AssetType}">
                      <Setter Property="Background" Value="#D7AA67" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Category}" Value="{x:Static viewModel:FilterCategory.AssetName}">
                      <Setter Property="Background" Value="#84CE80" />
                    </DataTrigger>
                    <!--  Opacity  -->
                    <DataTrigger Binding="{Binding IsActive}" Value="False">
                      <Setter Property="Opacity" Value="0.5" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </sd:TagControl.Style>
              <Button Command="{Binding ToggleIsActiveCommand}" VerticalAlignment="Center">
                <Button.Template>
                  <ControlTemplate>
                    <TextBlock Margin="2,1,2,0" Text="{Binding DisplayName}" TextTrimming="CharacterEllipsis" MaxWidth="100" VerticalAlignment="Center" />
                  </ControlTemplate>
                </Button.Template>
              </Button>
            </sd:TagControl>
          </DataTemplate>
        </ToolBar.ItemTemplate>
      </ToolBar>
    </ToolBarTray>
    <Grid ContextMenu="{Binding AssetContextMenu, ElementName=AssetView}" Background="Transparent">
      <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" IsHitTestVisible="False"
                  Visibility="{Binding FilteredContent.Count, Converter={sd:Chained {sd:NumericToBool}, {sd:InvertBool}, {sd:VisibleOrCollapsed}}}">
        <TextBlock Text="{sd:Localize No asset to display in this folder or no folder selected. Check your active filters.}"
                   HorizontalAlignment="Center" IsHitTestVisible="False"
                   Visibility="{Binding CanRecursivelyDisplayAssets, ElementName=AssetView, Converter={sd:VisibleOrCollapsed}}"/>
        <TextBlock Text="{sd:Localize You can also drop files here to import assets.}" HorizontalAlignment="Center" IsHitTestVisible="False"
                   Visibility="{Binding CanRecursivelyDisplayAssets, ElementName=AssetView, Converter={sd:VisibleOrCollapsed}}"/>
      </StackPanel>
      <ContentPresenter x:Name="AssetViewPresenter" Content="{Binding}" ContentTemplate="{StaticResource AssetTileView}"
                        Visibility="{Binding FilteredContent.Count, Converter={sd:Chained {sd:NumericToBool}, {sd:VisibleOrCollapsed}}}">
      </ContentPresenter>
      <i:Interaction.Behaviors>
        <behaviors:FrameworkElementDragDropBehavior CanDrag="False" UsePreviewEvents="True" CanDrop="{Binding CanAddAssets, ElementName=AssetView}"
                                                    DisplayDropAdorner="{x:Static behaviors:DisplayDropAdorner.ExternalOnly}"/>
      </i:Interaction.Behaviors>
    </Grid>
  </DockPanel>
</UserControl>
