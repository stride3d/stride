<UserControl x:Class="Stride.Assets.Presentation.AssetEditors.VisualScriptEditor.VisualScriptEditorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Stride.Assets.Presentation.AssetEditors.VisualScriptEditor"
             xmlns:graphx="clr-namespace:GraphX.Controls;assembly=GraphX.WPF.Controls"
             xmlns:sskkgraph="http://schemas.stride3d.net/xaml/presentation/graph"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:templateViews="clr-namespace:Stride.Core.Assets.Editor.Components.TemplateDescriptions.Views;assembly=Stride.Core.Assets.Editor"
             xmlns:converters="clr-namespace:Stride.Assets.Presentation.AssetEditors.VisualScriptEditor.Converters"
             xmlns:graphX="http://schemas.panthernet.ru/graphx/"
             xmlns:sd="http://schemas.stride3d.net/xaml/presentation"
             Focusable="True"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300" d:DataContext="{d:DesignInstance local:VisualScriptEditorViewModel}">
  <UserControl.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Stride.Core.Assets.Editor;component/View/DefaultPropertyTemplateProviders.xaml"/>
        <ResourceDictionary Source="/Stride.Assets.Presentation;component/View/ImageDictionary.xaml"/>
      </ResourceDictionary.MergedDictionaries>

      <!-- NODE VERTEX CONTROL -->
      <Style TargetType="{x:Type sskkgraph:NodeVertexControl}" BasedOn="{StaticResource {x:Type sskkgraph:NodeVertexControl}}">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type sskkgraph:NodeVertexControl}">
              <Grid>
                <i:Interaction.Behaviors>
                  <sd:FrameworkElementDragDropBehavior DragVisualTemplate="{StaticResource DragVisualTemplate}" CanDrag="False" />
                </i:Interaction.Behaviors>

                <Grid.Effect>
                  <DropShadowEffect BlurRadius="10" ShadowDepth="2"/>
                </Grid.Effect>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <Border Grid.Row="0" x:Name="PART_vertexTitle" Background="{TemplateBinding TitleBackground}" BorderBrush="{TemplateBinding TitleBorderBrush}" CornerRadius="{TemplateBinding TitleBorderCornerRadius}" Padding="{TemplateBinding TitlePadding}">
                  <TextBlock x:Name="PART_vertexName" Text="{Binding ViewModel.Title}" HorizontalAlignment="Center" FontWeight="Bold" Padding="10,0,10,0" />
                </Border>

                <Border Grid.Row="1" x:Name="PART_vertexContent" Background="{TemplateBinding ContentBackground}" BorderBrush="{TemplateBinding ContentBorderBrush}" CornerRadius="{TemplateBinding ContentBorderCornerRadius}" Padding="{TemplateBinding ContentPadding}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" MinWidth="50"/>
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <ItemsControl Grid.Column="0" x:Name="PART_inputItemsControl" ItemsSource="{TemplateBinding InputSlots}">
                      <ItemsControl.ItemTemplate>
                        <DataTemplate>
                          <Grid>
                            <Grid.ColumnDefinitions>
                              <ColumnDefinition Width="Auto" />
                              <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Ellipse Grid.Column="0" x:Name="connector" DataContext="{Binding}" AllowDrop="True" StrokeThickness="4"
                                     Stroke="{Binding Kind, Converter={sd:Chained {sd:StringConcat}, {sd:StaticResourceConverter}, Parameter1=Connector}, FallbackValue={StaticResource FallbackConnector}}" 
                                     Fill="{Binding Kind, Converter={sd:Chained {sd:StringConcat}, {sd:StaticResourceConverter}, Parameter1=Connector}, FallbackValue={StaticResource FallbackConnector}}"
                                     VerticalAlignment="Center" HorizontalAlignment="Left" Width="15" Height="15">
                              <i:Interaction.Behaviors>
                                <sskkgraph:ActiveConnectorBehavior ActiveConnectorHandler="{Binding RelativeSource={RelativeSource AncestorType={x:Type sskkgraph:NodeVertexControl}}}" Slot="{Binding}" />
                                <sskkgraph:ConnectorDropBehavior DropHandler="{Binding RelativeSource={RelativeSource AncestorType={x:Type sskkgraph:NodeVertexControl}}}" />
                              </i:Interaction.Behaviors>
                            </Ellipse>
                            <ContentPresenter Grid.Column="1" Content="{Binding}" Margin="2,0,10,0" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                          </Grid>
                          <DataTemplate.Triggers>
                            <!-- Note: We do want to apply IsMouseOver in between so that it looks good on disconnected pins too (stroke change color, center stays transparent) -->
                            <DataTrigger Binding="{Binding Links.Count, Converter={sd:NumericToBool}}" Value="False">
                              <Setter TargetName="connector" Property="Stroke" Value="{Binding Kind, Converter={sd:Chained {sd:StringConcat}, {sd:StaticResourceConverter}, Parameter1=ConnectorDisconnected}, FallbackValue={StaticResource FallbackConnectorDisconnected}}" />
                            </DataTrigger>
                            <Trigger SourceName="connector" Property="IsMouseOver" Value="True">
                              <Setter TargetName="connector" Property="Stroke" Value="{Binding Kind, Converter={sd:Chained {sd:StringConcat}, {sd:StaticResourceConverter}, Parameter1=ConnectorMouseOver}, FallbackValue={StaticResource FallbackConnectorMouseOver}}" />
                              <Setter TargetName="connector" Property="Fill" Value="{Binding Kind, Converter={sd:Chained {sd:StringConcat}, {sd:StaticResourceConverter}, Parameter1=ConnectorMouseOver}, FallbackValue={StaticResource FallbackConnectorMouseOver}}" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Links.Count, Converter={sd:NumericToBool}}" Value="False">
                              <Setter TargetName="connector" Property="Fill" Value="Transparent" />
                            </DataTrigger>
                          </DataTemplate.Triggers>
                        </DataTemplate>
                      </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <ItemsControl Grid.Column="1" x:Name="PART_outputItemsControl" ItemsSource="{TemplateBinding OutputSlots}">
                      <ItemsControl.ItemTemplate>
                        <DataTemplate>
                          <Grid>
                            <Grid.ColumnDefinitions>
                              <ColumnDefinition Width="*" MinWidth="50"/>
                              <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter Grid.Column="0" Content="{Binding}" Margin="10,0,2,0" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                            <Ellipse Grid.Column="1" x:Name="connector" DataContext="{Binding}" AllowDrop="True" StrokeThickness="4"
                                     Stroke="{Binding Kind, Converter={sd:Chained {sd:StringConcat}, {sd:StaticResourceConverter}, Parameter1=Connector}, FallbackValue={StaticResource FallbackConnector}}" 
                                     Fill="{Binding Kind, Converter={sd:Chained {sd:StringConcat}, {sd:StaticResourceConverter}, Parameter1=Connector}, FallbackValue={StaticResource FallbackConnector}}"
                                     VerticalAlignment="Center" HorizontalAlignment="Left" Width="15" Height="15">
                              <i:Interaction.Behaviors>
                                <sskkgraph:ActiveConnectorBehavior ActiveConnectorHandler="{Binding RelativeSource={RelativeSource AncestorType={x:Type sskkgraph:NodeVertexControl}}}" Slot="{Binding}" />
                                <sskkgraph:ConnectorDragBehavior Node="{Binding Vertex, RelativeSource={RelativeSource AncestorType={x:Type sskkgraph:NodeVertexControl}}}" Slot="{Binding}"/>
                              </i:Interaction.Behaviors>
                            </Ellipse>
                          </Grid>
                          <DataTemplate.Triggers>
                            <!-- Note: We do want to apply IsMouseOver in between so that it looks good on disconnected pins too (stroke change color, center stays transparent) -->
                            <DataTrigger Binding="{Binding Links.Count, Converter={sd:NumericToBool}}" Value="False">
                              <Setter TargetName="connector" Property="Stroke" Value="{Binding Kind, Converter={sd:Chained {sd:StringConcat}, {sd:StaticResourceConverter}, Parameter1=ConnectorDisconnected}, FallbackValue={StaticResource FallbackConnectorDisconnected}}" />
                            </DataTrigger>
                            <Trigger SourceName="connector" Property="IsMouseOver" Value="True">
                              <Setter TargetName="connector" Property="Stroke" Value="{Binding Kind, Converter={sd:Chained {sd:StringConcat}, {sd:StaticResourceConverter}, Parameter1=ConnectorMouseOver}, FallbackValue={StaticResource FallbackConnectorMouseOver}}" />
                              <Setter TargetName="connector" Property="Fill" Value="{Binding Kind, Converter={sd:Chained {sd:StringConcat}, {sd:StaticResourceConverter}, Parameter1=ConnectorMouseOver}, FallbackValue={StaticResource FallbackConnectorMouseOver}}" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Links.Count, Converter={sd:NumericToBool}}" Value="False">
                              <Setter TargetName="connector" Property="Fill" Value="Transparent" />
                            </DataTrigger>
                          </DataTemplate.Triggers>
                        </DataTemplate>
                      </ItemsControl.ItemTemplate>
                    </ItemsControl>

                  </Grid>
                </Border>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="Selector.IsSelected" Value="True">
                  <Setter TargetName="PART_vertexTitle" Property="Background" Value="{Binding SelectedTitleBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                  <Setter TargetName="PART_vertexContent" Property="Background" Value="{Binding SelectedContentBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                </Trigger>
                <DataTrigger Binding="{Binding ViewModel.Diagnostics.Count, Converter={sd:NumericToBool}}" Value="True">
                  <Setter TargetName="PART_vertexContent" Property="Background" Value="#C05050"/>
                  <Setter Property="ToolTip">
                    <Setter.Value>
                      <ToolTip>
                        <ItemsControl ItemsSource="{Binding ViewModel.Diagnostics}">
                          <ItemsControl.ItemTemplate>
                            <DataTemplate>
                              <TextBlock Text="{Binding RoslynDiagnostic.Info}"/>
                            </DataTemplate>
                          </ItemsControl.ItemTemplate>
                        </ItemsControl>
                      </ToolTip>
                    </Setter.Value>
                  </Setter>
                </DataTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>

        <!-- VERTEX DRAGGING CONTROL -->
        <Setter Property="graphX:DragBehaviour.IsDragEnabled" Value="True" />
        <Setter Property="graphX:DragBehaviour.UpdateEdgesOnMove" Value="True" />
      </Style>

      <Style TargetType="{x:Type sskkgraph:NodeEdgeControl}" BasedOn="{StaticResource {x:Type sskkgraph:NodeEdgeControl}}">
        <Setter Property="MouseOverLinkStroke" Value="{Binding ViewModel.Kind, Converter={sd:Chained {sd:StringConcat}, {sd:StaticResourceConverter}, Parameter1=ConnectorMouseOver}, FallbackValue={StaticResource FallbackConnectorMouseOver}}" />
        <Setter Property="LinkStroke" Value="{Binding ViewModel.Kind, Converter={sd:Chained {sd:StringConcat}, {sd:StaticResourceConverter}, Parameter1=Connector}, FallbackValue={StaticResource FallbackConnector}}" />
        <Style.Triggers>
          <DataTrigger Binding="{Binding ViewModel.Diagnostics.Count, Converter={sd:NumericToBool}}" Value="True">
            <Setter Property="LinkStroke" Value="#C05050"/>
            <Setter Property="MouseOverLinkStroke" Value="#F06060" />
            <Setter Property="ToolTip">
              <Setter.Value>
                <ToolTip>
                  <ItemsControl ItemsSource="{Binding ViewModel.Diagnostics}">
                    <ItemsControl.ItemTemplate>
                      <DataTemplate>
                        <TextBlock Text="{Binding RoslynDiagnostic.Info}"/>
                      </DataTemplate>
                    </ItemsControl.ItemTemplate>
                  </ItemsControl>
                </ToolTip>
              </Setter.Value>
            </Setter>
          </DataTrigger>
        </Style.Triggers>

      </Style>

      <DataTemplate DataType="{x:Type local:VisualScriptSlotViewModel}">
        <TextBlock Text="{Binding Name}"/>
      </DataTemplate>

      <!-- TODO: Put the styles in generic! (same as Sprite Editor) -->
      <Style TargetType="sd:EditableContentListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}"/>
      <Style TargetType="sd:EditableContentListBox" BasedOn="{StaticResource {x:Type ListBox}}"/>

      <ContextMenu x:Key="EditorViewContextMenu">
        <ContextMenu.ItemContainerStyle>
          <!-- We don't want the usual MenuItem logic (selection, close on click, etc...) -->
          <Style TargetType="{x:Type MenuItem}">
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                  <ContentPresenter Content="{Binding}"/>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Style>
        </ContextMenu.ItemContainerStyle>
        <templateViews:AddItemUserControl TemplateCollection="{Binding Editor.BlockTemplateDescriptionCollection}" AddItemCommand="{Binding RunBlockTemplateCommand}"
                                          MinHeight="300"/>
      </ContextMenu>

      <ContextMenu x:Key="DropVariableContextMenu">
        <MenuItem Header="{sd:Localize Get, Context=Menu}" Click="DropVariableContextMenuGetClicked"/>
        <MenuItem Header="{sd:Localize Set, Context=Menu}" Click="DropVariableContextMenuSetClicked"/>
      </ContextMenu>

      <Style x:Key="AddMethodComboBox" BasedOn="{StaticResource AddItemComboBox}" TargetType="ComboBox">
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="ItemTemplate">
          <Setter.Value>
            <DataTemplate>
              <TextBlock sd:TextBlockFormatting.FormattedText="{Binding Converter={converters:MethodToDisplayName}}"/>
            </DataTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </ResourceDictionary>
  </UserControl.Resources>
  <i:Interaction.Behaviors>
    <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Delete" Command="{Binding VisibleMethod.DeleteSelectionCommand}" />
  </i:Interaction.Behaviors>
  <Grid>
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="*"/>
      <ColumnDefinition Width="5"/>
      <ColumnDefinition Width="3*"/>
    </Grid.ColumnDefinitions>
    <Grid Grid.Column="0">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="5"/>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="5"/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <DockPanel Grid.Row="0">
        <sd:TextBox DockPanel.Dock="Top" Text="{Binding BaseType}" WatermarkContent="Base type..."/>
        <DockPanel Margin="8" DockPanel.Dock="Top">
          <UniformGrid Rows="1" DockPanel.Dock="Right">
            <Button Margin="2" Content="{sd:Image {StaticResource ImageAdd}, 16, 16, NearestNeighbor}" Command="{Binding AddNewPropertyCommand}"/>
            <Button Margin="2" Content="{sd:Image {StaticResource ImageRemove}, 16, 16, NearestNeighbor}" Command="{Binding RemoveSelectedPropertiesCommand}"/>
          </UniformGrid>
          <TextBlock Text="{sd:Localize Variables:}" VerticalAlignment="Center"/>
        </DockPanel>
        <sd:EditableContentListBox Margin="8" ItemsSource="{Binding Properties.Children}" SelectionMode="Extended" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
          <sd:EditableContentListBox.ItemContainerStyle>
            <Style TargetType="sd:EditableContentListBoxItem" BasedOn="{StaticResource {x:Type sd:EditableContentListBoxItem}}">
              <Setter Property="sd:Interaction.Behaviors">
                <Setter.Value>
                  <sd:BehaviorCollection>
                    <sd:OnEventSetPropertyBehavior EventName="Cancelled" EventOwnerType="sd:TextBox" Property="sd:EditableContentListBoxItem.IsEditing" Value="False"/>
                    <sd:OnEventCommandBehavior EventName="MouseDoubleClick" EventOwnerType="Control" HandleEvent="True" Command="{x:Static sd:EditableContentListBox.BeginEditCommand}"/>
                  </sd:BehaviorCollection>
                </Setter.Value>
              </Setter>
            </Style>
          </sd:EditableContentListBox.ItemContainerStyle>
          <sd:EditableContentListBox.ItemTemplate>
            <DataTemplate>
              <TextBlock Margin="5,0,0,0" TextTrimming="CharacterEllipsis">
                <Run Text="{Binding Name_.NodeValue}" FontWeight="Bold"/>
                <Run Text="{Binding Type_.NodeValue, Converter={sd:FormatString}, ConverterParameter=({0})}" Foreground="Gray"/>
              </TextBlock>
            </DataTemplate>
          </sd:EditableContentListBox.ItemTemplate>
          <sd:EditableContentListBox.EditItemTemplate>
            <DataTemplate>
              <DockPanel HorizontalAlignment="Stretch">
                <sd:TextBox Text="{Binding Type_.NodeValue}" SelectAllOnFocus="True" DockPanel.Dock="Left" />
                <sd:TextBox Text="{Binding Name_.NodeValue}" SelectAllOnFocus="True" GetFocusOnLoad="True" />
              </DockPanel>
            </DataTemplate>
          </sd:EditableContentListBox.EditItemTemplate>
          <i:Interaction.Behaviors>
            <sd:ListBoxBindableSelectedItemsBehavior SelectedItems="{Binding SelectedProperties}"/>
            <sd:ListBoxDragDropBehavior DragVisualTemplate="{StaticResource DragVisualTemplate}"/>
          </i:Interaction.Behaviors>
        </sd:EditableContentListBox>
      </DockPanel>
      <GridSplitter Grid.Row="1" Width="5" HorizontalAlignment="Stretch" ResizeBehavior="PreviousAndNext"/>
      <DockPanel Grid.Row="2">
        <DockPanel Margin="8" DockPanel.Dock="Top">
          <UniformGrid Rows="1" DockPanel.Dock="Right">
            <!--<Button Margin="2" Content="{sd:Image {StaticResource ImageAdd}, 16, 16, NearestNeighbor}" Command="{Binding AddNewMethodCommand}"/>-->
            <ComboBox x:Name="InstanceTypeSelectionComboBox" Style="{StaticResource AddMethodComboBox}" ItemsSource="{Binding OverridableMethods}">
              <i:Interaction.Behaviors>
                <sd:OnComboBoxClosedWithSelectionBehavior Command="{Binding AddNewMethodCommand}" CommandParameter="{Binding SelectedItem, ElementName=InstanceTypeSelectionComboBox}"/>
              </i:Interaction.Behaviors>
            </ComboBox>
            <Button Margin="2" Content="{sd:Image {StaticResource ImageRemove}, 16, 16, NearestNeighbor}" Command="{Binding RemoveSelectedMethodCommand}"/>
          </UniformGrid>
          <TextBlock Text="{sd:Localize Functions:}" VerticalAlignment="Center"/>
        </DockPanel>
        <sd:EditableContentListBox Grid.Row="2" Margin="8" ItemsSource="{Binding Methods}" SelectionMode="Single" SelectedItem="{Binding SelectedMethod}" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
          <sd:EditableContentListBox.ItemContainerStyle>
            <Style TargetType="sd:EditableContentListBoxItem" BasedOn="{StaticResource {x:Type sd:EditableContentListBoxItem}}">
              <Setter Property="sd:Interaction.Behaviors">
                <Setter.Value>
                  <sd:BehaviorCollection>
                    <sd:OnEventSetPropertyBehavior EventName="Validated" EventOwnerType="sd:TextBox" Property="sd:EditableContentListBoxItem.IsEditing" Value="False"/>
                    <sd:OnEventSetPropertyBehavior EventName="Cancelled" EventOwnerType="sd:TextBox" Property="sd:EditableContentListBoxItem.IsEditing" Value="False"/>
                    <sd:OnEventCommandBehavior EventName="MouseDoubleClick" EventOwnerType="Control" HandleEvent="True" Command="{x:Static sd:EditableContentListBox.BeginEditCommand}"/>
                  </sd:BehaviorCollection>
                </Setter.Value>
              </Setter>
            </Style>
          </sd:EditableContentListBox.ItemContainerStyle>
          <sd:EditableContentListBox.ItemTemplate>
            <DataTemplate DataType="local:VisualScriptMethodEditorViewModel">
              <TextBlock Text="{Binding Name}" Margin="5,0,0,0" TextTrimming="CharacterEllipsis"/>
            </DataTemplate>
          </sd:EditableContentListBox.ItemTemplate>
          <sd:EditableContentListBox.EditItemTemplate>
            <DataTemplate DataType="local:VisualScriptMethodEditorViewModel">
              <sd:TextBox Text="{Binding Name}" Width="128" SelectAllOnFocus="True" GetFocusOnLoad="True"/>
            </DataTemplate>
          </sd:EditableContentListBox.EditItemTemplate>
        </sd:EditableContentListBox>
      </DockPanel>
      <GridSplitter Grid.Row="3" Width="5" HorizontalAlignment="Stretch" ResizeBehavior="PreviousAndNext"/>
      <DockPanel Grid.Row="4" DataContext="{Binding VisibleMethod}">
        <ComboBox DockPanel.Dock="Top" Margin="2" SelectedItem="{Binding Method.Accessibility}" ItemsSource="{Binding Method.Accessibility, Converter={sd:Chained {sd:ObjectToType}, {sd:EnumValues}}, Mode=OneWay}">
          <ComboBox.ItemTemplate>
            <DataTemplate>
              <TextBlock Text="{Binding Converter={sd:EnumToDisplayName}}"/>
            </DataTemplate>
          </ComboBox.ItemTemplate>
        </ComboBox>
        <ComboBox DockPanel.Dock="Top" Margin="2" SelectedItem="{Binding Method.VirtualModifier}" ItemsSource="{Binding Method.VirtualModifier, Converter={sd:Chained {sd:ObjectToType}, {sd:EnumValues}}, Mode=OneWay}">
          <ComboBox.ItemTemplate>
            <DataTemplate>
              <TextBlock Text="{Binding Converter={sd:EnumToDisplayName}}"/>
            </DataTemplate>
          </ComboBox.ItemTemplate>
        </ComboBox>
        <CheckBox DockPanel.Dock="Top" DataContext="{Binding Method.IsStatic}" Content="{sd:Localize Static method, Context=Button}"/>
        <sd:TextBox DockPanel.Dock="Top" Text="{Binding Method.ReturnType}" WatermarkContent="{sd:Localize Return type...}"/>
        <DockPanel>
          <DockPanel Margin="8" DockPanel.Dock="Top">
            <UniformGrid Rows="1" DockPanel.Dock="Right">
              <Button Margin="2" Content="{sd:Image {StaticResource ImageAdd}, 16, 16, NearestNeighbor}" Command="{Binding AddNewParameterCommand}"/>
              <Button Margin="2" Content="{sd:Image {StaticResource ImageRemove}, 16, 16, NearestNeighbor}" Command="{Binding RemoveSelectedParametersCommand}"/>
            </UniformGrid>
            <TextBlock Text="{sd:Localize Function parameters:}" VerticalAlignment="Center"/>
          </DockPanel>
          <sd:EditableContentListBox Margin="8" ItemsSource="{Binding Parameters.Children}" SelectionMode="Extended" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
            <sd:EditableContentListBox.ItemContainerStyle>
              <Style TargetType="sd:EditableContentListBoxItem" BasedOn="{StaticResource {x:Type sd:EditableContentListBoxItem}}">
                <Setter Property="FocusManager.IsFocusScope" Value="True"/>
                <Setter Property="sd:Interaction.Behaviors">
                  <Setter.Value>
                    <sd:BehaviorCollection>
                      <sd:OnEventSetPropertyBehavior EventName="Cancelled" EventOwnerType="sd:TextBox" Property="sd:EditableContentListBoxItem.IsEditing" Value="False"/>
                      <sd:OnEventCommandBehavior EventName="MouseDoubleClick" EventOwnerType="Control" HandleEvent="True" Command="{x:Static sd:EditableContentListBox.BeginEditCommand}"/>
                    </sd:BehaviorCollection>
                  </Setter.Value>
                </Setter>
              </Style>
            </sd:EditableContentListBox.ItemContainerStyle>
            <sd:EditableContentListBox.ItemTemplate>
              <DataTemplate>
                <TextBlock Margin="5,0,0,0" TextTrimming="CharacterEllipsis">
                  <Run Text="{Binding RefKind.NodeValue, Converter={sd:Chained {sd:EnumToDisplayName}, {sd:ToLower}, {sd:ValueToUnset}, {sd:FormatString}, Parameter3=none, Parameter4='{}{0} '}}"/><Run Text="{Binding Name_.NodeValue}" FontWeight="Bold"/>
                  <Run Text="{Binding Type_.NodeValue, Converter={sd:FormatString}, ConverterParameter=({0})}" Foreground="Gray"/>
                </TextBlock>
              </DataTemplate>
            </sd:EditableContentListBox.ItemTemplate>
            <sd:EditableContentListBox.EditItemTemplate>
              <DataTemplate>
                <DockPanel HorizontalAlignment="Stretch">
                  <ComboBox DockPanel.Dock="Left" DataContext="{Binding RefKind}" Style="{StaticResource EnumComboBox}"/>
                  <sd:TextBox Text="{Binding Type_.NodeValue}" SelectAllOnFocus="True" DockPanel.Dock="Left" />
                  <sd:TextBox Text="{Binding Name_.NodeValue}" SelectAllOnFocus="True" GetFocusOnLoad="True" />
                </DockPanel>
              </DataTemplate>
            </sd:EditableContentListBox.EditItemTemplate>
            <i:Interaction.Behaviors>
              <sd:ListBoxBindableSelectedItemsBehavior SelectedItems="{Binding SelectedParameters}"/>
              <sd:ListBoxDragDropBehavior DragVisualTemplate="{StaticResource DragVisualTemplate}"/>
            </i:Interaction.Behaviors>
          </sd:EditableContentListBox>
        </DockPanel>
      </DockPanel>
    </Grid>
    <GridSplitter Grid.Column="1" Width="5" VerticalAlignment="Stretch" ResizeBehavior="PreviousAndNext"/>
    <graphx:ZoomControl DataContext="{Binding VisibleMethod}" x:Name="ZoomControl" Grid.Column="2" Background="#49494E" Zoom="1.0" ZoomSensitivity="10.0" IsAnimationEnabled="False" RenderOptions.BitmapScalingMode="HighQuality" ContextMenu="{StaticResource EditorViewContextMenu}">
      <i:Interaction.Behaviors>
        <sd:FrameworkElementDragDropBehavior DragVisualTemplate="{StaticResource DragVisualTemplate}" CanDrag="False" />
      </i:Interaction.Behaviors>
      <sskkgraph:NodeGraphArea x:Name="Area">
        <i:Interaction.Behaviors>
          <sskkgraph:LinkPreviewBehavior />
          <sskkgraph:NodeGraphBehavior Vertices="{Binding Blocks}" Edges="{Binding Links}"/>
          <sskkgraph:GraphSelectionBehavior SelectedVertexItems="{Binding SelectedBlocks}" SelectedEdgeItems="{Binding SelectedLinks}"  />
          <sskkgraph:GraphContextMenuOpenedBehavior EventType="Opening" Command="{Binding ContextMenuOpeningCommand}"/>
        </i:Interaction.Behaviors>
      </sskkgraph:NodeGraphArea>
    </graphx:ZoomControl>
    <Popup x:Name="SymbolSearchPopup" Placement="Mouse" IsOpen="{Binding SymbolSearchOpen}" StaysOpen="False">
      <sd:FilteringComboBox Width="320" ItemsSource="{Binding SymbolSearchValues}" Text="{Binding SymbolSearchText, UpdateSourceTrigger=PropertyChanged}" ValidatedItem="{Binding SymbolSearchValidatedItem, Mode=TwoWay}"
                              IsDropDownOpen="{Binding SymbolSearchOpen, Mode=TwoWay}" IsFiltering="False" Sort="{x:Null}"/>
    </Popup>
  </Grid>
</UserControl>
