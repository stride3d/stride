<UserControl x:Class="Stride.Assets.Presentation.AssetEditors.SpriteEditor.Views.SpriteEditorView"
       xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
       xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
       xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
       xmlns:vm="clr-namespace:Stride.Assets.Presentation.ViewModel"
       xmlns:sd="http://schemas.stride3d.net/xaml/presentation"
       xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
       xmlns:behaviors="clr-namespace:Stride.Assets.Presentation.View.Behaviors"
       xmlns:cmd="clr-namespace:Stride.Core.Presentation.Commands;assembly=Stride.Core.Presentation"
       xmlns:valueConverters="clr-namespace:Stride.Assets.Presentation.ValueConverters"
       xmlns:sprite="clr-namespace:Stride.Assets.Sprite;assembly=Stride.Assets"
       xmlns:strings="clr-namespace:Stride.Assets.Presentation.Resources.Strings"
       xmlns:view="clr-namespace:Stride.Assets.Presentation.AssetEditors.SpriteEditor.Views"
       xmlns:sevm="clr-namespace:Stride.Assets.Presentation.AssetEditors.SpriteEditor.ViewModels"
       mc:Ignorable="d" 
       d:DesignHeight="300" d:DesignWidth="300" d:DataContext="{d:DesignInstance vm:SpriteSheetViewModel}">
  <UserControl.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Stride.Core.Assets.Editor;component/View/CommonResources.xaml"/>
        <ResourceDictionary Source="/Stride.Assets.Presentation;component/View/ImageDictionary.xaml"/>
      </ResourceDictionary.MergedDictionaries>

      <!-- TODO: Put the styles in generic! -->
      <Style TargetType="sd:EditableContentListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}"/>
      <Style TargetType="sd:EditableContentListBox" BasedOn="{StaticResource {x:Type ListBox}}"/>
    </ResourceDictionary>
  </UserControl.Resources>
  <UserControl.InputBindings>
    <KeyBinding Command="{Binding Editor.SelectNextSpriteCommand}" CommandParameter="{sd:Int -1}"
          Gesture="{sd:KeyGesture {x:Static strings:KeyGestures.GestureSelectPreviousSprite}}"/>
    <KeyBinding Command="{Binding Editor.SelectNextSpriteCommand}" CommandParameter="{sd:Int 1}"
          Gesture="{sd:KeyGesture {x:Static strings:KeyGestures.GestureSelectNextSprite}}"/>
    <KeyBinding Command="{Binding Editor.AddNewSpriteCommand}" Gesture="{sd:KeyGesture {x:Static strings:KeyGestures.GestureNewSprite}}"/>
    <KeyBinding Command="{Binding Editor.DuplicateSelectedImagesCommand}" Gesture="{sd:KeyGesture {x:Static strings:KeyGestures.GestureDuplicateSelection}}"/>
    <KeyBinding Command="{Binding Editor.UseWholeImageCommand}" Gesture="{sd:KeyGesture {x:Static strings:KeyGestures.GestureSelectWholeImage}}"/>
    <KeyBinding Command="{x:Static view:SpriteEditorView.ActivateMagicWand}" Key="{sd:Key {x:Static strings:KeyGestures.GestureMagicWand}}"/>
    <KeyBinding Command="{x:Static view:SpriteEditorView.FocusOnRegion}" Key="{sd:Key {x:Static strings:KeyGestures.GestureFocus}}"/>
  </UserControl.InputBindings>
  <i:Interaction.Behaviors>
    <sd:CommandBindingBehavior RoutedCommand="{x:Static view:SpriteEditorView.FocusOnRegion}" Command="{Binding Editor.FocusOnRegionCommand}"/>
    <sd:CommandBindingBehavior RoutedCommand="{x:Static view:SpriteEditorView.ActivateMagicWand}" Command="{Binding Editor.ToggleUseMagicWandCommand}"/>
  </i:Interaction.Behaviors>
  <Grid DataContext="{Binding Editor}" d:DataContext="{d:DesignInstance sevm:SpriteSheetEditorViewModel}">
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="*"/>
      <ColumnDefinition Width="5"/>
      <ColumnDefinition Width="3*"/>
    </Grid.ColumnDefinitions>

    <!-- Left panel -->
    <DockPanel Grid.Column="0">
      <Button Content="{sd:Localize Sprite sheet properties, Context=Button}" Margin="8" Padding="4" DockPanel.Dock="Top" HorizontalAlignment="Stretch"
              Command="{Binding DisplaySpriteSheetPropertiesCommand}"/>
      <DockPanel DockPanel.Dock="Top">
        <TextBlock Text="{sd:Localize Sheet type:}" VerticalAlignment="Center" DockPanel.Dock="Top" Margin="8"/>
        <ListBox ItemsSource="{Binding Source={x:Type sprite:SpriteSheetType}, Converter={sd:EnumValues}}"
            SelectedValue="{Binding Type, Mode=TwoWay}" Margin="4">
          <ListBox.ItemsPanel>
            <ItemsPanelTemplate>
              <UniformGrid Rows="1"/>
            </ItemsPanelTemplate>
          </ListBox.ItemsPanel>
          <ListBox.ItemContainerStyle>
            <Style TargetType="{x:Type ListBoxItem}" >
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate>
                    <Grid Background="Transparent" d:DataContext="{d:DesignInstance ListBoxItem}">
                      <Rectangle Margin="4" Fill="{StaticResource NormalBrush}" Opacity="0.25"/>
                      <RadioButton Content="{TemplateBinding ContentPresenter.Content}" Style="{StaticResource {x:Type ToggleButton}}"
                     IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                     Margin="4" Padding="2" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                     Background="Transparent"/>
                    </Grid>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </ListBox.ItemContainerStyle>
          <ListBox.ItemTemplate>
            <DataTemplate>
              <TextBlock Text="{Binding Converter={sd:CamelCaseTextConverter}}"/>
            </DataTemplate>
          </ListBox.ItemTemplate>
        </ListBox>
      </DockPanel>
      <DockPanel DockPanel.Dock="Top" Margin="8">
        <CheckBox Content="{sd:Localize Use color key, Context=Button}" DockPanel.Dock="Top" IsChecked="{Binding ColorKeyEnabled}"
                  ToolTip="{sd:Localize If enabled\, the sprite uses the given color as transparency, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True"
                  VerticalAlignment="Center" />
        <Grid Visibility="{Binding ColorKeyEnabled, Converter={sd:VisibleOrHidden}}" Margin="21,4,0,0">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>
          <ToggleButton Grid.Column="0" x:Name="ColorKeyButton" VerticalAlignment="Center" Width="22" Height="22" Background="Black">
            <ToggleButton.Template>
              <ControlTemplate TargetType="ToggleButton">
                <Rectangle VerticalAlignment="Center" Width="20" Height="20" Stroke="Black" StrokeThickness="1"
                    Fill="{Binding ColorKey, Converter={sd:ColorConverter}}"/>
              </ControlTemplate>
            </ToggleButton.Template>
            <i:Interaction.Behaviors>
              <sd:ToggleButtonPopupBehavior/>
            </i:Interaction.Behaviors>
          </ToggleButton>
          <Popup Grid.Column="0" IsOpen="{Binding ElementName=ColorKeyButton, Path=IsChecked}" StaysOpen="False">
            <Grid Background="{StaticResource BackgroundBrush}" MinWidth="200" MinHeight="200" MaxWidth="400" MaxHeight="400">
              <sd:ColorPicker Color="{Binding ColorKey, Converter={sd:ColorConverter}}"/>
            </Grid>
          </Popup>
          <sd:TextBox Grid.Column="1" Margin="5,0" SelectAllOnFocus="True" VerticalAlignment="Center" Text="{Binding ColorKey, Converter={sd:ColorConverter}}"/>
          <ToggleButton Grid.Column="2"
                        IsChecked="{Binding ToolMode, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static sevm:SpriteSheetEditorToolMode.ColorPick}, Mode=OneWay}"
                        Command="{Binding ToggleToolModeCommand}" CommandParameter="{x:Static sevm:SpriteSheetEditorToolMode.ColorPick}"
                        ToolTip="{sd:Localize To select the color key\,  select a pixel color from the image, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImagePicker}" RenderOptions.BitmapScalingMode="NearestNeighbor" Width="16" Height="16" Margin="2,0"/>
          </ToggleButton>
        </Grid>
      </DockPanel>
      <DockPanel Margin="8" DockPanel.Dock="Top">
        <UniformGrid Rows="1" DockPanel.Dock="Right">
          <Button Margin="2" Content="{sd:Image {StaticResource ImageAdd}, 16, 16, NearestNeighbor}"
                  Command="{Binding AddNewImageCommand}"
                  ToolTip="{sd:ToolTip {sd:Localize Add a new empty sprite, Context=ToolTip}, {x:Static strings:KeyGestures.GestureNewSprite}}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True" />
          <Button Margin="2" Content="{sd:Image {StaticResource ImageDuplicateSprite}, 16, 16, NearestNeighbor}"
                  Command="{Binding DuplicateSelectedImagesCommand}" IsEnabled="{Binding SelectedItems.Count, ElementName=ImageList, Converter={sd:NumericToBool}}"
                  ToolTip="{sd:ToolTip {sd:Localize Duplicate selected sprites, Context=ToolTip}, {x:Static strings:KeyGestures.GestureDuplicateSelection}}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True" />
          <Button Margin="2" Content="{sd:Image {StaticResource ImageRemove}, 16, 16, NearestNeighbor}"
                  Command="{Binding RemoveImageCommand}" IsEnabled="{Binding SelectedItems.Count, ElementName=ImageList, Converter={sd:NumericToBool}}"
                  ToolTip="{sd:Localize Delete selected sprites, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True" />
          <Button Margin="2" Content="{sd:Image {StaticResource ImageUp}, 16, 16, NearestNeighbor}"
                  Command="{Binding MoveImageCommand}" CommandParameter="{sd:Int -1}"
                  ToolTip="{sd:Localize Move selected sprites up, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True"
                  IsEnabled="{Binding SelectedItems.Count, ElementName=ImageList, Converter={sd:NumericToBool}}" />
          <Button Margin="2" Content="{sd:Image {StaticResource ImageDown}, 16, 16, NearestNeighbor}"
                  Command="{Binding MoveImageCommand}" CommandParameter="{sd:Int 1}" 
                  ToolTip="{sd:Localize Move selected sprites down, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True"
                  IsEnabled="{Binding SelectedItems.Count, ElementName=ImageList, Converter={sd:NumericToBool}}" />
        </UniformGrid>
        <TextBlock Text="{sd:Localize Sprites:}" VerticalAlignment="Center"/>
      </DockPanel>
      <Grid Background="Transparent" Margin="8">
        <sd:EditableContentListBox x:Name="ImageList" Margin="0" ItemsSource="{Binding Sprites}" SelectionMode="Extended">
          <sd:EditableContentListBox.ItemContainerStyle>
            <Style TargetType="sd:EditableContentListBoxItem" BasedOn="{StaticResource {x:Type sd:EditableContentListBoxItem}}">
              <Setter Property="IsEditing" Value="{Binding IsEditing, Mode=TwoWay}" d:DataContext="{d:DesignInstance sevm:SpriteInfoViewModel}"/>
              <Setter Property="sd:Interaction.Behaviors">
                <Setter.Value>
                  <sd:BehaviorCollection>
                    <sd:OnEventSetPropertyBehavior EventName="Validated" EventOwnerType="sd:TextBox"
                              Property="sd:EditableContentListBoxItem.IsEditing" Value="False"/>
                    <sd:OnEventSetPropertyBehavior EventName="Cancelled" EventOwnerType="sd:TextBox"
                              Property="sd:EditableContentListBoxItem.IsEditing" Value="False"/>
                    <sd:OnEventCommandBehavior EventName="MouseDoubleClick" EventOwnerType="Control" HandleEvent="True"
                            Command="{x:Static sd:EditableContentListBox.BeginEditCommand}"/>
                  </sd:BehaviorCollection>
                </Setter.Value>
              </Setter>
              <Setter Property="ContextMenu">
                <Setter.Value>
                  <ContextMenu d:DataContext="{d:DesignInstance sevm:SpriteInfoViewModel}">
                    <MenuItem Header="{sd:Localize Add new sprite, Context=Menu}" Command="{Binding Editor.AddNewImageCommand}" Icon="{sd:Image {StaticResource ImageAdd}}"/>
                    <MenuItem Header="{sd:Localize Duplicate sprite, Context=Menu}" Command="{Binding Editor.DuplicateSelectedImagesCommand}" Icon="{sd:Image {StaticResource ImageDuplicateSprite}}"/>
                    <MenuItem Header="{sd:Localize Edit image, Context=Menu}" Command="{Binding EditImageCommand}" Icon="{sd:Image {StaticResource ImageOpenSourceFile}}"/>
                    <MenuItem Header="{sd:Localize Show image in explorer, Context=Menu}" Command="{Binding ExploreCommand}" Icon="{sd:Image {StaticResource ImageExplore}}"/>
                    <Separator/>
                    <MenuItem Command="ApplicationCommands.Copy" Icon="{sd:Image {StaticResource ImageCopy}}" />
                    <MenuItem Command="ApplicationCommands.Paste" Icon="{sd:Image {StaticResource ImagePaste}}" />
                    <MenuItem Command="ApplicationCommands.Delete" Icon="{sd:Image {StaticResource ImageRemove}}"/>
                  </ContextMenu>
                </Setter.Value>
              </Setter>
            </Style>
          </sd:EditableContentListBox.ItemContainerStyle>
          <sd:EditableContentListBox.ItemTemplate>
            <DataTemplate DataType="sevm:SpriteInfoViewModel">
              <StackPanel Orientation="Horizontal">
                <TextBlock Text="{Binding Index, StringFormat=[{0}]}"/>
                <TextBlock Text="{Binding Name}" Margin="5,0,0,0"/>
              </StackPanel>
            </DataTemplate>
          </sd:EditableContentListBox.ItemTemplate>
          <sd:EditableContentListBox.EditItemTemplate>
            <DataTemplate DataType="sevm:SpriteInfoViewModel">
              <sd:TextBox Text="{Binding Name}" Width="128" SelectAllOnFocus="True" GetFocusOnLoad="True"/>
            </DataTemplate>
          </sd:EditableContentListBox.EditItemTemplate>
          <i:Interaction.Behaviors>
            <sd:ListBoxDragDropBehavior CanDrop="True" CanInsert="True" CanDrag="True"
                                          DisplayInsertAdorner="True" DisplayDropAdorner="ExternalOnly"
                                          DragVisualTemplate="{StaticResource DragVisualTemplate}"/>
            <sd:ListBoxBindableSelectedItemsBehavior SelectedItems="{Binding SelectedSprites}"/>
            <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Copy" Command="{Binding CopyImageCommand, FallbackValue={x:Static cmd:DisabledCommand.Instance}, Mode=OneWay}"/>
            <!--
              <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Cut" Command="{Binding CutImageCommand, FallbackValue={x:Static cmd:DisabledCommand.Instance}, Mode=OneWay}"/>
              -->
            <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Delete" Command="{Binding RemoveImageCommand, FallbackValue={x:Static cmd:DisabledCommand.Instance}, Mode=OneWay}"/>
            <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Paste" Command="{Binding PasteImageCommand, FallbackValue={x:Static cmd:DisabledCommand.Instance}, Mode=OneWay}"/>
          </i:Interaction.Behaviors>
        </sd:EditableContentListBox>
        <i:Interaction.Behaviors>
          <sd:FrameworkElementDragDropBehavior CanDrop="True" CanInsert="False" CanDrag="False"
                                                 DisplayInsertAdorner="False" DisplayDropAdorner="ExternalOnly"
                                                 DragVisualTemplate="{StaticResource DragVisualTemplate}"/>
        </i:Interaction.Behaviors>
      </Grid>

    </DockPanel>
    <!-- Splitter -->
    <GridSplitter Grid.Column="1" ResizeBehavior="PreviousAndNext" Background="#FF1D1D1D" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
    <!-- Zero or more than 1 item selected -->
    <StackPanel Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="{Binding SelectedSprites.Count,
          Converter={sd:Chained {sd:IsEqualToParam}, {sd:VisibleOrCollapsed}, Parameter1={sd:Int 1}, Parameter2={sd:False}}}">
      <TextBlock Text="{sd:Localize Select a single image from the left panel}" Margin="20" HorizontalAlignment="Center"/>
    </StackPanel>
    <!-- Exactly one item selected -->
    <DockPanel Grid.Column="2" Visibility="{Binding SelectedSprites.Count, Converter={sd:Chained {sd:IsEqualToParam}, {sd:VisibleOrCollapsed}, Parameter1={sd:Int 1}}}">
      <ToolBarTray DockPanel.Dock="Top">
        <ToolBar>
          <Button Command="{Binding SelectNextSpriteCommand}" CommandParameter="{sd:Int -1}"
                  ToolTip="{sd:ToolTip {sd:Localize Select previous sprite, Context=ToolTip}, {x:Static strings:KeyGestures.GestureSelectPreviousSprite}}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImagePrevious}" RenderOptions.BitmapScalingMode="NearestNeighbor" Width="16" Height="16" />
          </Button>
          <Button Command="{Binding SelectNextSpriteCommand}" CommandParameter="{sd:Int 1}"
                  ToolTip="{sd:ToolTip {sd:Localize Select next sprite, Context=ToolTip}, {x:Static strings:KeyGestures.GestureSelectNextSprite}}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageNext}" RenderOptions.BitmapScalingMode="NearestNeighbor" Width="16" Height="16" />
          </Button>
          <Separator Background="{StaticResource NormalBrush}"/>
          <Button Command="{Binding Viewport.ZoomOutCommand}" Background="Transparent" Margin="2"
                  ToolTip="{sd:Localize Zoom out, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageZoomOut}" RenderOptions.BitmapScalingMode="NearestNeighbor" Width="16" Height="16" />
          </Button>
          <Button Command="{Binding Viewport.ZoomInCommand}" Background="Transparent" Margin="2"
                  ToolTip="{sd:Localize Zoom in, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageZoomIn}" RenderOptions.BitmapScalingMode="NearestNeighbor" Width="16" Height="16" />
          </Button>
          <Button Command="{Binding Viewport.ScaleToRealSizeCommand}" Background="Transparent" Margin="2"
                  ToolTip="{sd:Localize Scale to real pixel size, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageScaleOnRealSize}" RenderOptions.BitmapScalingMode="NearestNeighbor" Width="16" Height="16" />
          </Button>
          <Button Command="{Binding Viewport.FitOnScreenCommand}" Background="Transparent" Margin="2"
                  ToolTip="{sd:Localize Fit image to screen, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageFitOnScreen}" RenderOptions.BitmapScalingMode="NearestNeighbor" Width="16" Height="16" />
          </Button>
          <Button Command="{Binding FocusOnRegionCommand}" Background="Transparent" Margin="2"
                  ToolTip="{sd:ToolTip {sd:Localize Center view on current sprite region, Context=ToolTip}, {x:Static strings:KeyGestures.GestureFocus}}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageFocusOnRegion}" RenderOptions.BitmapScalingMode="NearestNeighbor" Width="16" Height="16" />
          </Button>
          <Separator Background="{StaticResource NormalBrush}"/>
          <Grid>
            <ToggleButton x:Name="BorderColorButton" Background="Transparent" Margin="2"
                        ToolTip="{sd:Localize Change selection rectangle color, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
              <Border BorderThickness="1" BorderBrush="{Binding BorderColor, Converter={sd:ColorConverter}}" Width="16" Height="16" />
              <i:Interaction.Behaviors>
                <sd:ToggleButtonPopupBehavior/>
              </i:Interaction.Behaviors>
            </ToggleButton>
            <Popup IsOpen="{Binding IsChecked, ElementName=BorderColorButton}" StaysOpen="False">
              <Grid Background="{StaticResource BackgroundBrush}">
                <sd:ColorPicker Color="{Binding BorderColor, Converter={sd:ColorConverter}}"/>
              </Grid>
            </Popup>
          </Grid>
          <!-- Highlight selection -->
          <ToggleButton IsChecked="{Binding SelectionHighlightEnabled, Mode=OneWay}"
                        Command="{Binding ToggleSelectionHighlightCommand}"
                        Background="Transparent" Style="{StaticResource {x:Type ToggleButton}}" Margin="2"
                        Content="{sd:Image {StaticResource ImageHighlightSelection}, 16, 16, NearestNeighbor}"
                        ToolTip="{sd:Localize Highlight the current selection, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True" />
          <Separator Background="{StaticResource NormalBrush}"/>
          <Button Command="{Binding UseWholeImageCommand}" Background="Transparent" Margin="2" IsEnabled="{Binding SelectedSprites.Count, Converter={sd:NumericToBool}}"
                  ToolTip="{sd:ToolTip {sd:Localize Select entire image, Context=ToolTip}, {x:Static strings:KeyGestures.GestureSelectWholeImage}}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
            <Image Source="{StaticResource ImageSelectAll}" RenderOptions.BitmapScalingMode="NearestNeighbor" Width="16" Height="16" />
          </Button>
          <!-- Magic wand -->
          <ToggleButton IsChecked="{Binding ToolMode, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static sevm:SpriteSheetEditorToolMode.MagicWand}, Mode=OneWay}"
                        Command="{Binding ToggleToolModeCommand}" CommandParameter="{x:Static sevm:SpriteSheetEditorToolMode.MagicWand}"
                        Background="Transparent" Style="{StaticResource {x:Type ToggleButton}}" Margin="2"
                        Content="{sd:Image {StaticResource ImageMagicWand}, 16, 16, NearestNeighbor}"
                        ToolTip="{sd:ToolTip {sd:Localize Select the sprite region using the magic wand, Context=ToolTip}, {x:Static strings:KeyGestures.GestureMagicWand}}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True"
                        IsEnabled="{Binding SelectedSprites.Count, Converter={sd:NumericToBool}}" />
          <Grid>
            <ToggleButton x:Name="MagicWandColorButton" Background="Transparent" IsEnabled="{Binding SelectedSprites.Count, Converter={sd:NumericToBool}}">
              <!--<Border Background="{DynamicResource ToolBarToggleButtonHoverBackground}" Opacity="0" x:Name="HoverBorder"/>-->
              <Path x:Name="Path" Margin="2,0" HorizontalAlignment="Stretch" Width="6" Height="4" Fill="{DynamicResource GlyphBrush}" Stretch="Fill" Stroke="{DynamicResource GlyphBrush}" StrokeThickness="1" Data="M5.2422477,11.132184 L11.5544,11.132184 8.6412958,4.4969033 z" RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                  <RotateTransform Angle="180"/>
                </Path.RenderTransform>
              </Path>
              <i:Interaction.Behaviors>
                <sd:ToggleButtonPopupBehavior/>
              </i:Interaction.Behaviors>
            </ToggleButton>
            <Popup IsOpen="{Binding IsChecked, ElementName=MagicWandColorButton}" StaysOpen="False">
              <Grid Background="{StaticResource BackgroundBrush}">
                <StackPanel Margin="5">
                  <RadioButton IsChecked="{Binding MagicWandUseTransparency}" Content="{sd:Localize Use transparency, Context=Button}" Margin="4"/>
                  <RadioButton IsChecked="{Binding MagicWandUseTransparency, Converter={sd:InvertBool}}" Content="{sd:Localize Use color key, Context=Button}" Margin="4"/>
                </StackPanel>
              </Grid>
            </Popup>
          </Grid>
          <Separator Background="{StaticResource NormalBrush}"/>
          <!-- Sprite center -->
          <ToggleButton Visibility="{Binding Type, Converter={sd:Chained {sd:IsEqualToParam}, {sd:VisibleOrCollapsed}, Parameter1={x:Static sprite:SpriteSheetType.Sprite2D}}, Mode=OneWay}"
                        IsChecked="{Binding ToolMode, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static sevm:SpriteSheetEditorToolMode.SpriteCenter}, Mode=OneWay}"
                        Command="{Binding ToggleToolModeCommand}" CommandParameter="{x:Static sevm:SpriteSheetEditorToolMode.SpriteCenter}"
                        ToolTip="{sd:Localize Move the sprite center, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
            <Path Width="16" Height="16" Stretch="UniformToFill" Fill="{Binding BorderColor, Converter={sd:ColorConverter}}"
                  Data="F1 M 56,36L 56,40L 40,40L 40,56L 36,56L 36,40L 20,40L 20,36L 36,36L 36,20L 40,20L 40,36L 56,36 Z M 8,37L 8,39L 3.01401,39L 3,38L 3.01401,37L 8,37 Z M 13,37L 13,39L 10,39L 10,37L 13,37 Z M 18,37L 18,39L 15,39L 15,37L 18,37 Z M 39,8.00005L 37,8.00005L 37,3.01403L 38,3.00002L 39,3.01403L 39,8.00005 Z M 39,18.0001L 37,18.0001L 37,15.0001L 39,15.0001L 39,18.0001 Z M 37,10.0001L 39,10.0001L 39,13.0001L 37,13.0001L 37,10.0001 Z M 68,39L 68,37L 72.986,37L 73,38L 72.986,39L 68,39 Z M 63,39L 63,37L 66,37L 66,39L 63,39 Z M 57.9999,39L 57.9999,37L 61,37L 61,39L 57.9999,39 Z M 37,68L 39,68L 39,72.986L 38,73L 37,72.986L 37,68 Z M 37,63L 39,63L 39,66L 37,66L 37,63 Z M 37,58L 39,58L 39,61L 37,61L 37,58 Z " />
          </ToggleButton>
          <!-- Sprite unstrechable borders -->
          <ToggleButton Visibility="{Binding Type, Converter={sd:Chained {sd:IsEqualToParam}, {sd:VisibleOrCollapsed}, Parameter1={x:Static sprite:SpriteSheetType.UI}}, Mode=OneWay}"
                        IsChecked="{Binding ToolMode, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static sevm:SpriteSheetEditorToolMode.Borders}, Mode=OneWay}"
                        Command="{Binding ToggleToolModeCommand}" CommandParameter="{x:Static sevm:SpriteSheetEditorToolMode.Borders}"
                        ToolTip="{sd:Localize Resize the sprite borders, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
            <Rectangle StrokeThickness="1" StrokeDashArray="2 2" Stroke="{Binding BorderColor, Converter={sd:ColorConverter}}" Width="16" Height="16" />
          </ToggleButton>
          <!-- Lock/Unlock borders -->
          <ToggleButton Visibility="{Binding Type, Converter={sd:Chained {sd:IsEqualToParam}, {sd:VisibleOrCollapsed}, Parameter1={x:Static sprite:SpriteSheetType.UI}}, Mode=OneWay}"
                        IsChecked="{Binding CurrentSprite.SpriteBorders.Locked, Mode=TwoWay}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" ToolTipService.ShowOnDisabled="True">
            <ToggleButton.Style>
              <Style TargetType="{x:Type ToggleButton}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding CurrentSprite.SpriteBorders.Locked}" Value="True">
                    <Setter Property="Content" Value="{sd:Image {StaticResource ImageLocked}, 16, 16}" />
                    <Setter Property="ToolTip" Value="{sd:Localize Unlock the sprite borders, Context=ToolTip}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding CurrentSprite.SpriteBorders.Locked}" Value="False">
                    <Setter Property="Content" Value="{sd:Image {StaticResource ImageUnlocked}, 16, 16}" />
                    <Setter Property="ToolTip" Value="{sd:Localize Lock the sprite borders, Context=ToolTip}" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </ToggleButton.Style>
          </ToggleButton>
        </ToolBar>
      </ToolBarTray>

      <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
        <i:Interaction.Behaviors>
          <behaviors:BindActualSizeBehavior ActualWidth="{Binding Viewport.ViewportWidth, Mode=OneWayToSource}" ActualHeight="{Binding Viewport.ViewportHeight, Mode=OneWayToSource}"/>
          <behaviors:BindScrollOffsetBehavior VerticalOffset="{Binding Viewport.VerticalOffset, Mode=TwoWay}" HorizontalOffset="{Binding Viewport.HorizontalOffset, Mode=TwoWay}"/>
          <behaviors:ViewportZoomBehavior Viewport="{Binding Viewport}" />
        </i:Interaction.Behaviors>
        <Grid Margin="10">
          <Rectangle Width="{Binding Viewport.ActualContentWidth}" Height="{Binding Viewport.ActualContentHeight}"
                     VerticalAlignment="Top" HorizontalAlignment="Left">
            <Rectangle.Fill>
              <DrawingBrush Stretch="None" TileMode="Tile" Viewport="0,0,16,16" ViewportUnits="Absolute">
                <DrawingBrush.Drawing>
                  <DrawingGroup>
                    <GeometryDrawing Geometry="M0,0 L16,0 16,16, 0,16Z" Brush="LightGray"/>
                    <GeometryDrawing Geometry="M0,8 L16,8 16,16, 8,16 8,0 0,0Z" Brush="Gray"/>
                  </DrawingGroup>
                </DrawingBrush.Drawing>
              </DrawingBrush>
            </Rectangle.Fill>
          </Rectangle>
          <!-- The 0.5 left margin was a hack for the jittering issue -->
          <Image x:Name="Img" Margin="0,0,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" RenderOptions.BitmapScalingMode="NearestNeighbor"
                 Width="{Binding Source.(BitmapSource.PixelWidth), ElementName=Img}" Height="{Binding Source.(BitmapSource.PixelHeight), ElementName=Img}"
                 Source="{sd:MultiBinding {Binding CurrentSprite.Source},
                                            {Binding Cache}, Converter={valueConverters:UFileToBitmapImage}}">
            <i:Interaction.Behaviors>
              <behaviors:BindActualSizeBehavior ActualWidth="{Binding Viewport.ContentWidth, Mode=OneWayToSource}" ActualHeight="{Binding Viewport.ContentHeight, Mode=OneWayToSource}"/>
              <sd:MultiOverrideCursorBehavior>
                <!-- FIXME: Why can't we bind directly to the local DataContext?
                     CursorOverrideRule inherits from Freezable, so it is supposed to work.
                -->
                <sd:CursorOverrideRule When="{Binding DataContext.Editor.ToolMode, Source={sd:XamlRoot}, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static sevm:SpriteSheetEditorToolMode.ColorPick}, Mode=OneWay}"
                                         Cursor="{x:Static view:SpriteEditorView.ColorPickerCursor}" ForceCursor="True" />
                <sd:CursorOverrideRule When="{Binding DataContext.Editor.ToolMode, Source={sd:XamlRoot}, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static sevm:SpriteSheetEditorToolMode.MagicWand}, Mode=OneWay}"
                                         Cursor="{x:Static view:SpriteEditorView.MagicWandCursor}" ForceCursor="True" />
              </sd:MultiOverrideCursorBehavior>
              <sd:OnMouseEventBehavior EventType="PreviewMouseDown" Command="{Binding FindSpriteRegionCommand}"/>
            </i:Interaction.Behaviors>
            <Image.LayoutTransform>
              <TransformGroup>
                <ScaleTransform ScaleX="{Binding Viewport.ScaleFactor}" ScaleY="{Binding Viewport.ScaleFactor}"/>
              </TransformGroup>
            </Image.LayoutTransform>
          </Image>
          <!-- Tools Canvas -->
          <Canvas SnapsToDevicePixels="True"
                  IsHitTestVisible="{Binding UsingPixelTool, Converter={sd:InvertBool}, Mode=OneWay}">
            <!-- Dark Background -->
            <Border Canvas.Left="0" Canvas.Top="0"
                    BorderBrush="{StaticResource NormalBorderBrush}" Opacity="0.75"
                    Width="{Binding Viewport.ActualContentWidth}" Height="{Binding Viewport.ActualContentHeight}"
                    BorderThickness="{sd:MultiBinding {Binding CurrentSprite.TextureRegion.ActualLeft},
                                                        {Binding CurrentSprite.TextureRegion.ActualTop},
                                                        {Binding CurrentSprite.TextureRegion.ActualRightOffset},
                                                        {Binding CurrentSprite.TextureRegion.ActualBottomOffset},
                                                        Converter={sd:ThicknessMultiConverter}}"
                    Visibility="{Binding SelectionHighlightEnabled, Converter={sd:VisibleOrCollapsed}}"/>
            <!-- Remarks:
              - left/top offsets should be equal.
              - width/height offsets are the double of the left/top offsets.
            -->
            <Grid Canvas.Left="{Binding CurrentSprite.TextureRegion.ActualLeft, Converter={sd:SumNum}, ConverterParameter={sd:Double -6}}"
                  Canvas.Top="{Binding CurrentSprite.TextureRegion.ActualTop, Converter={sd:SumNum}, ConverterParameter={sd:Double -6}}"
                  Width="{Binding CurrentSprite.TextureRegion.ActualWidth, Converter={sd:SumNum}, ConverterParameter={sd:Double 12}}"
                  Height="{Binding CurrentSprite.TextureRegion.ActualHeight, Converter={sd:SumNum}, ConverterParameter={sd:Double 12}}">
              <FrameworkElement.Resources>
                <!-- Thumb style -->
                <Style TargetType="{x:Type Thumb}" BasedOn="{StaticResource {x:Type Thumb}}">
                  <Setter Property="Background" Value="Transparent"/>
                  <Setter Property="BorderBrush" Value="{x:Null}"/>
                  <Setter Property="BorderThickness" Value="0"/>
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="{TemplateBinding BorderThickness}">
                        </Border>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </FrameworkElement.Resources>
              <!-- Border margin is equal to (left/top offset of the canvas - border thickness + 0.1) -->
              <Rectangle x:Name="TextureRegionBorder"
                         Margin="4.1"
                         StrokeThickness="2" Stroke="{Binding BorderColor, Converter={sd:ColorConverter}}" Fill="Transparent" />
              <Rectangle x:Name="SpriteBorders"
                         Margin="{Binding CurrentSprite.SpriteBorders.ActualBorders, Mode=OneWay, Converter={sd:SumThickness}, ConverterParameter={sd:Thickness 5}}"
                         Visibility="{Binding Type, Converter={sd:Chained {sd:IsEqualToParam}, {sd:VisibleOrCollapsed}, Parameter1={x:Static sprite:SpriteSheetType.UI}}, Mode=OneWay}"
                         StrokeThickness="2" Stroke="{Binding BorderColor, Converter={sd:ColorConverter}}" StrokeDashArray="4 4" Fill="Transparent"/>
              <Canvas x:Name="SpriteCenter"
                      Margin="{Binding CurrentSprite.SpriteCenter.ActualCenter, Mode=OneWay, Converter={sd:SumThickness}, ConverterParameter={sd:Thickness -2}}"
                      Visibility="{Binding Type, Converter={sd:Chained {sd:IsEqualToParam}, {sd:VisibleOrCollapsed}, Parameter1={x:Static sprite:SpriteSheetType.Sprite2D}}, Mode=OneWay}">
                <Path Height="16" Width="16" Stretch="UniformToFill" Fill="{Binding BorderColor, Converter={sd:ColorConverter}}"
                      Data="F1 M 35,19L 41,19L 41,35L 57,35L 57,41L 41,41L 41,57L 35,57L 35,41L 19,41L 19,35L 35,35L 35,19 Z " />
              </Canvas>
              <!-- Size tools -->
              <Grid Visibility="{Binding ToolMode, Converter={sd:Chained {sd:IsEqualToParam}, {sd:VisibleOrCollapsed}, Parameter1={x:Static sevm:SpriteSheetEditorToolMode.None}}, Mode=OneWay}">
                <Thumb Margin="10" Cursor="SizeAll" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.TextureRegion}" Direction="Center"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Height="10" Width="10" Cursor="SizeNWSE" VerticalAlignment="Top" HorizontalAlignment="Left">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.TextureRegion}" Direction="TopLeft"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Height="10" Margin="10,0" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.TextureRegion}" Direction="Top"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Height="10" Width="10" Cursor="SizeNESW" VerticalAlignment="Top" HorizontalAlignment="Right">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.TextureRegion}" Direction="TopRight"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Margin="0,10" Width="10" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.TextureRegion}" Direction="Left"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Margin="0,10" Width="10" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.TextureRegion}" Direction="Right"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Height="10" Width="10" Cursor="SizeNESW" VerticalAlignment="Bottom" HorizontalAlignment="Left">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.TextureRegion}" Direction="BottomLeft"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Height="10" Margin="10,0" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.TextureRegion}" Direction="Bottom"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Height="10" Width="10" Cursor="SizeNWSE" VerticalAlignment="Bottom" HorizontalAlignment="Right">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.TextureRegion}" Direction="BottomRight"/>
                  </i:Interaction.Behaviors>
                </Thumb>
              </Grid>
              <!-- Center tool -->
              <Canvas Visibility="{Binding ToolMode, Converter={sd:Chained {sd:IsEqualToParam}, {sd:VisibleOrCollapsed}, Parameter1={x:Static sevm:SpriteSheetEditorToolMode.SpriteCenter}}, Mode=OneWay}"
                      Margin="{Binding CurrentSprite.SpriteCenter.ActualCenter, Mode=OneWay, Converter={sd:SumThickness}, ConverterParameter={sd:Thickness -2}}">
                <Thumb Height="16" Width="16" Cursor="SizeAll">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.SpriteCenter}" Direction="Center" />
                  </i:Interaction.Behaviors>
                </Thumb>
              </Canvas>
              <!-- Borders tool -->
              <Grid Visibility="{Binding ToolMode, Converter={sd:Chained {sd:IsEqualToParam}, {sd:VisibleOrCollapsed}, Parameter1={x:Static sevm:SpriteSheetEditorToolMode.Borders}}, Mode=OneWay}"
                    Margin="{Binding CurrentSprite.SpriteBorders.ActualBorders, Mode=OneWay}">
                <Thumb Height="10" Width="10" Cursor="SizeNWSE" VerticalAlignment="Top" HorizontalAlignment="Left">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.SpriteBorders}" Direction="TopLeft"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Height="10" Margin="10,0" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.SpriteBorders}" Direction="Top" />
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Height="10" Width="10" Cursor="SizeNESW" VerticalAlignment="Top" HorizontalAlignment="Right">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.SpriteBorders}" Direction="TopRight"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Margin="0,10" Width="10" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.SpriteBorders}" Direction="Left"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Margin="0,10" Width="10" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.SpriteBorders}" Direction="Right"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Height="10" Width="10" Cursor="SizeNESW" VerticalAlignment="Bottom" HorizontalAlignment="Left">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.SpriteBorders}" Direction="BottomLeft"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Height="10" Margin="10,0" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.SpriteBorders}" Direction="Bottom"/>
                  </i:Interaction.Behaviors>
                </Thumb>

                <Thumb Height="10" Width="10" Cursor="SizeNWSE" VerticalAlignment="Bottom" HorizontalAlignment="Right">
                  <i:Interaction.Behaviors>
                    <behaviors:ThumbBehavior Target="{Binding CurrentSprite.SpriteBorders}" Direction="BottomRight"/>
                  </i:Interaction.Behaviors>
                </Thumb>
              </Grid>
            </Grid>
          </Canvas>
        </Grid>
      </ScrollViewer>
    </DockPanel>
  </Grid>
</UserControl>
