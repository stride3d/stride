<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:templateProviders="clr-namespace:Stride.Assets.Presentation.TemplateProviders"
                    xmlns:sd="http://schemas.stride3d.net/xaml/presentation"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:qvm="clr-namespace:Stride.Core.Presentation.Quantum.ViewModels;assembly=Stride.Core.Presentation.Quantum"
                    xmlns:view="clr-namespace:Stride.Core.Presentation.Quantum.View;assembly=Stride.Core.Presentation.Quantum">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="/Stride.Core.Assets.Editor;component/View/DefaultPropertyTemplateProviders.xaml"/>
  </ResourceDictionary.MergedDictionaries>

  <templateProviders:SkeletonModelPropertyTemplateProvider x:Key="ModelNodeInformationListTemplateProvider" OverrideRule="Most"
                                                           sd:PropertyViewHelper.TemplateCategory="PropertyHeader" Property="NodeInformationList">
    <!-- This template is similar to HeaderReadOnlyProperty except that the buttons are different in a specific section -->
    <DataTemplate>
      <Grid Visibility="{Binding IsVisible, Converter={sd:VisibleOrCollapsed}}" sd:PropertyViewHelper.Increment="0"
            Margin="{Binding Offset, Converter={sd:NumericToThickness}, ConverterParameter={sd:Thickness 1,0,0,0},
                             RelativeSource={RelativeSource AncestorType=sd:PropertyViewItem}, Mode=OneWay}" x:Name="Grid">
        <Border x:Name="PART_Name" MinHeight="26" Margin="6" Background="{StaticResource EmphasisColorBrush}"
                      VerticalAlignment="Stretch" HorizontalAlignment="Stretch" ToolTip="{Binding Documentation}"/>
        <DockPanel Margin="10,8" x:Name="HeaderDockPanel">
          <!-- Difference from HeaderReadOnlyProperty starts here -->
          <UniformGrid DockPanel.Dock="Right" Rows="1" HorizontalAlignment="Right">
            <Button Margin="6,0" Padding="8,2" VerticalAlignment="Center" Content="{sd:Localize All, Context=Button}"
                Command="{Binding SkeletonNodePreserveAll}" CommandParameter="{sd:True}"/>
            <Button Margin="6,0" Padding="8,2" VerticalAlignment="Center" Content="{sd:Localize None, Context=Button}"
                Command="{Binding SkeletonNodePreserveAll}" CommandParameter="{sd:False}"/>
          </UniformGrid>
          <!-- Difference from HeaderReadOnlyProperty ends here -->
          <ToggleButton DockPanel.Dock="Left" Template="{StaticResource TreeExpanderToggleButton}" Width="16" Height="16"
                        IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType=sd:PropertyViewItem}}"
                        Visibility="{Binding VisibleChildrenCount, Converter={sd:Chained {sd:NumericToBool}, {sd:VisibleOrCollapsed}}}"/>
          <StackPanel Orientation="Horizontal" Margin="8,0,0,0">
            <CheckBox Margin="4,0" VerticalAlignment="Center"
                      IsThreeState="{Binding Enabled.NodeValue, Converter={sd:IsEqualToParam}, ConverterParameter={x:Static qvm:NodeViewModel.DifferentValues}}"
                      IsChecked="{Binding Enabled.NodeValue, Converter={view:DifferentValueToParam}, ConverterParameter={x:Null}}"
                      Visibility="{Binding HasChild_Enabled, Converter={sd:VisibleOrCollapsed}}"/>
            <Image Source="{Binding NodeValue, Converter={sd:Chained {sd:ObjectToType}, {sd:TypeToResource}}}" MaxWidth="16" MaxHeight="16"
                   RenderOptions.BitmapScalingMode="NearestNeighbor" Margin="0,0,4,0"/>
            <TextBlock x:Name="HeaderTextBlock" FontSize="16" TextTrimming="CharacterEllipsis"
                       Text="{Binding DisplayName, Mode=OneWay}" HorizontalAlignment="Left" VerticalAlignment="Center"/>
          </StackPanel>
        </DockPanel>
        <i:Interaction.Behaviors>
          <sd:PropertyViewItemDragDropBehavior CanDrop="False" CanInsert="False" DragVisualTemplate="{StaticResource DragVisualTemplate}"/>
        </i:Interaction.Behaviors>
      </Grid>
      <DataTemplate.Triggers>
        <DataTrigger Binding="{sd:MultiBinding {Binding IsOverridden},
                                                 {Binding Enabled.IsOverridden},
                                                 {Binding InlinedProperty.IsOverridden},
                                                 Converter={sd:OrMultiConverter}}" Value="{sd:True}">
          <Setter TargetName="HeaderTextBlock" Property="FontWeight" Value="Bold"/>
        </DataTrigger>
        <DataTrigger Binding="{sd:MultiBinding {Binding HasBase, FallbackValue={sd:False}},
                                                 {Binding IsInherited, FallbackValue={sd:True}},
                                                 {Binding Enabled.IsInherited, FallbackValue={sd:True}},
                                                 {Binding InlinedProperty.IsInherited, FallbackValue={sd:True}},
                                                 Converter={sd:AndMultiConverter}}" Value="{sd:True}">
          <Setter TargetName="HeaderTextBlock" Property="Opacity" Value="0.5"/>
        </DataTrigger>
        <DataTrigger Binding="{Binding NodeValue}" Value="{x:Static qvm:NodeViewModel.DifferentValues}">
          <Setter TargetName="HeaderTextBlock" Property="Text" Value="{sd:Localize (Different values)}"/>
        </DataTrigger>
        <DataTrigger Binding="{Binding Level, Converter={sd:IsEqual}, ConverterParameter=2}" Value="True">
          <Setter TargetName="PART_Name" Property="Opacity" Value="0.6"/>
          <Setter TargetName="HeaderTextBlock" Property="FontSize" Value="14"/>
        </DataTrigger>
        <DataTrigger Binding="{Binding Level, Converter={sd:IsGreater}, ConverterParameter=2}" Value="True">
          <Setter TargetName="PART_Name" Property="Opacity" Value="0.5"/>
          <Setter TargetName="HeaderTextBlock" Property="FontSize" Value="12"/>
          <Setter TargetName="HeaderDockPanel" Property="Margin" Value="10,4"/>
          <Setter TargetName="Grid" Property="Margin" Value="15,0,0,0"/>
        </DataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </templateProviders:SkeletonModelPropertyTemplateProvider>

</ResourceDictionary>
