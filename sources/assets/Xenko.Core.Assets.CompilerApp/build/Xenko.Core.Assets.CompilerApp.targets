<Project InitialTargets="_XenkoCheckVisualCRuntime2013" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Check if Visual C++ Runtime 2013 is properly installed -->
  <!-- Should be moved to Xenko.Assets as soon as transitive build dependencies are enabled by default in VS2019 (https://github.com/NuGet/Home/issues/6091#issuecomment-438073285) -->
  <Target Name="_XenkoCheckVisualCRuntime2013" Condition="'$(MSBuildRuntimeType)' == 'Full'">
    <ItemGroup>
      <_XenkoVisualCRuntime2013 Include="Visual C++ Redistributable for Visual Studio 2013 x86">
        <Version>$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DevDiv\VC\Servicing\12.0\RuntimeMinimum', 'Version', null, RegistryView.Registry32))</Version>
        <ExpectedVersion>12.0.21005</ExpectedVersion>
        <DownloadUrl>http://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x86.exe</DownloadUrl>
      </_XenkoVisualCRuntime2013>
      <_XenkoVisualCRuntime2013 Include="Visual C++ Redistributable for Visual Studio 2013 x64">
        <Version>$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DevDiv\VC\Servicing\12.0\RuntimeMinimum', 'Version', null, RegistryView.Registry64))</Version>
        <ExpectedVersion>12.0.21005</ExpectedVersion>
        <DownloadUrl>http://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe</DownloadUrl>
      </_XenkoVisualCRuntime2013>

      <_XenkoVisualCRuntime2013NotInstalled Include="@(_XenkoVisualCRuntime2013)" Condition="'%(_XenkoVisualCRuntime2013.Version)' == '' Or $([System.Version]::Parse('%(Version)').CompareTo($([System.Version]::Parse('%(_XenkoVisualCRuntime2013.ExpectedVersion)')))) &lt; 0" />
    </ItemGroup>

    <Error Condition="'@(_XenkoVisualCRuntime2013NotInstalled)' != ''" Text="@(_XenkoVisualCRuntime2013NotInstalled->'%(Identity) is not installed. Please download from %(DownloadUrl)', '%0a')"/>
  </Target>
  <!-- 
  *****************************************************************************************************************************
  Compile Asset 
  *****************************************************************************************************************************
  -->
  <PropertyGroup>
    <PrepareForRunDependsOn>
      $(PrepareForRunDependsOn);
      XenkoCompileAsset
    </PrepareForRunDependsOn>

    <!--This variable can be overriden by a platform specific targets (in case the executable is located into an assembly dll )-->
    <XenkoIsExecutable Condition=" '$(OutputType)' == 'Exe'">true</XenkoIsExecutable>
    <XenkoIsExecutable Condition=" '$(OutputType)' == 'WinExe'">true</XenkoIsExecutable>
    <XenkoIsExecutable Condition=" '$(OutputType)' == 'AppContainerExe'">true</XenkoIsExecutable>
    <XenkoIsExecutable Condition=" '$(AndroidApplication)' == 'true'">true</XenkoIsExecutable>

    <!--asset BuildPath for all platforms (same as package)-->
    <XenkoCompileAssetBuildPath Condition="'$(XenkoCompileAssetBuildPath)' == ''">$(ProjectDir)$(BaseIntermediateOutputPath)xenko\assetbuild\data</XenkoCompileAssetBuildPath>

    <!--asset OutputPath for Android.-->
    <XenkoCompileAssetOutputPath Condition="'$(XenkoCompileAssetOutputPath)' == '' and '$(XenkoPlatform)' == 'Android'">$(ProjectDir)$(IntermediateOutputPath)assets\data</XenkoCompileAssetOutputPath>

    <!--asset OutputPath for other platforms. Note: this is overridden for UnitTests projects. -->
    <XenkoCompileAssetOutputPath Condition="'$(XenkoCompileAssetOutputPath)' == ''">$(TargetDir)data</XenkoCompileAssetOutputPath>

    <XenkoCompileAssetCommand Condition="'$(XenkoCompileAssetCommand)' == '' And Exists('$(MSBuildThisFileDirectory)..\lib\net472\Xenko.Core.Assets.CompilerApp.exe')">$(MSBuildThisFileDirectory)..\lib\net472\Xenko.Core.Assets.CompilerApp.exe</XenkoCompileAssetCommand>
    <XenkoCompileAssetCommand Condition="'$(XenkoCompileAssetCommand)' == '' And Exists('$(MSBuildThisFileDirectory)..\bin\$(Configuration)\net472\Xenko.Core.Assets.CompilerApp.exe')">$(MSBuildThisFileDirectory)..\bin\$(Configuration)\net472\Xenko.Core.Assets.CompilerApp.exe</XenkoCompileAssetCommand>

    <!--<XenkoCompileAssetCommandProxy Condition="'$(DisableAssetCompilerExecServerProxy)' == 'true' Or '$(XenkoDisableAssetCompilerExecServerProxy)' == 'true'">&quot;$(XenkoCompileAssetCommand)&quot;</XenkoCompileAssetCommandProxy>
    <XenkoCompileAssetCommandProxy Condition="'$(XenkoCompileAssetCommandProxy)' == ''">&quot;$(XenkoPackageXenkoSdkBin)\Xenko.Core.Assets.CompilerClient.exe&quot;</XenkoCompileAssetCommandProxy>-->
    <XenkoCompileAssetCommandProxy>&quot;$(XenkoCompileAssetCommand)&quot;</XenkoCompileAssetCommandProxy>
  </PropertyGroup>

  <!--Compile assets for all XenkoPackage items and only for an executable-->
  <Target Name="XenkoCompileAsset" Condition="'$(XenkoIsExecutable)' == 'true'">
    <PropertyGroup>
      <XenkoCompileAssetCommandProxy>$(XenkoCompileAssetCommandProxy) $(XenkoCompileAssetOptions) --disable-auto-compile --project-configuration &quot;$(Configuration)&quot; --platform=$(XenkoPlatform) --project-configuration=$(Configuration) --property:RuntimeIdentifier=$(RuntimeIdentifier) --output-path=&quot;$(XenkoCompileAssetOutputPath)&quot; --build-path=&quot;$(XenkoCompileAssetBuildPath)&quot; --package-file=&quot;$(MSBuildProjectFullPath)&quot; --log-pipe=&quot;$(XenkoBuildEngineLogPipeUrl)&quot;</XenkoCompileAssetCommandProxy>
      <XenkoCompileAssetCommandProxy Condition="'$(XenkoBuildEngineLogVerbose)' != ''">$(XenkoCompileAssetCommandProxy) --verbose</XenkoCompileAssetCommandProxy>
      <XenkoCompileAssetCommandProxy Condition="'$(XenkoBuildEngineLogDebug)' != ''">$(XenkoCompileAssetCommandProxy) --debug</XenkoCompileAssetCommandProxy>
    </PropertyGroup>

    <!-- Ensure the output directory exists -->
    <MakeDir Directories="$(TargetDir)"/>

    <!-- Compile assets -->
    <Exec WorkingDirectory="$(TargetDir)" Command="$(XenkoCompileAssetCommandProxy)" />
    
    <!-- Android specific: include build output in _AndroidAssetsDest so that APK is regenerated -->
    <ItemGroup Condition="'$(XenkoPlatform)' == 'Android'">
      <_AndroidAssetsDest Include="$(XenkoCompileAssetOutputPath)\**\*.*" />
    </ItemGroup>
  </Target>

  <!-- Clean assets -->
  <Target Name="XenkoCleanAsset" Condition="'$(XenkoIsExecutable)' == 'true'">
    <RemoveDir Condition="Exists('$(XenkoCompileAssetBuildPath)')" ContinueOnError="true"  Directories="$(XenkoCompileAssetBuildPath)"/>
    <RemoveDir Condition="Exists('$(XenkoCompileAssetOutputPath)')" ContinueOnError="true"  Directories="$(XenkoCompileAssetOutputPath)"/>
  </Target>

  <!-- UWP: Adjust Appx folders -->
  <PropertyGroup Condition="'$(XenkoIsExecutable)' == 'true' And '$(XenkoPlatform)' == 'UWP'">
    <!-- Use OutputPath to define AppxPackage directory -->
    <AppxPackageDir>$(OutputPath)\$(AppxPackageDirName)\</AppxPackageDir>
    <AppxPackageTestDir>$(AppxPackageDir)Test\</AppxPackageTestDir>
    <AppxPackageName>$(AssemblyName)</AppxPackageName>
  </PropertyGroup>

  <!-- UWP & iOS: Compile and Transform Assets into Content during PrepareResources phase -->
  <PropertyGroup Condition="'$(XenkoIsExecutable)' == 'true' And ('$(XenkoPlatform)' == 'UWP' Or '$(XenkoPlatform)' == 'Android')">
    <PrepareResourcesDependsOn>
      _XenkoDeployAssetsAsContent;
      $(PrepareResourcesDependsOn)
    </PrepareResourcesDependsOn>
  </PropertyGroup>
  <Target Name="_XenkoDeployAssetsAsContent" DependsOnTargets="XenkoCompileAsset">
    <ItemGroup>
      <!-- Define the Assets to deploy -->
      <AssetsToDeploy Include="$(XenkoCompileAssetOutputPath)\**\*.*"/>

      <Content Include="@(AssetsToDeploy)">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <Link>data\%(RecursiveDir)%(Filename)%(Extension)</Link>
      </Content>
    </ItemGroup>
  </Target>
  
  <!-- Publish: always deploy files as content -->
  <Target Name="_XenkoDeployAssetsPublish" DependsOnTargets="XenkoCompileAsset" AfterTargets="ComputeFilesToPublish">
    <ItemGroup>
      <!-- Define the Assets to deploy -->
      <AssetsToPublish Include="$(XenkoCompileAssetOutputPath)\**\*.*"/>

      <!-- Define the Assets to deploy -->
      <ResolvedFileToPublish Include="@(AssetsToPublish)">
        <RelativePath>data\%(RecursiveDir)%(Filename)%(Extension)</RelativePath>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

  <!-- Android -->
  <Target Name="_XenkoDeployAssetsAndroid" BeforeTargets="XenkoCompileAsset" Condition="'$(XenkoPlatform)' == 'Android'">
    <!-- Add .bundle to list of uncompressed extensions -->
    <PropertyGroup>
      <AndroidStoreUncompressedFileExtensions>$(AndroidStoreUncompressedFileExtensions);.bundle</AndroidStoreUncompressedFileExtensions>
    </PropertyGroup>
  </Target>

  <!-- Pack target -->
  <!--<UsingTask TaskName="Xenko.Core.Tasks.PackAssets" AssemblyFile="$(XenkoCompileAssetCommand)" />-->
  <Target Name="_XenkoPrepareAssetsForPack" BeforeTargets="_GetPackageFiles">
    <!-- We use exec version rather than task version, otherwise file will be locked during rebuild -->
    <!--<PackAssets ProjectFile="$(MSBuildProjectFile)" IntermediatePackagePath="$(IntermediateOutputPath)\xenko">
      <Output TaskParameter="GeneratedItems" ItemName="None"/>
    </PackAssets>-->
    <Exec Command="&quot;$(XenkoCompileAssetCommand)&quot; --pack --package-file=&quot;$(MSBuildProjectFullPath)&quot; --build-path=&quot;$(ProjectDir)$(BaseIntermediateOutputPath)xenko\pack&quot;" ConsoleToMsBuild="true">
      <Output TaskParameter="ConsoleOutput" ItemName="PackAssetsLine" />
    </Exec>
    <ItemGroup>
      <PackAssetsLine Update="@(PackAssetsLine)">
        <SourcePath>$([System.String]::new('%(Identity)').Split('|')[0])</SourcePath>
        <PackagePath>$([System.String]::new('%(Identity)').Split('|')[1])</PackagePath>
      </PackAssetsLine>
      <None Include="%(PackAssetsLine.SourcePath)">
        <Pack>true</Pack>
        <PackagePath>%(PackAssetsLine.PackagePath)</PackagePath>
      </None>
    </ItemGroup>
  </Target>
</Project>
