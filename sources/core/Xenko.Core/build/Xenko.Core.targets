<Project InitialTargets="XenkoCheckRequirements;_XenkoCheckVisualCRuntime2015" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--Check requirements when running this build file -->
  <Target Name="XenkoCheckRequirements">
    <Error Condition="'$(XenkoPlatform)' == ''" Text="The property %24(XenkoPlatform) must be defined by the project"/>

    <!-- If we compile without Visual Studio, still properly resolve platform if SolutionPath is given -->
    <MSBuild Projects="$(SolutionPath)"
             Condition="'$(BuildingInsideVisualStudio)' != 'true' and '$(BuildingSolutionFile)' != 'true' and '$(SolutionPath)' != '' and '$(SolutionPath)' != '*Undefined*'"
             Targets="GetSolutionConfigurationContents"
             Properties="Configuration=$(Configuration);Platform=$(SolutionPlatform)"
             ContinueOnError="$(ContinueOnError)">
      <Output TaskParameter="TargetOutputs" PropertyName="CurrentSolutionConfigurationContents"/>
    </MSBuild>
  </Target>
  <!-- Check if Visual C++ Runtime 2015 is properly installed -->
  <Target Name="_XenkoCheckVisualCRuntime2015" Condition="'$(MSBuildRuntimeType)' == 'Full'">
    <ItemGroup>
      <_XenkoVisualCRuntime2015 Include="Visual C++ Redistributable for Visual Studio 2015 x86">
        <Version>$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DevDiv\VC\Servicing\14.0\RuntimeMinimum', 'Version', null, RegistryView.Registry32))</Version>
        <ExpectedVersion>14.0.23026</ExpectedVersion>
        <DownloadUrl>http://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x86.exe</DownloadUrl>
      </_XenkoVisualCRuntime2015>
      <_XenkoVisualCRuntime2015 Include="Visual C++ Redistributable for Visual Studio 2015 x64">
        <Version>$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DevDiv\VC\Servicing\14.0\RuntimeMinimum', 'Version', null, RegistryView.Registry64))</Version>
        <ExpectedVersion>14.0.23026</ExpectedVersion>
        <DownloadUrl>http://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x64.exe</DownloadUrl>
      </_XenkoVisualCRuntime2015>

      <_XenkoVisualCRuntime2015NotInstalled Include="@(_XenkoVisualCRuntime2015)" Condition="'%(_XenkoVisualCRuntime2015.Version)' == '' Or $([System.Version]::Parse('%(Version)').CompareTo($([System.Version]::Parse('%(_XenkoVisualCRuntime2015.ExpectedVersion)')))) &lt; 0" />
    </ItemGroup>

    <Error Condition="'@(_XenkoVisualCRuntime2015NotInstalled)' != ''" Text="@(_XenkoVisualCRuntime2015NotInstalled->'%(Identity) is not installed. Please download from %(DownloadUrl)', '%0a')"/>
  </Target>
  
  <!-- 
  *****************************************************************************************************************************
  Platform Detection
  *****************************************************************************************************************************
  -->
  <PropertyGroup>
    <!-- Windows10 was renammed into UWP -->
    <XenkoPlatform Condition="'$(XenkoPlatform)' == 'Windows10'">UWP</XenkoPlatform>
    <!-- Default mappings -->
    <XenkoPlatform Condition="'$(XenkoPlatform)' == '' And '$(TargetPlatformIdentifier)' == 'UAP'">UWP</XenkoPlatform>
    <XenkoPlatform Condition="'$(XenkoPlatform)' == '' And '$(TargetFrameworkIdentifier)' == 'MonoAndroid'">Android</XenkoPlatform>
    <XenkoPlatform Condition="'$(XenkoPlatform)' == '' And '$(TargetFrameworkIdentifier)' == 'Xamarin.iOS'">iOS</XenkoPlatform>
    <XenkoPlatform Condition="'$(XenkoPlatform)' == '' And $(RuntimeIdentifier.StartsWith('linux'))">Linux</XenkoPlatform>
    <XenkoPlatform Condition="'$(XenkoPlatform)' == '' And $(RuntimeIdentifier.StartsWith('osx'))">macOS</XenkoPlatform>
    <XenkoPlatform Condition="'$(XenkoPlatform)' == ''">Windows</XenkoPlatform>
  </PropertyGroup>

  <!-- If not set, Android executable doesn't work properly because ResolveNuGetPackageAssets has no NuGetRuntimeIdentifier and use only the ref assemblies -->
  <PropertyGroup Condition="'$(XenkoPlatform)' == 'Android' And '$(AndroidApplication)' == 'true'">
    <RuntimeIdentifier>win</RuntimeIdentifier>
    <NuGetRuntimeIdentifier>win</NuGetRuntimeIdentifier>
  </PropertyGroup>

  <!-- 
  *****************************************************************************************************************************
  Assembly Processor
  *****************************************************************************************************************************
  -->
  <PropertyGroup>
    <!--By default, turn on assembly processor-->
    <XenkoAssemblyProcessor Condition="'$(XenkoAssemblyProcessor)' == ''">true</XenkoAssemblyProcessor>
    <XenkoAssemblyProcessorPath Condition="Exists('$(MSBuildThisFileDirectory)..\tools\AssemblyProcessor\Xenko.Core.AssemblyProcessor.Packed.exe')">$(MSBuildThisFileDirectory)..\tools\AssemblyProcessor\Xenko.Core.AssemblyProcessor.Packed.exe</XenkoAssemblyProcessorPath>
    <XenkoAssemblyProcessorPath Condition="Exists('$(MSBuildThisFileDirectory)..\..\..\..\deps\AssemblyProcessor\Xenko.Core.AssemblyProcessor.Packed.exe')">$(MSBuildThisFileDirectory)..\..\..\..\deps\AssemblyProcessor\Xenko.Core.AssemblyProcessor.Packed.exe</XenkoAssemblyProcessorPath>
  </PropertyGroup>
  <UsingTask TaskName="AssemblyProcessorTask" AssemblyFile="$(XenkoAssemblyProcessorPath)" Condition=" '$(XenkoAssemblyProcessorPath)' != '' And '$(XenkoAssemblyProcessorDev)' != 'true' "/>
  <Target Name="XenkoRunAssemblyProcessor" DependsOnTargets="ResolveAssemblyReferences">
    <WriteLinesToFile File="$(IntermediateOutputPath)XenkoReferences.cache" Lines="@(ReferencePath)" Overwrite="true" />
    <ItemGroup>
      <!-- We want list of references coming from direct and explicit PackageReference. We are using metadata to combine ReferencePath and PackageReference items https://stackoverflow.com/a/18032552 -->
      <XenkoAddReference Include="@(ReferencePath)" Condition="'%(PackageReference.IsImplicitlyDefined)' != 'true'">
        <NuGetPackageReference>%(PackageReference.Identity)</NuGetPackageReference>
      </XenkoAddReference>
      <XenkoAddReference Remove="@(XenkoAddReference)" Condition="'%(XenkoAddReference.NuGetPackageId)' != '%(XenkoAddReference.NuGetPackageReference)' Or ('%(XenkoAddReference.ExternallyResolved)' != 'true' And '%(XenkoAddReference.BuildReference)' != 'true')"/>
      <!-- Also include non-nuget references (Reference and ProjectReference) -->
      <XenkoAddReference Include="@(ReferencePath)" Condition="'%(ReferencePath.NuGetPackageId)' == ''"/>
    </ItemGroup>
    <PropertyGroup>
      <XenkoAssemblyProcessorOptions Condition="'$(XenkoAssemblyProcessorOptions)' == ''">--auto-notify-property --parameter-key --auto-module-initializer --serialization</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions Condition="'$(DocumentationFile)' != ''">$(XenkoAssemblyProcessorOptions) --docfile="$(DocumentationFile)"</XenkoAssemblyProcessorOptions>
      <!-- Physics, Particles and SpriteStudio assembly is actually hard coded/referenced here, remove once a better system is in place! -->
      <!-- Please keep in sync with AssemblyRecompiler.cs -->
      <XenkoAssemblyProcessorOptions>$(XenkoAssemblyProcessorOptions) @(XenkoAddReference->'--add-reference=%22%(Identity)%22',' ')</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions Condition="'$(DocumentationFile)' != ''">$(XenkoAssemblyProcessorOptions) --docfile="$(DocumentationFile)"</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions>$(XenkoAssemblyProcessorOptions) --references-file="$(IntermediateOutputPath)XenkoReferences.cache"</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions>$(XenkoAssemblyProcessorOptions) --platform=$(XenkoPlatform) --targetFramework=$(XenkoNETFrameworkVersion) "$(IntermediateOutputPath)$(TargetName)$(TargetExt)"</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions Condition="'$(AssemblyOriginatorKeyFile)' != ''">$(XenkoAssemblyProcessorOptions) --signkeyfile="$(AssemblyOriginatorKeyFile)" --delete-on-error</XenkoAssemblyProcessorOptions>
    </PropertyGroup>
    
    <!-- Run assembly processor -->
    <Message Condition=" '$(XenkoAssemblyProcessorDev)' != 'true' " Importance="low" Text="&quot;$(XenkoAssemblyProcessorPath)&quot; $(XenkoAssemblyProcessorOptions)"/>
    <AssemblyProcessorTask Condition=" '$(XenkoAssemblyProcessorDev)' != 'true' " Arguments="$(XenkoAssemblyProcessorOptions)"/>
    <!-- Dev mode: don't use task to avoid locking the file -->
    <Exec Condition=" '$(XenkoAssemblyProcessorDev)' == 'true' " Command="&quot;$(XenkoAssemblyProcessorPath)&quot; $(XenkoAssemblyProcessorOptions)"/>
  </Target>
  <PropertyGroup Condition=" '$(XenkoAssemblyProcessor)' == 'true'">
    <PrepareForRunDependsOn>
      XenkoRunAssemblyProcessor;
      $(PrepareForRunDependsOn)
    </PrepareForRunDependsOn>
  </PropertyGroup>

  <!-- 
  *****************************************************************************************************************************
  NuGet tweaks
  *****************************************************************************************************************************
  -->
  <!-- Workaround to copy .xml and .pdb files for new csproj targeting (https://github.com/dotnet/sdk/issues/1458#issuecomment-401497095) -->
  <Target Name="_XenkoResolveCopyLocalNuGetPackagePdbsAndXml"
           Condition="$(CopyLocalLockFileAssemblies) == true"
           AfterTargets="ResolveReferences">
    <ItemGroup>
      <ReferenceCopyLocalPaths
        Include="@(ReferenceCopyLocalPaths->'%(RootDir)%(Directory)%(Filename).pdb')"
        Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)' != ''
                    and Exists('%(RootDir)%(Directory)%(Filename).pdb')" />
      <ReferenceCopyLocalPaths
        Include="@(ReferenceCopyLocalPaths->'%(RootDir)%(Directory)%(Filename).xml')"
        Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)' != ''
                    and Exists('%(RootDir)%(Directory)%(Filename).xml')" />
    </ItemGroup>
  </Target>
  
  <!-- 
  *****************************************************************************************************************************
  Dependencies reading (from .ssdeps)
  Important: Please keep in sync with Xenko.Core.PostSettings.Dependencies.Targets
  *****************************************************************************************************************************
  -->
  <!-- List dependency files from .ssdeps -->
  <PropertyGroup>
    <_XenkoListDepsFilesDependsOn>ResolveAssemblyReferences</_XenkoListDepsFilesDependsOn>
    <_XenkoListDepsFilesDependsOn Condition="'$(XenkoPlatform)' == 'Windows' Or '$(XenkoPlatform)' == 'Linux' Or '$(XenkoPlatform)' == 'macOS'">$(_XenkoListDepsFilesDependsOn);ResolvePackageAssets</_XenkoListDepsFilesDependsOn>
  </PropertyGroup>
  <Target Name="_XenkoListDepsFiles" DependsOnTargets="$(_XenkoListDepsFilesDependsOn)">
    <ItemGroup>
      <_XenkoDepsFile Include="@(ReferencePath->'%(RootDir)%(Directory)%(Filename).ssdeps')" Condition="'%(CopyLocal)' != 'false' And Exists('%(RootDir)%(Directory)%(Filename).ssdeps')"/>
      <_XenkoDepsFile Include="@(ReferenceDependencyPaths->'%(RootDir)%(Directory)%(Filename).ssdeps')" Condition="'%(CopyLocal)' != 'false' And Exists('%(RootDir)%(Directory)%(Filename).ssdeps')"/>
      <_XenkoDepsFile Include="@(RuntimeCopyLocalItems->'%(RootDir)%(Directory)%(Filename).ssdeps')" Condition="Exists('%(RootDir)%(Directory)%(Filename).ssdeps')"/>
      <_XenkoDepsFile Include="@(ReferenceCopyLocalPaths->'%(RootDir)%(Directory)%(Filename).ssdeps')" Condition="Exists('%(RootDir)%(Directory)%(Filename).ssdeps')"/>
      <!-- Android -->
      <_XenkoDepsFile Include="@(_ReferencesFromNuGetPackages->'%(RootDir)%(Directory)%(Filename).ssdeps')" Condition="Exists('%(RootDir)%(Directory)%(Filename).ssdeps')"/>
      <None Include="@(_XenkoDepsFile)" CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>

  <!-- Note: this target Outputs are not real, used so that it gets expanded for each file
             also, if _XenkoDepsFile is empty the target is still called so check for it -->
  <Target Name="_XenkoBuildDependencies" DependsOnTargets="_XenkoListDepsFiles" Outputs="%(_XenkoDepsFile.Identity)">
    <!-- Read dependencies from file -->
    <ReadLinesFromFile File="%(_XenkoDepsFile.Identity)" Condition="'%(_XenkoDepsFile.Identity)' != ''">
      <Output TaskParameter="Lines" ItemName="_XenkoDependencyLocal"/>
    </ReadLinesFromFile>
    <PropertyGroup>
      <_XenkoSourceDir>%(_XenkoDepsFile.RootDir)%(_XenkoDepsFile.Directory)</_XenkoSourceDir>
    </PropertyGroup>
    <ItemGroup>
      <_XenkoDependencyLocal>
        <!-- Note: Using regex match rather than regex split or string split to avoid MSBuild MissingMethodException -->
        <Type>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', `(.*);(.*);(.*)`).get_Groups().get_Item(1).ToString())</Type>
        <SourcePath>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', `(.*);(.*);(.*)`).get_Groups().get_Item(2).ToString())</SourcePath>
        <Link>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', `(.*);(.*);(.*)`).get_Groups().get_Item(3).ToString())</Link>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </_XenkoDependencyLocal>
      <_XenkoDependencyContent Include="@(_XenkoDependencyLocal->'$(_XenkoSourceDir)%(SourcePath)')" Condition="'%(_XenkoDependencyLocal.Type)' == 'Content'"/>
      <_XenkoDependencyNativeLib Include="@(_XenkoDependencyLocal->'$(_XenkoSourceDir)%(SourcePath)')" Condition="'%(_XenkoDependencyLocal.Type)' == 'NativeLib'"/>
    </ItemGroup>

    <!-- Message -->
    <Message Importance="Normal" Text="Detected dependency from %(_XenkoDepsFile.FileName)" Condition="'%(_XenkoDepsFile.Identity)' != ''"/>
    <Message Importance="Normal" Text="  %(_XenkoDependencyLocal.Type): %(_XenkoDependencyLocal.Identity) => %(_XenkoDependencyLocal.Link)"/>

    <!-- Cleanup so that _XenkoDependencyLocal is local -->
    <ItemGroup>
      <_XenkoDependencyLocal Remove="@(_XenkoDependencyLocal)"/>
    </ItemGroup>
  </Target>

  <Target Name="_XenkoCopyContent" DependsOnTargets="_XenkoBuildDependencies" AfterTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <Content Include="@(_XenkoDependencyContent)"/>
    </ItemGroup>
  </Target>

  <!-- Copy native libraries to output -->
  <Target Name="_XenkoSetupNativeLibrariesWindows" DependsOnTargets="_XenkoBuildDependencies" AfterTargets="ResolveAssemblyReferences" Condition="('$(XenkoPlatform)' == 'Windows' Or '$(XenkoPlatform)' == 'macOS' Or '$(XenkoPlatform)' == 'Linux') And '$(CopyLocalLockFileAssemblies)' != 'false'">
    <ItemGroup>
      <None Include="@(_XenkoDependencyNativeLib)">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </None>
    </ItemGroup>
  </Target>
  <!-- When publishing, copy native libraries (only needed if CopyLocalLockFileAssemblies is set to false since _XenkoSetupNativeLibrariesWindows won't run) -->
  <Target Name="_XenkoSetupNativeLibrariesDotNetPublish" DependsOnTargets="_XenkoBuildDependencies" AfterTargets="ComputeFilesToPublish" Condition="'$(UsingMicrosoftNETSdk)' == 'true' And '$(CopyLocalLockFileAssemblies)' == 'false'">
    <ItemGroup>
      <ResolvedFileToPublish Include="@(_XenkoDependencyNativeLib)">
        <RelativePath>%(_XenkoDependencyNativeLib.Link)</RelativePath>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>
  <Target Name="_XenkoSetupNativeLibrariesUWP" DependsOnTargets="_XenkoBuildDependencies" AfterTargets="ResolveAssemblyReferences" Condition="'$(XenkoPlatform)' == 'UWP'">
    <PropertyGroup>
      <XenkoCPU Condition="'$(Platform)' == 'x86'">x86</XenkoCPU>
      <XenkoCPU Condition="'$(Platform)' == 'x64'">x64</XenkoCPU>
      <XenkoCPU Condition="'$(Platform)' == 'ARM'">ARM</XenkoCPU>
    </PropertyGroup>
    <ItemGroup>
      <Content Include="@(_XenkoDependencyNativeLib)" Condition="$([System.String]::Copy('%(_XenkoDependencyNativeLib.Link)').StartsWith('$(XenkoCPU)'))">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <Link Condition="'$(XenkoCPU)' != ''">$([System.String]::Copy('%(_XenkoDependencyNativeLib.Link)').Replace('$(XenkoCPU)\', ''))</Link>
      </Content>
    </ItemGroup>
  </Target>
  <Target Name="_XenkoSetupNativeLibrariesAndroid" DependsOnTargets="_XenkoBuildDependencies" AfterTargets="ResolveAssemblyReferences" Condition="'$(XenkoPlatform)' == 'Android'">
    <ItemGroup>
      <AndroidNativeLibrary Include="@(_XenkoDependencyNativeLib)"/>
    </ItemGroup>
  </Target>
  <Target Name="_XenkoSetupNativeLibrariesiOS" DependsOnTargets="_XenkoBuildDependencies" AfterTargets="ResolveAssemblyReferences" Condition=" '$(OutputType)' == 'Exe' And '$(XenkoPlatform)' == 'iOS'">
    <ItemGroup>
      <NativeReference Include="@(_XenkoDependencyNativeLib)">
        <Kind>Static</Kind>
      </NativeReference>
    </ItemGroup>
    <PropertyGroup>
      <MtouchExtraArgs>$(MtouchExtraArgs) --compiler=clang -cxx -gcc_flags '-lstdc++ $(MtouchExtraArgsLibs)'</MtouchExtraArgs>
    </PropertyGroup>
  </Target>
</Project>
