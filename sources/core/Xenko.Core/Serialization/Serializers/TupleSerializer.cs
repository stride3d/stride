// Copyright (c) Xenko contributors (https://xenko.com) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.
//
// <auto-generated/>
using System;
using Xenko.Core.Annotations;

namespace Xenko.Core.Serialization.Serializers
{
    /// <summary>
    /// Serializer for a 1-tuple.
    /// </summary>
    /// <typeparam name="T1">The type of the tuple's component 1.</typeparam>
    [DataSerializerGlobal(typeof(TupleSerializer<>), typeof(Tuple<>), DataSerializerGenericMode.GenericArguments)]
    public class TupleSerializer<T1> : DataSerializer<Tuple<T1>>
    {
        private DataSerializer<T1> item1Serializer;

        /// <inheritdoc/>
        public override void Initialize(SerializerSelector serializerSelector)
        {
            item1Serializer = MemberSerializer<T1>.Create(serializerSelector);
        }

        /// <inheritdoc />
        public override void Serialize([NotNull] ref Tuple<T1> obj, ArchiveMode mode, SerializationStream stream)
        {
            if (mode == ArchiveMode.Serialize)
            {
                item1Serializer.Serialize(obj.Item1, stream);
            }
            else
            {
                var item1 = default(T1);
                item1Serializer.Serialize(ref item1, mode, stream);
                obj = new Tuple<T1>(item1);
            }
        }
    }

	/// <summary>
    /// Serializer for a 1-value tuple.
    /// </summary>
    /// <typeparam name="T1">The type of the tuple's component 1.</typeparam>
    [DataSerializerGlobal(typeof(ValueTupleSerializer<>), typeof(ValueTuple<>), DataSerializerGenericMode.GenericArguments)]
    public class ValueTupleSerializer<T1> : DataSerializer<ValueTuple<T1>>
    {
        private DataSerializer<T1> item1Serializer;

        /// <inheritdoc/>
        public override void Initialize(SerializerSelector serializerSelector)
        {
            item1Serializer = MemberSerializer<T1>.Create(serializerSelector);
        }

        /// <inheritdoc />
        public override void Serialize(ref ValueTuple<T1> obj, ArchiveMode mode, SerializationStream stream)
        {
            if (mode == ArchiveMode.Serialize)
            {
                item1Serializer.Serialize(obj.Item1, stream);
            }
            else
            {
                var item1 = default(T1);
                item1Serializer.Serialize(ref item1, mode, stream);
                obj = new ValueTuple<T1>(item1);
            }
        }
    }

    /// <summary>
    /// Serializer for a 2-tuple.
    /// </summary>
    /// <typeparam name="T1">The type of the tuple's component 1.</typeparam>
    /// <typeparam name="T2">The type of the tuple's component 2.</typeparam>
    [DataSerializerGlobal(typeof(TupleSerializer<,>), typeof(Tuple<,>), DataSerializerGenericMode.GenericArguments)]
    public class TupleSerializer<T1, T2> : DataSerializer<Tuple<T1, T2>>
    {
        private DataSerializer<T1> item1Serializer;
        private DataSerializer<T2> item2Serializer;

        /// <inheritdoc/>
        public override void Initialize(SerializerSelector serializerSelector)
        {
            item1Serializer = MemberSerializer<T1>.Create(serializerSelector);
            item2Serializer = MemberSerializer<T2>.Create(serializerSelector);
        }

        /// <inheritdoc />
        public override void Serialize([NotNull] ref Tuple<T1, T2> obj, ArchiveMode mode, SerializationStream stream)
        {
            if (mode == ArchiveMode.Serialize)
            {
                item1Serializer.Serialize(obj.Item1, stream);
                item2Serializer.Serialize(obj.Item2, stream);
            }
            else
            {
                var item1 = default(T1);
                var item2 = default(T2);
                item1Serializer.Serialize(ref item1, mode, stream);
                item2Serializer.Serialize(ref item2, mode, stream);
                obj = new Tuple<T1, T2>(item1, item2);
            }
        }
    }

	/// <summary>
    /// Serializer for a 2-value tuple.
    /// </summary>
    /// <typeparam name="T1">The type of the tuple's component 1.</typeparam>
    /// <typeparam name="T2">The type of the tuple's component 2.</typeparam>
    [DataSerializerGlobal(typeof(ValueTupleSerializer<,>), typeof(ValueTuple<,>), DataSerializerGenericMode.GenericArguments)]
    public class ValueTupleSerializer<T1, T2> : DataSerializer<ValueTuple<T1, T2>>
    {
        private DataSerializer<T1> item1Serializer;
        private DataSerializer<T2> item2Serializer;

        /// <inheritdoc/>
        public override void Initialize(SerializerSelector serializerSelector)
        {
            item1Serializer = MemberSerializer<T1>.Create(serializerSelector);
            item2Serializer = MemberSerializer<T2>.Create(serializerSelector);
        }

        /// <inheritdoc />
        public override void Serialize(ref ValueTuple<T1, T2> obj, ArchiveMode mode, SerializationStream stream)
        {
            if (mode == ArchiveMode.Serialize)
            {
                item1Serializer.Serialize(obj.Item1, stream);
                item2Serializer.Serialize(obj.Item2, stream);
            }
            else
            {
                var item1 = default(T1);
                var item2 = default(T2);
                item1Serializer.Serialize(ref item1, mode, stream);
                item2Serializer.Serialize(ref item2, mode, stream);
                obj = new ValueTuple<T1, T2>(item1, item2);
            }
        }
    }

    /// <summary>
    /// Serializer for a 3-tuple.
    /// </summary>
    /// <typeparam name="T1">The type of the tuple's component 1.</typeparam>
    /// <typeparam name="T2">The type of the tuple's component 2.</typeparam>
    /// <typeparam name="T3">The type of the tuple's component 3.</typeparam>
    [DataSerializerGlobal(typeof(TupleSerializer<,,>), typeof(Tuple<,,>), DataSerializerGenericMode.GenericArguments)]
    public class TupleSerializer<T1, T2, T3> : DataSerializer<Tuple<T1, T2, T3>>
    {
        private DataSerializer<T1> item1Serializer;
        private DataSerializer<T2> item2Serializer;
        private DataSerializer<T3> item3Serializer;

        /// <inheritdoc/>
        public override void Initialize(SerializerSelector serializerSelector)
        {
            item1Serializer = MemberSerializer<T1>.Create(serializerSelector);
            item2Serializer = MemberSerializer<T2>.Create(serializerSelector);
            item3Serializer = MemberSerializer<T3>.Create(serializerSelector);
        }

        /// <inheritdoc />
        public override void Serialize([NotNull] ref Tuple<T1, T2, T3> obj, ArchiveMode mode, SerializationStream stream)
        {
            if (mode == ArchiveMode.Serialize)
            {
                item1Serializer.Serialize(obj.Item1, stream);
                item2Serializer.Serialize(obj.Item2, stream);
                item3Serializer.Serialize(obj.Item3, stream);
            }
            else
            {
                var item1 = default(T1);
                var item2 = default(T2);
                var item3 = default(T3);
                item1Serializer.Serialize(ref item1, mode, stream);
                item2Serializer.Serialize(ref item2, mode, stream);
                item3Serializer.Serialize(ref item3, mode, stream);
                obj = new Tuple<T1, T2, T3>(item1, item2, item3);
            }
        }
    }

	/// <summary>
    /// Serializer for a 3-value tuple.
    /// </summary>
    /// <typeparam name="T1">The type of the tuple's component 1.</typeparam>
    /// <typeparam name="T2">The type of the tuple's component 2.</typeparam>
    /// <typeparam name="T3">The type of the tuple's component 3.</typeparam>
    [DataSerializerGlobal(typeof(ValueTupleSerializer<,,>), typeof(ValueTuple<,,>), DataSerializerGenericMode.GenericArguments)]
    public class ValueTupleSerializer<T1, T2, T3> : DataSerializer<ValueTuple<T1, T2, T3>>
    {
        private DataSerializer<T1> item1Serializer;
        private DataSerializer<T2> item2Serializer;
        private DataSerializer<T3> item3Serializer;

        /// <inheritdoc/>
        public override void Initialize(SerializerSelector serializerSelector)
        {
            item1Serializer = MemberSerializer<T1>.Create(serializerSelector);
            item2Serializer = MemberSerializer<T2>.Create(serializerSelector);
            item3Serializer = MemberSerializer<T3>.Create(serializerSelector);
        }

        /// <inheritdoc />
        public override void Serialize(ref ValueTuple<T1, T2, T3> obj, ArchiveMode mode, SerializationStream stream)
        {
            if (mode == ArchiveMode.Serialize)
            {
                item1Serializer.Serialize(obj.Item1, stream);
                item2Serializer.Serialize(obj.Item2, stream);
                item3Serializer.Serialize(obj.Item3, stream);
            }
            else
            {
                var item1 = default(T1);
                var item2 = default(T2);
                var item3 = default(T3);
                item1Serializer.Serialize(ref item1, mode, stream);
                item2Serializer.Serialize(ref item2, mode, stream);
                item3Serializer.Serialize(ref item3, mode, stream);
                obj = new ValueTuple<T1, T2, T3>(item1, item2, item3);
            }
        }
    }

    /// <summary>
    /// Serializer for a 4-tuple.
    /// </summary>
    /// <typeparam name="T1">The type of the tuple's component 1.</typeparam>
    /// <typeparam name="T2">The type of the tuple's component 2.</typeparam>
    /// <typeparam name="T3">The type of the tuple's component 3.</typeparam>
    /// <typeparam name="T4">The type of the tuple's component 4.</typeparam>
    [DataSerializerGlobal(typeof(TupleSerializer<,,,>), typeof(Tuple<,,,>), DataSerializerGenericMode.GenericArguments)]
    public class TupleSerializer<T1, T2, T3, T4> : DataSerializer<Tuple<T1, T2, T3, T4>>
    {
        private DataSerializer<T1> item1Serializer;
        private DataSerializer<T2> item2Serializer;
        private DataSerializer<T3> item3Serializer;
        private DataSerializer<T4> item4Serializer;

        /// <inheritdoc/>
        public override void Initialize(SerializerSelector serializerSelector)
        {
            item1Serializer = MemberSerializer<T1>.Create(serializerSelector);
            item2Serializer = MemberSerializer<T2>.Create(serializerSelector);
            item3Serializer = MemberSerializer<T3>.Create(serializerSelector);
            item4Serializer = MemberSerializer<T4>.Create(serializerSelector);
        }

        /// <inheritdoc />
        public override void Serialize([NotNull] ref Tuple<T1, T2, T3, T4> obj, ArchiveMode mode, SerializationStream stream)
        {
            if (mode == ArchiveMode.Serialize)
            {
                item1Serializer.Serialize(obj.Item1, stream);
                item2Serializer.Serialize(obj.Item2, stream);
                item3Serializer.Serialize(obj.Item3, stream);
                item4Serializer.Serialize(obj.Item4, stream);
            }
            else
            {
                var item1 = default(T1);
                var item2 = default(T2);
                var item3 = default(T3);
                var item4 = default(T4);
                item1Serializer.Serialize(ref item1, mode, stream);
                item2Serializer.Serialize(ref item2, mode, stream);
                item3Serializer.Serialize(ref item3, mode, stream);
                item4Serializer.Serialize(ref item4, mode, stream);
                obj = new Tuple<T1, T2, T3, T4>(item1, item2, item3, item4);
            }
        }
    }

	/// <summary>
    /// Serializer for a 4-value tuple.
    /// </summary>
    /// <typeparam name="T1">The type of the tuple's component 1.</typeparam>
    /// <typeparam name="T2">The type of the tuple's component 2.</typeparam>
    /// <typeparam name="T3">The type of the tuple's component 3.</typeparam>
    /// <typeparam name="T4">The type of the tuple's component 4.</typeparam>
    [DataSerializerGlobal(typeof(ValueTupleSerializer<,,,>), typeof(ValueTuple<,,,>), DataSerializerGenericMode.GenericArguments)]
    public class ValueTupleSerializer<T1, T2, T3, T4> : DataSerializer<ValueTuple<T1, T2, T3, T4>>
    {
        private DataSerializer<T1> item1Serializer;
        private DataSerializer<T2> item2Serializer;
        private DataSerializer<T3> item3Serializer;
        private DataSerializer<T4> item4Serializer;

        /// <inheritdoc/>
        public override void Initialize(SerializerSelector serializerSelector)
        {
            item1Serializer = MemberSerializer<T1>.Create(serializerSelector);
            item2Serializer = MemberSerializer<T2>.Create(serializerSelector);
            item3Serializer = MemberSerializer<T3>.Create(serializerSelector);
            item4Serializer = MemberSerializer<T4>.Create(serializerSelector);
        }

        /// <inheritdoc />
        public override void Serialize(ref ValueTuple<T1, T2, T3, T4> obj, ArchiveMode mode, SerializationStream stream)
        {
            if (mode == ArchiveMode.Serialize)
            {
                item1Serializer.Serialize(obj.Item1, stream);
                item2Serializer.Serialize(obj.Item2, stream);
                item3Serializer.Serialize(obj.Item3, stream);
                item4Serializer.Serialize(obj.Item4, stream);
            }
            else
            {
                var item1 = default(T1);
                var item2 = default(T2);
                var item3 = default(T3);
                var item4 = default(T4);
                item1Serializer.Serialize(ref item1, mode, stream);
                item2Serializer.Serialize(ref item2, mode, stream);
                item3Serializer.Serialize(ref item3, mode, stream);
                item4Serializer.Serialize(ref item4, mode, stream);
                obj = new ValueTuple<T1, T2, T3, T4>(item1, item2, item3, item4);
            }
        }
    }

}
