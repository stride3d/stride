using Microsoft.CodeAnalysis;
using Stride.Core.CompilerServices.DataEvaluationApi.NexAPI;
using System.Text;

namespace Stride.Core.CompilerServices.Modules.ObjectDescription;

internal class SourceCreator
{
    internal string Create(SourceProductionContext ctx, ClassInfo info)
    {
        var ns = info.NameSpace != null ? "namespace " + info.NameSpace + ";" : "";
        var dictionaryValues = new StringBuilder();
        var descriptorTempvariables = new StringBuilder();
        var memberArrayValues = new StringBuilder();
        var accurateNamespace = info.NameSpace != null ? info.NameSpace + "." : "";
        var descriptiveClassName = info.IsGeneric ? accurateNamespace + info.GenericTypeName : accurateNamespace + info.Name;
        var counter = 0;
        foreach (var member in info.MemberSymbols)
        {
            string descriptorBase;
            var temp = $"___TEMP_{member.Name.Split('.').Last()}";
            //TODO: swap with references nameof
            if (member.TypeKind == SymbolKind.Field)
            {
                descriptorBase = "StrideFieldDescriptor";
                descriptorTempvariables.AppendLine($"\t\tvar {temp} = new {descriptorBase}(this,typeof({descriptiveClassName}).GetField(\"{member.Name}\"), namingConvention.Comparer);\n\t\t{temp}.Mode = {member.DataMemberMode};");
                dictionaryValues.AppendLine($"\t\t[\"{member.Name}\"] = {temp},");
            }
            if (member.TypeKind == SymbolKind.Property)
            {
                descriptorBase = "StridePropertyDescriptor";
                descriptorTempvariables.AppendLine($"\t\tvar {temp} = new {descriptorBase}(this,typeof({descriptiveClassName}).GetProperty(\"{member.Name}\"),namingConvention.Comparer);\n\t\t{temp}.Mode = {member.DataMemberMode};");
                dictionaryValues.AppendLine($"\t\t[\"{member.Name}\"] = {temp},");

            }
            memberArrayValues.AppendLine(temp + ",");
            counter++;
        }
        var dictionary = dictionaryValues.ToString().TrimEnd(',');
        var Template = @$"// <auto-generated/>
//  This code was generated by Strides EditorSerializer.
//  Do not edit this file.

#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using Stride.Core;
using Stride.Core.Reflection;
using StrideCoreAlias = Stride.Core;
using Stride.Core.Yaml.Serialization;
{ns}
[System.CodeDom.Compiler.GeneratedCode(""StrideEditorSerializer"",""1.0.0.0"")]
[ObjectDescriptor(type:typeof({descriptiveClassName}))]
internal class {info.GeneratorName} : ITypeDescriptor
{{

    private HashSet<string> remapMembers = new();
    private Dictionary<string, IStrideMemberDescriptor> mapMembers;
    private readonly IStrideTypeDescriptorFactory factory;
    private IStrideMemberDescriptor[] members;
    
    public IEnumerable<IStrideMemberDescriptor> Members => members;
    public {info.GeneratorName}(IStrideTypeDescriptorFactory factory, bool emitDefaultValues, IMemberNamingConvention namingConvention)
    {{
        this.factory = factory;
        {descriptorTempvariables}
        mapMembers = new()
        {{
{dictionary}
        }};
        members = new IStrideMemberDescriptor[]
        {{
{memberArrayValues}
        }};
        Attributes = factory.AttributeRegistry.GetAttributes(typeof({descriptiveClassName}));
        DataStyleAttribute attr = null;
            Style = DataStyle.Any;
            foreach (var attribute in Attributes)
            {{
                var styleAttribute = attribute as DataStyleAttribute;
                if (styleAttribute != null)
                {{
                    Style = styleAttribute.Style;
                    attr = styleAttribute;
                }}
            }}
        if(attr != null)
        {{
            for(int i=0; i < members.Length;i++)
            {{
                members[i].Style = attr.Style;
                members[i].ScalarStyle = attr.ScalarStyle;
            }}
        }}

    }}
    public Type Type {{ get; }} = typeof({descriptiveClassName});

    public List<Attribute> Attributes {{ get; }}
    public StrideCoreAlias.DataMemberMode DefaultMemberMode {{ get; }} = StrideCoreAlias.DataMemberMode.Default;



    public int Count {{ get; }} = {info.MemberSymbols.Count};


    public DescriptorCategory Category {{ get; }} = DescriptorCategory.Object;

    public bool HasMembers {{ get; }} = {(info.MemberSymbols.Count > 0).ToString().ToLower()};


    public IStrideMemberDescriptor this[string name]
    {{
        get
        {{
                return mapMembers[name];
        }}
    }}

    public IStrideMemberDescriptor TryGetMember(string name)
    {{
        IStrideMemberDescriptor member;
        mapMembers.TryGetValue(name, out member);
        return member;
    }}


   public  bool IsCompilerGenerated {{ get; }} = false;

    public bool IsMemberRemapped(string name)
    {{
        return remapMembers != null && remapMembers.Contains(name);
    }}


    public DataStyle Style {{ get; }}

    public void Initialize(IComparer<object> keyComparer){{}}

            public bool Contains(string memberName)
        {{
            return mapMembers != null && mapMembers.ContainsKey(memberName);
        }}
}}
";
        return Template;
    }
}
